###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC210\NC210-200处理板\source\user\CrcCheck.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\user\CrcCheck.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\CrcCheck.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\CrcCheck.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\user\CrcCheck.c
      1          /*******************************************************************************
      2          * Description  : 校验函数
      3          * Author       : 2018/5/15 星期二, by redmorningcn
      4          *******************************************************************************/
      5          #include <CrcCheck.h>
      6          
      7          /*******************************************************************************
      8           * CONSTANTS
      9           */

   \                                 In section .rodata, align 4
     10          const u16 APP_SD_CRC16_TAB[256] = {    
   \                     APP_SD_CRC16_TAB:
   \   00000000   0x0000 0x1021      DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              0x2042 0x3063
   \              0x4084 0x50A5
   \              0x60C6 0x70E7
   \              0x8108 0x9129
   \   00000014   0xA14A 0xB16B      DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
   \              0xC18C 0xD1AD
   \              0xE1CE 0xF1EF
   \              0x1231 0x0210
   \              0x3273 0x2252
   \   00000028   0x52B5 0x4294      DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
   \              0x72F7 0x62D6
   \              0x9339 0x8318
   \              0xB37B 0xA35A
   \              0xD3BD       
   \   0000003A   0xC39C 0xF3FF      DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
   \              0xE3DE 0x2462
   \              0x3443 0x0420
   \              0x1401 0x64E6
   \              0x74C7 0x44A4
   \   0000004E   0x5485 0xA56A      DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
   \              0xB54B 0x8528
   \              0x9509 0xE5EE
   \              0xF5CF 0xC5AC
   \              0xD58D       
   \   00000060   0x3653 0x2672      DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
   \              0x1611 0x0630
   \              0x76D7 0x66F6
   \              0x5695 0x46B4
   \              0xB75B 0xA77A
   \   00000074   0x9719 0x8738      DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
   \              0xF7DF 0xE7FE
   \              0xD79D 0xC7BC
   \              0x48C4 0x58E5
   \              0x6886       
   \   00000086   0x78A7 0x0840      DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
   \              0x1861 0x2802
   \              0x3823 0xC9CC
   \              0xD9ED 0xE98E
   \              0xF9AF 0x8948
   \   0000009A   0x9969 0xA90A      DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
   \              0xB92B 0x5AF5
   \              0x4AD4 0x7AB7
   \              0x6A96 0x1A71
   \              0x0A50 0x3A33
   \   000000AE   0x2A12 0xDBFD      DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
   \              0xCBDC 0xFBBF
   \              0xEB9E 0x9B79
   \              0x8B58 0xBB3B
   \              0xAB1A       
   \   000000C0   0x6CA6 0x7C87      DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
   \              0x4CE4 0x5CC5
   \              0x2C22 0x3C03
   \              0x0C60 0x1C41
   \              0xEDAE 0xFD8F
   \   000000D4   0xCDEC 0xDDCD      DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
   \              0xAD2A 0xBD0B
   \              0x8D68 0x9D49
   \              0x7E97 0x6EB6
   \              0x5ED5       
   \   000000E6   0x4EF4 0x3E13      DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
   \              0x2E32 0x1E51
   \              0x0E70 0xFF9F
   \              0xEFBE 0xDFDD
   \              0xCFFC 0xBF1B
   \   000000FA   0xAF3A 0x9F59      DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
   \              0x8F78 0x9188
   \              0x81A9 0xB1CA
   \              0xA1EB 0xD10C
   \              0xC12D       
   \   0000010C   0xF14E 0xE16F      DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
   \              0x1080 0x00A1
   \              0x30C2 0x20E3
   \              0x5004 0x4025
   \              0x7046 0x6067
   \   00000120   0x83B9 0x9398      DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
   \              0xA3FB 0xB3DA
   \              0xC33D 0xD31C
   \              0xE37F 0xF35E
   \              0x02B1 0x1290
   \   00000134   0x22F3 0x32D2      DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
   \              0x4235 0x5214
   \              0x6277 0x7256
   \              0xB5EA 0xA5CB
   \              0x95A8       
   \   00000146   0x8589 0xF56E      DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
   \              0xE54F 0xD52C
   \              0xC50D 0x34E2
   \              0x24C3 0x14A0
   \              0x0481 0x7466
   \   0000015A   0x6447 0x5424      DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
   \              0x4405 0xA7DB
   \              0xB7FA 0x8799
   \              0x97B8 0xE75F
   \              0xF77E       
   \   0000016C   0xC71D 0xD73C      DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
   \              0x26D3 0x36F2
   \              0x0691 0x16B0
   \              0x6657 0x7676
   \              0x4615 0x5634
   \   00000180   0xD94C 0xC96D      DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
   \              0xF90E 0xE92F
   \              0x99C8 0x89E9
   \              0xB98A 0xA9AB
   \              0x5844       
   \   00000192   0x4865 0x7806      DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
   \              0x6827 0x18C0
   \              0x08E1 0x3882
   \              0x28A3 0xCB7D
   \              0xDB5C 0xEB3F
   \   000001A6   0xFB1E 0x8BF9      DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
   \              0x9BD8 0xABBB
   \              0xBB9A 0x4A75
   \              0x5A54 0x6A37
   \              0x7A16       
   \   000001B8   0x0AF1 0x1AD0      DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
   \              0x2AB3 0x3A92
   \              0xFD2E 0xED0F
   \              0xDD6C 0xCD4D
   \              0xBDAA 0xAD8B
   \   000001CC   0x9DE8 0x8DC9      DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
   \              0x7C26 0x6C07
   \              0x5C64 0x4C45
   \              0x3CA2 0x2C83
   \              0x1CE0 0x0CC1
   \   000001E0   0xEF1F 0xFF3E      DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
   \              0xCF5D 0xDF7C
   \              0xAF9B 0xBFBA
   \              0x8FD9 0x9FF8
   \              0x6E17       
   \   000001F2   0x7E36 0x4E55      DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
   \              0x5E74 0x2E93
   \              0x3EB2 0x0ED1
   \              0x1EF0       
     11              0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
     12              0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
     13              0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
     14              0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
     15              0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
     16              0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
     17              0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
     18              0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
     19              0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
     20              0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
     21              0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
     22              0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
     23              0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
     24              0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
     25              0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
     26              0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
     27              0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
     28              0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
     29              0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
     30              0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
     31              0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
     32              0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
     33              0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
     34              0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
     35              0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
     36              0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
     37              0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
     38              0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
     39              0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
     40              0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
     41              0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
     42              0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
     43          };
     44          

   \                                 In section .rodata, align 4
     45          const u16 APP_CRC16_TAB[256] = { 
   \                     APP_CRC16_TAB:
   \   00000000   0x0000 0xC0C1      DC16 0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920
   \              0xC181 0x0140
   \              0xC301 0x03C0
   \              0x0280 0xC241
   \              0xC601 0x06C0
   \              0x0780       
   \   00000016   0xC741 0x0500      DC16 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840
   \              0xC5C1 0xC481
   \              0x0440 0xCC01
   \              0x0CC0 0x0D80
   \              0xCD41 0x0F00
   \   0000002A   0xCFC1 0xCE81      DC16 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176
   \              0x0E40 0x0A00
   \              0xCAC1 0xCB81
   \              0x0B40 0xC901
   \              0x09C0 0x0880
   \   0000003E   0xC841 0xD801      DC16 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680
   \              0x18C0 0x1980
   \              0xD941 0x1B00
   \              0xDBC1 0xDA81
   \              0x1A40 0x1E00
   \   00000052   0xDEC1 0xDF81      DC16 57025, 57217, 8000, 56577, 7616, 7296, 56385, 5120, 54465, 54657
   \              0x1F40 0xDD01
   \              0x1DC0 0x1C80
   \              0xDC41 0x1400
   \              0xD4C1 0xD581
   \   00000066   0x1540 0xD701      DC16 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352
   \              0x17C0 0x1680
   \              0xD641 0xD201
   \              0x12C0 0x1380
   \              0xD341 0x1100
   \   0000007A   0xD1C1 0xD081      DC16 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401
   \              0x1040 0xF001
   \              0x30C0 0x3180
   \              0xF141 0x3300
   \              0xF3C1       
   \   0000008C   0xF281 0x3240      DC16 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440
   \              0x3600 0xF6C1
   \              0xF781 0x3740
   \              0xF501 0x35C0
   \              0x3480       
   \   0000009E   0xF441 0x3C00      DC16 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16000, 65089
   \              0xFCC1 0xFD81
   \              0x3D40 0xFF01
   \              0x3FC0 0x3E80
   \              0xFE41       
   \   000000B0   0xFA01 0x3AC0      DC16 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240
   \              0x3B80 0xFB41
   \              0x3900 0xF9C1
   \              0xF881 0x3840
   \              0x2800       
   \   000000C2   0xE8C1 0xE981      DC16 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968
   \              0x2940 0xEB01
   \              0x2BC0 0x2A80
   \              0xEA41 0xEE01
   \              0x2EC0       
   \   000000D4   0x2F80 0xEF41      DC16 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689
   \              0x2D00 0xEDC1
   \              0xEC81 0x2C40
   \              0xE401 0x24C0
   \              0x2580 0xE541
   \   000000E8   0x2700 0xE7C1      DC16 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640
   \              0xE681 0x2640
   \              0x2200 0xE2C1
   \              0xE381 0x2340
   \              0xE101 0x21C0
   \   000000FC   0x2080 0xE041      DC16 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601
   \              0xA001 0x60C0
   \              0x6180 0xA141
   \              0x6300 0xA3C1
   \              0xA281       
   \   0000010E   0x6240 0x6600      DC16 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049
   \              0xA6C1 0xA781
   \              0x6740 0xA501
   \              0x65C0 0x6480
   \              0xA441       
   \   00000120   0x6C00 0xACC1      DC16 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521
   \              0xAD81 0x6D40
   \              0xAF01 0x6FC0
   \              0x6E80 0xAE41
   \              0xAA01       
   \   00000132   0x6AC0 0x6B80      DC16 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297
   \              0xAB41 0x6900
   \              0xA9C1 0xA881
   \              0x6840 0x7800
   \              0xB8C1       
   \   00000144   0xB981 0x7940      DC16 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640
   \              0xBB01 0x7BC0
   \              0x7A80 0xBA41
   \              0xBE01 0x7EC0
   \              0x7F80       
   \   00000156   0xBF41 0x7D00      DC16 48961, 32000, 48577, 48257, 31808, 46081, 29888, 30080, 46401
   \              0xBDC1 0xBC81
   \              0x7C40 0xB401
   \              0x74C0 0x7580
   \              0xB541       
   \   00000168   0x7700 0xB7C1      DC16 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313
   \              0xB681 0x7640
   \              0x7200 0xB2C1
   \              0xB381 0x7340
   \              0xB101       
   \   0000017A   0x71C0 0x7080      DC16 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440
   \              0xB041 0x5000
   \              0x90C1 0x9181
   \              0x5140 0x9301
   \              0x53C0       
   \   0000018C   0x5280 0x9241      DC16 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017
   \              0x9601 0x56C0
   \              0x5780 0x9741
   \              0x5500 0x95C1
   \              0x9481       
   \   0000019E   0x5440 0x9C01      DC16 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128
   \              0x5CC0 0x5D80
   \              0x9D41 0x5F00
   \              0x9FC1 0x9E81
   \              0x5E40       
   \   000001B0   0x5A00 0x9AC1      DC16 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817
   \              0x9B81 0x5B40
   \              0x9901 0x59C0
   \              0x5880 0x9841
   \              0x8801       
   \   000001C2   0x48C0 0x4980      DC16 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545
   \              0x8941 0x4B00
   \              0x8BC1 0x8A81
   \              0x4A40 0x4E00
   \              0x8EC1       
   \   000001D4   0x8F81 0x4F40      DC16 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177
   \              0x8D01 0x4DC0
   \              0x4C80 0x8C41
   \              0x4400 0x84C1
   \              0x8581       
   \   000001E6   0x4540 0x8701      DC16 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601
   \              0x47C0 0x4680
   \              0x8641 0x8201
   \              0x42C0 0x4380
   \              0x8341       
   \   000001F8   0x4100 0x81C1      DC16 16640, 33217, 32897, 16448
   \              0x8081 0x4040
     46              0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,   
     47              0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,   
     48              0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,   
     49              0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,   
     50              0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,   
     51              0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,   
     52              0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,   
     53              0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,   
     54              0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,   
     55              0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,   
     56              0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,   
     57              0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,   
     58              0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,   
     59              0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,   
     60              0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,   
     61              0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,   
     62              0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,   
     63              0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,   
     64              0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,   
     65              0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,   
     66              0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,   
     67              0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,   
     68              0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,   
     69              0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,   
     70              0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,   
     71              0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,   
     72              0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,   
     73              0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,   
     74              0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,   
     75              0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,   
     76              0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,   
     77              0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
     78                  
     79          };
     80          
     81          //modbus采用的CRC校验

   \                                 In section .rodata, align 4
     82          const u8 APP_AUCH_CRC_HI[] = {
   \                     APP_AUCH_CRC_HI:
   \   00000000   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000010   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000020   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000030   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000040   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000050   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000060   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000070   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000080   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000090   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000A0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000B0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000C0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000D0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000E0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000F0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
     83              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     84              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     85              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     86              0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     87              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     88              0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     89              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     90              0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     91              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     92              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
     93              0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     94              0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     95              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     96              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
     97              0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     98              0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     99              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    100              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    101              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    102              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    103              0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    104              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    105              0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    106              0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    107              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    108              0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    109          };
    110          

   \                                 In section .rodata, align 4
    111          const char APP_AUCH_CRC_LO[] = {
   \                     APP_AUCH_CRC_LO:
   \   00000000   0x00 0xC0          DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              0xC1 0x01    
   \              0xC3 0x03    
   \              0x02 0xC2    
   \              0xC6 0x06    
   \              0x07 0xC7    
   \              0x05 0xC5    
   \              0xC4 0x04    
   \              0xCC         
   \   00000011   0x0C 0x0D          DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0xCD 0x0F    
   \              0xCF 0xCE    
   \              0x0E 0x0A    
   \              0xCA 0xCB    
   \              0x0B 0xC9    
   \              0x09 0x08    
   \              0xC8         
   \   00000020   0xD8 0x18          DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              0x19 0xD9    
   \              0x1B 0xDB    
   \              0xDA 0x1A    
   \              0x1E 0xDE    
   \              0xDF 0x1F    
   \              0xDD 0x1D    
   \              0x1C         
   \   0000002F   0xDC 0x14          DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              0xD4 0xD5    
   \              0x15 0xD7    
   \              0x17 0x16    
   \              0xD6 0xD2    
   \              0x12 0x13    
   \              0xD3 0x11    
   \              0xD1         
   \   0000003E   0xD0 0x10          DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              0xF0 0x30    
   \              0x31 0xF1    
   \              0x33 0xF3    
   \              0xF2 0x32    
   \              0x36 0xF6    
   \              0xF7 0x37    
   \              0xF5         
   \   0000004D   0x35 0x34          DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              0xF4 0x3C    
   \              0xFC 0xFD    
   \              0x3D 0xFF    
   \              0x3F 0x3E    
   \              0xFE 0xFA    
   \              0x3A 0x3B    
   \              0xFB         
   \   0000005C   0x39 0xF9          DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              0xF8 0x38    
   \              0x28 0xE8    
   \              0xE9 0x29    
   \              0xEB 0x2B    
   \              0x2A 0xEA    
   \              0xEE 0x2E    
   \              0x2F         
   \   0000006B   0xEF 0x2D          DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              0xED 0xEC    
   \              0x2C 0xE4    
   \              0x24 0x25    
   \              0xE5 0x27    
   \              0xE7 0xE6    
   \              0x26 0x22    
   \              0xE2         
   \   0000007A   0xE3 0x23          DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              0xE1 0x21    
   \              0x20 0xE0    
   \              0xA0 0x60    
   \              0x61 0xA1    
   \              0x63 0xA3    
   \              0xA2 0x62    
   \              0x66         
   \   00000089   0xA6 0xA7          DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              0x67 0xA5    
   \              0x65 0x64    
   \              0xA4 0x6C    
   \              0xAC 0xAD    
   \              0x6D 0xAF    
   \              0x6F         
   \   00000096   0x6E 0xAE          DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              0xAA 0x6A    
   \              0x6B 0xAB    
   \              0x69 0xA9    
   \              0xA8 0x68    
   \              0x78 0xB8    
   \              0xB9         
   \   000000A3   0x79 0xBB          DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              0x7B 0x7A    
   \              0xBA 0xBE    
   \              0x7E 0x7F    
   \              0xBF 0x7D    
   \              0xBD 0xBC    
   \              0x7C         
   \   000000B0   0xB4 0x74          DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              0x75 0xB5    
   \              0x77 0xB7    
   \              0xB6 0x76    
   \              0x72 0xB2    
   \              0xB3 0x73    
   \              0xB1         
   \   000000BD   0x71 0x70          DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              0xB0 0x50    
   \              0x90 0x91    
   \              0x51 0x93    
   \              0x53 0x52    
   \              0x92 0x96    
   \              0x56 0x57    
   \              0x97         
   \   000000CC   0x55 0x95          DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              0x94 0x54    
   \              0x9C 0x5C    
   \              0x5D 0x9D    
   \              0x5F 0x9F    
   \              0x9E 0x5E    
   \              0x5A 0x9A    
   \              0x9B         
   \   000000DB   0x5B 0x99          DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              0x59 0x58    
   \              0x98 0x88    
   \              0x48 0x49    
   \              0x89 0x4B    
   \              0x8B 0x8A    
   \              0x4A 0x4E    
   \              0x8E         
   \   000000EA   0x8F 0x4F          DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              0x8D 0x4D    
   \              0x4C 0x8C    
   \              0x44 0x84    
   \              0x85 0x45    
   \              0x87 0x47    
   \              0x46 0x86    
   \              0x82         
   \   000000F9   0x42 0x43          DC8 66, 67, 131, 65, 129, 128, 64
   \              0x83 0x41    
   \              0x81 0x80    
   \              0x40         
    112              0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    113              0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    114              0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    115              0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    116              0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    117              0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    118              0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    119              0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    120              0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    121              0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    122              0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    123              0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    124              0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    125              0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    126              0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    127              0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    128              0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    129              0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    130              0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    131              0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    132              0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    133              0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    134              0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    135              0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    136              0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    137              0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    138          }; 
    139          
    140          /*******************************************************************************
    141           * MACROS
    142           */
    143          
    144          /*******************************************************************************
    145           * TYPEDEFS
    146           */
    147          
    148          /*******************************************************************************
    149           * LOCAL VARIABLES
    150           */
    151          
    152          /*******************************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          /*******************************************************************************
    157           * LOCAL FUNCTIONS
    158           */
    159          
    160          /*******************************************************************************
    161           * GLOBAL FUNCTIONS
    162           */
    163          
    164          /*******************************************************************************
    165           * EXTERN VARIABLES
    166           */
    167          
    168          /*******************************************************************************
    169           * EXTERN FUNCTIONS
    170           */
    171          
    172          /*******************************************************************************
    173           * 名    称： AppGetCrc16Chk
    174           * 功    能： 取CRC16校验和（长沙南车协议CRC校验）
    175           * 入口参数： 无
    176           * 出口参数： 无
    177           * 作    者： 无名沈.
    178           * 创建日期： 2017-07-26
    179           * 修    改：
    180           * 修改日期：
    181           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          u16 GetCrc16Chk(u8 *buf, u16 len)
    183          {
   \                     GetCrc16Chk: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    184              u16 crc = 0x0;
   \   00000002   0x2200             MOVS     R2,#+0
    185              u16 i, tmp;
    186              
    187              for (i=0; i< len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE00B             B.N      ??GetCrc16Chk_0
    188                  tmp = crc;
   \                     ??GetCrc16Chk_1: (+1)
   \   00000008   0x0014             MOVS     R4,R2
    189                  crc = APP_SD_CRC16_TAB[(tmp>>8) ^ *buf++];
   \   0000000A   0x....             LDR.N    R2,??DataTable4
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x7805             LDRB     R5,[R0, #+0]
   \   00000010   0xEA95 0x2524      EORS     R5,R5,R4, ASR #+8
   \   00000014   0xF832 0x2015      LDRH     R2,[R2, R5, LSL #+1]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
    190                  crc = crc ^ (tmp<<8);
   \   0000001A   0xEA92 0x2204      EORS     R2,R2,R4, LSL #+8
    191              }
   \   0000001E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetCrc16Chk_0: (+1)
   \   00000020   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x428B             CMP      R3,R1
   \   00000026   0xD3EF             BCC.N    ??GetCrc16Chk_1
    192              
    193              return(crc);
   \   00000028   0x0010             MOVS     R0,R2
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xBC30             POP      {R4,R5}
   \   0000002E   0x4770             BX       LR               ;; return
    194          }
    195          /*******************************************************************************
    196           * 名    称： AppGetCrc16Chk
    197           * 功    能： 
    198           * 入口参数： 无
    199           * 出口参数： 无
    200           * 作    者： 无名沈.
    201           * 创建日期： 2017-07-26
    202           * 修    改：
    203           * 修改日期： 
    204           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    205          u16 GetCrc16Chk2(u8 *buf, u16 len)
    206          {
   \                     GetCrc16Chk2: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    207          	u16 i;
    208          	u16 crc =0xFFFF;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
    209          	for(i=0;i<len;i++) {
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE00C             B.N      ??GetCrc16Chk2_0
    210          		crc=( crc >> 8 ) ^ APP_CRC16_TAB[ ( crc & 0xFF ) ^ buf[i]]; 
   \                     ??GetCrc16Chk2_1: (+1)
   \   0000000A   0x0014             MOVS     R4,R2
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x....             LDR.N    R5,??DataTable4_1
   \   00000010   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000016   0x5C1E             LDRB     R6,[R3, R0]
   \   00000018   0x4072             EORS     R2,R6,R2
   \   0000001A   0xF835 0x2012      LDRH     R2,[R5, R2, LSL #+1]
   \   0000001E   0xEA92 0x2214      EORS     R2,R2,R4, LSR #+8
    211          	}
   \   00000022   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetCrc16Chk2_0: (+1)
   \   00000024   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0x428B             CMP      R3,R1
   \   0000002A   0xD3EE             BCC.N    ??GetCrc16Chk2_1
    212              
    213          	return crc;
   \   0000002C   0x0010             MOVS     R0,R2
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0xBC70             POP      {R4-R6}
   \   00000032   0x4770             BX       LR               ;; return
    214          }
    215          
    216          /*******************************************************************************
    217           * 名    称： AppGetMBCrc16Chk
    218           * 功    能： 
    219           * 入口参数： 无
    220           * 出口参数： 无
    221           * 作    者： 无名沈.
    222           * 创建日期： 2017-07-26
    223           * 修    改：
    224           * 修改日期：
    225           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    226          u16 GetMBCrc16Chk(u8 *buf, u16  len)
    227          {
   \                     GetMBCrc16Chk: (+1)
   \   00000000   0xB410             PUSH     {R4}
    228              u8 uchCRCHi = 0xFF ;                           /* 高CRC字节初始化 */
   \   00000002   0x22FF             MOVS     R2,#+255
    229              u8 uchCRCLo = 0xFF ;                           /* 低CRC 字节初始化 */
   \   00000004   0x23FF             MOVS     R3,#+255
   \   00000006   0xE008             B.N      ??GetMBCrc16Chk_0
    230              unsigned uIndex ;                                   /* CRC循环中的索引 */
    231              
    232              while (len--) {                                     /* 传输消息缓冲区 */
    233                  uIndex = uchCRCHi ^ *buf++ ;                    /* 计算CRC */
   \                     ??GetMBCrc16Chk_1: (+1)
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x7804             LDRB     R4,[R0, #+0]
   \   0000000C   0x4054             EORS     R4,R4,R2
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
    234                  uchCRCHi = uchCRCLo ^ APP_AUCH_CRC_HI[uIndex];
   \   00000010   0x....             LDR.N    R2,??DataTable4_2
   \   00000012   0x5CA2             LDRB     R2,[R4, R2]
   \   00000014   0x405A             EORS     R2,R2,R3
    235                  uchCRCLo = APP_AUCH_CRC_LO[uIndex] ;
   \   00000016   0x....             LDR.N    R3,??DataTable4_3
   \   00000018   0x5CE3             LDRB     R3,[R4, R3]
    236              }
   \                     ??GetMBCrc16Chk_0: (+1)
   \   0000001A   0x000C             MOVS     R4,R1
   \   0000001C   0x1E61             SUBS     R1,R4,#+1
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD1F1             BNE.N    ??GetMBCrc16Chk_1
    237              
    238              return (uchCRCHi << 8 | uchCRCLo) ;
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000028   0xEA53 0x2002      ORRS     R0,R3,R2, LSL #+8
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0xBC10             POP      {R4}
   \   00000030   0x4770             BX       LR               ;; return
    239          } 
    240          /*******************************************************************************
    241           * 名    称： GetModBusCrc16Up
    242           * 功    能： 
    243           * 入口参数： 无
    244           * 出口参数： 无
    245           * 作    者： 无名沈.
    246           * 创建日期： 2017-07-26
    247           * 修    改：
    248           * 修改日期：
    249           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    250          u16 GetMBCrc16Up(u8 *buf,u16  len)
    251          {
   \                     GetMBCrc16Up: (+1)
   \   00000000   0xB410             PUSH     {R4}
    252              u8 uchCRCHi = 0xFF ;         /* 高CRC字节初始化 */
   \   00000002   0x22FF             MOVS     R2,#+255
    253              u8 uchCRCLo = 0xFF ;         /* 低CRC 字节初始化 */
   \   00000004   0x23FF             MOVS     R3,#+255
   \   00000006   0xE008             B.N      ??GetMBCrc16Up_0
    254              unsigned uIndex ;                       /* CRC循环中的索引 */
    255              
    256              while (len--)                     /* 传输消息缓冲区 */
    257              {
    258                  uIndex      = uchCRCHi ^ *buf++ ;    /* 计算CRC */
   \                     ??GetMBCrc16Up_1: (+1)
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x7804             LDRB     R4,[R0, #+0]
   \   0000000C   0x4054             EORS     R4,R4,R2
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
    259                  uchCRCHi    = uchCRCLo ^ APP_AUCH_CRC_HI[uIndex] ;
   \   00000010   0x....             LDR.N    R2,??DataTable4_2
   \   00000012   0x5CA2             LDRB     R2,[R4, R2]
   \   00000014   0x405A             EORS     R2,R2,R3
    260                  uchCRCLo    = APP_AUCH_CRC_LO[uIndex] ;
   \   00000016   0x....             LDR.N    R3,??DataTable4_3
   \   00000018   0x5CE3             LDRB     R3,[R4, R3]
    261              }
   \                     ??GetMBCrc16Up_0: (+1)
   \   0000001A   0x000C             MOVS     R4,R1
   \   0000001C   0x1E61             SUBS     R1,R4,#+1
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD1F1             BNE.N    ??GetMBCrc16Up_1
    262              
    263              return (uchCRCLo << 8 | uchCRCHi) ;
   \   00000024   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0xEA52 0x2003      ORRS     R0,R2,R3, LSL #+8
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0xBC10             POP      {R4}
   \   00000030   0x4770             BX       LR               ;; return
    264          } 
    265          
    266          /*******************************************************************************
    267           * 名    称： GetSumChk
    268           * 功    能： 取校验和
    269           * 入口参数： Buf：求数组   Len：数组长度
    270           * 出口参数： 校验和
    271           * 作    者： 无名沈.
    272           * 创建日期： 2017-07-26
    273           * 修    改：
    274           * 修改日期：
    275           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    276          u8 GetSumChk(u8  *buf, u16 len)
    277          {
   \                     GetSumChk: (+1)
   \   00000000   0xB410             PUSH     {R4}
    278              u16    i;
    279              int8      sum = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    280              
    281              for(i = 0;i < len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??GetSumChk_0
    282                  sum += buf[i];                             //求和
   \                     ??GetSumChk_1: (+1)
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x561C             LDRSB    R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
    283              }
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetSumChk_0: (+1)
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??GetSumChk_1
    284              
    285              return  sum;
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    286          }
    287          /*******************************************************************************
    288           * 名    称： GetSumXorChk
    289           * 功    能： 取校验和补码
    290           * 入口参数： Buf：求数组   Len：数组长度
    291           * 出口参数： 校验和
    292           * 作    者： 无名沈.
    293           * 创建日期： 2017-07-26
    294           * 修    改：
    295           * 修改日期：
    296           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    297          u8 GetSumXorChk(u8  *buf, u16 len)
    298          {
   \                     GetSumXorChk: (+1)
   \   00000000   0xB410             PUSH     {R4}
    299              u16  i;
    300              int8   sum = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    301              
    302              for(i = 0;i < len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??GetSumXorChk_0
    303                  sum += buf[i];                             //求和
   \                     ??GetSumXorChk_1: (+1)
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x561C             LDRSB    R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
    304              }
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetSumXorChk_0: (+1)
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??GetSumXorChk_1
    305              sum = ~sum + 1;
   \   00000018   0x43D0             MVNS     R0,R2
   \   0000001A   0x1C42             ADDS     R2,R0,#+1
    306              //if((u8)sum > 0x7f) {
    307              //	sum = ~sum + 1;// + 0x80;                  //取反+1
    308              //}
    309              
    310              return  sum;
   \   0000001C   0x0010             MOVS     R0,R2
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    311          }
    312          
    313          /*******************************************************************************
    314           * 名    称： GetSum16Chk
    315           * 功    能： 取校验和校
    316           * 入口参数： Buf：求数组   Len：数组长度
    317           * 出口参数： 验和
    318           * 作    者： 无名沈.
    319           * 创建日期： 2017-07-26
    320           * 修    改：
    321           * 修改日期：
    322           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    323          u16 GetSum16Chk(u8 *buf, u16 len)
    324          {
   \                     GetSum16Chk: (+1)
   \   00000000   0xB410             PUSH     {R4}
    325              u16  	i;
    326              u16   	sum = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    327              
    328              for(i = 0;i < len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??GetSum16Chk_0
    329                  sum += buf[i];                              //求和
   \                     ??GetSum16Chk_1: (+1)
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
    330              }
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetSum16Chk_0: (+1)
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??GetSum16Chk_1
    331              
    332              return  sum;
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    333          }
    334          /*******************************************************************************
    335           * 名    称： GetSum16XorChk
    336           * 功    能： 取校验和校补码
    337           * 入口参数： Buf：求数组   Len：数组长度
    338           * 出口参数： 验和
    339           * 作    者： 无名沈.
    340           * 创建日期： 2017-07-26
    341           * 修    改：
    342           * 修改日期：
    343           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    344          u16 GetSum16XorChk(u8 *buf, u16 len)
    345          {
   \                     GetSum16XorChk: (+1)
   \   00000000   0xB410             PUSH     {R4}
    346              u16  	i;
    347              u16   	sum = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    348              
    349              for(i = 0;i < len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??GetSum16XorChk_0
    350                  sum += buf[i];                              //求和
   \                     ??GetSum16XorChk_1: (+1)
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000C   0x18A2             ADDS     R2,R4,R2
    351              }
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetSum16XorChk_0: (+1)
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??GetSum16XorChk_1
    352              
    353              if((u16)sum > 0x7fff) {
   \   00000018   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   0xF5B2 0x4F00      CMP      R2,#+32768
   \   0000001E   0xDB03             BLT.N    ??GetSum16XorChk_2
    354              	sum = ~sum + 1 + 0x8000;                    //取反+1
   \   00000020   0x43D0             MVNS     R0,R2
   \   00000022   0xF647 0x71FF      MOVW     R1,#+32767
   \   00000026   0x1A42             SUBS     R2,R0,R1
    355              }
    356              return  sum;
   \                     ??GetSum16XorChk_2: (+1)
   \   00000028   0x0010             MOVS     R0,R2
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xBC10             POP      {R4}
   \   0000002E   0x4770             BX       LR               ;; return
    357          }
    358          
    359          /*******************************************************************************
    360           * 名    称： GetCheckSumNR
    361           * 功    能： 
    362           * 入口参数： 取CRC16校验和--和南瑞通讯
    363           * 出口参数： 
    364           * 作    者： 无名沈.
    365           * 创建日期： 2017-07-26
    366           * 修    改：
    367           * 修改日期：
    368           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    369          uint8 GetCheckSumNR(uint8  Buf[], u32 Len)
    370          {
   \                     GetCheckSumNR: (+1)
   \   00000000   0xB410             PUSH     {R4}
    371              int32  i;
    372              int8   CheckSum = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    373              
    374              for(i = 0;i < Len; i++) {
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE002             B.N      ??GetCheckSumNR_0
    375                  CheckSum += Buf[i];                         //求和
   \                     ??GetCheckSumNR_1: (+1)
   \   00000008   0x561C             LDRSB    R4,[R3, R0]
   \   0000000A   0x18A2             ADDS     R2,R4,R2
    376              }
   \   0000000C   0x1C5B             ADDS     R3,R3,#+1
   \                     ??GetCheckSumNR_0: (+1)
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD3FA             BCC.N    ??GetCheckSumNR_1
    377              
    378              if((unsigned char)CheckSum >= 0x80) {
   \   00000012   0x0010             MOVS     R0,R2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2880             CMP      R0,#+128
   \   00000018   0xDB03             BLT.N    ??GetCheckSumNR_2
    379              	CheckSum = ~CheckSum + 1 +0x80;             //取反+1
   \   0000001A   0x43D0             MVNS     R0,R2
   \   0000001C   0xF1B0 0x027F      SUBS     R2,R0,#+127
   \   00000020   0xE7FF             B.N      ??GetCheckSumNR_3
    380              } else {
    381              	CheckSum = CheckSum;                       	//取反+1
    382              }
    383              return  CheckSum;
   \                     ??GetCheckSumNR_2: (+1)
   \                     ??GetCheckSumNR_3: (+1)
   \   00000022   0x0010             MOVS     R0,R2
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    384          }
    385          
    386          
    387          //生成的码表如下：

   \                                 In section .rodata, align 4
    388          const u32 CRC32_TAB[256] = {
   \                     CRC32_TAB:
   \   00000000   0x00000000         DC32 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615
   \              0x77073096   
   \              0xEE0E612C   
   \              0x990951BA   
   \              0x076DC419   
   \              0x706AF48F   
   \   00000018   0xE963A535         DC32 3915621685, 2657392035, 249268274, 2044508324, 3772115230
   \              0x9E6495A3   
   \              0x0EDB8832   
   \              0x79DCB8A4   
   \              0xE0D5E91E   
   \   0000002C   0x97D2D988         DC32 2547177864, 162941995, 2125561021, 3887607047, 2428444049
   \              0x09B64C2B   
   \              0x7EB17CBD   
   \              0xE7B82D07   
   \              0x90BF1D91   
   \   00000040   0x1DB71064         DC32 498536548, 1789927666, 4089016648, 2227061214, 450548861
   \              0x6AB020F2   
   \              0xF3B97148   
   \              0x84BE41DE   
   \              0x1ADAD47D   
   \   00000054   0x6DDDE4EB         DC32 1843258603, 4107580753, 2211677639, 325883990, 1684777152
   \              0xF4D4B551   
   \              0x83D385C7   
   \              0x136C9856   
   \              0x646BA8C0   
   \   00000068   0xFD62F97A         DC32 4251122042, 2321926636, 335633487, 1661365465, 4195302755
   \              0x8A65C9EC   
   \              0x14015C4F   
   \              0x63066CD9   
   \              0xFA0F3D63   
   \   0000007C   0x8D080DF5         DC32 2366115317, 997073096, 1281953886, 3579855332, 2724688242
   \              0x3B6E20C8   
   \              0x4C69105E   
   \              0xD56041E4   
   \              0xA2677172   
   \   00000090   0x3C03E4D1         DC32 1006888145, 1258607687, 3524101629, 2768942443, 901097722
   \              0x4B04D447   
   \              0xD20D85FD   
   \              0xA50AB56B   
   \              0x35B5A8FA   
   \   000000A4   0x42B2986C         DC32 1119000684, 3686517206, 2898065728, 853044451, 1172266101
   \              0xDBBBC9D6   
   \              0xACBCF940   
   \              0x32D86CE3   
   \              0x45DF5C75   
   \   000000B8   0xDCD60DCF         DC32 3705015759, 2882616665, 651767980, 1373503546, 3369554304
   \              0xABD13D59   
   \              0x26D930AC   
   \              0x51DE003A   
   \              0xC8D75180   
   \   000000CC   0xBFD06116         DC32 3218104598, 565507253, 1454621731, 3485111705, 3099436303
   \              0x21B4F4B5   
   \              0x56B3C423   
   \              0xCFBA9599   
   \              0xB8BDA50F   
   \   000000E0   0x2802B89E         DC32 671266974, 1594198024, 3322730930, 2970347812, 795835527
   \              0x5F058808   
   \              0xC60CD9B2   
   \              0xB10BE924   
   \              0x2F6F7C87   
   \   000000F4   0x58684C11         DC32 1483230225, 3244367275, 3060149565, 1994146192, 31158534
   \              0xC1611DAB   
   \              0xB6662D3D   
   \              0x76DC4190   
   \              0x01DB7106   
   \   00000108   0x98D220BC         DC32 2563907772, 4023717930, 1907459465, 112637215, 2680153253
   \              0xEFD5102A   
   \              0x71B18589   
   \              0x06B6B51F   
   \              0x9FBFE4A5   
   \   0000011C   0xE8B8D433         DC32 3904427059, 2013776290, 251722036, 2517215374, 3775830040
   \              0x7807C9A2   
   \              0x0F00F934   
   \              0x9609A88E   
   \              0xE10E9818   
   \   00000130   0x7F6A0DBB         DC32 2137656763, 141376813, 2439277719, 3865271297, 1802195444
   \              0x086D3D2D   
   \              0x91646C97   
   \              0xE6635C01   
   \              0x6B6B51F4   
   \   00000144   0x1C6C6162         DC32 476864866, 2238001368, 4066508878, 1812370925, 453092731
   \              0x856530D8   
   \              0xF262004E   
   \              0x6C0695ED   
   \              0x1B01A57B   
   \   00000158   0x8208F4C1         DC32 2181625025, 4111451223, 1706088902, 314042704, 2344532202
   \              0xF50FC457   
   \              0x65B0D9C6   
   \              0x12B7E950   
   \              0x8BBEB8EA   
   \   0000016C   0xFCB9887C         DC32 4240017532, 1658658271, 366619977, 2362670323, 4224994405
   \              0x62DD1DDF   
   \              0x15DA2D49   
   \              0x8CD37CF3   
   \              0xFBD44C65   
   \   00000180   0x4DB26158         DC32 1303535960, 984961486, 2747007092, 3569037538, 1256170817
   \              0x3AB551CE   
   \              0xA3BC0074   
   \              0xD4BB30E2   
   \              0x4ADFA541   
   \   00000194   0x3DD895D7         DC32 1037604311, 2765210733, 3554079995, 1131014506, 879679996
   \              0xA4D1C46D   
   \              0xD3D6F4FB   
   \              0x4369E96A   
   \              0x346ED9FC   
   \   000001A8   0xAD678846         DC32 2909243462, 3663771856, 1141124467, 855842277, 2852801631
   \              0xDA60B8D0   
   \              0x44042D73   
   \              0x33031DE5   
   \              0xAA0A4C5F   
   \   000001BC   0xDD0D7CC9         DC32 3708648649, 1342533948, 654459306, 3188396048, 3373015174
   \              0x5005713C   
   \              0x270241AA   
   \              0xBE0B1010   
   \              0xC90C2086   
   \   000001D0   0x5768B525         DC32 1466479909, 544179635, 3110523913, 3462522015, 1591671054
   \              0x206F85B3   
   \              0xB966D409   
   \              0xCE61E49F   
   \              0x5EDEF90E   
   \   000001E4   0x29D9C998         DC32 702138776, 2966460450, 3352799412, 1504918807, 783551873
   \              0xB0D09822   
   \              0xC7D7A8B4   
   \              0x59B33D17   
   \              0x2EB40D81   
   \   000001F8   0xB7BD5C3B         DC32 3082640443, 3233442989, 3988292384, 2596254646, 62317068
   \              0xC0BA6CAD   
   \              0xEDB88320   
   \              0x9ABFB3B6   
   \              0x03B6E20C   
   \   0000020C   0x74B1D29A         DC32 1957810842, 3939845945, 2647816111, 81470997, 1943803523
   \              0xEAD54739   
   \              0x9DD277AF   
   \              0x04DB2615   
   \              0x73DC1683   
   \   00000220   0xE3630B12         DC32 3814918930, 2489596804, 225274430, 2053790376, 3826175755
   \              0x94643B84   
   \              0x0D6D6A3E   
   \              0x7A6A5AA8   
   \              0xE40ECF0B   
   \   00000234   0x9309FF9D         DC32 2466906013, 167816743, 2097651377, 4027552580, 2265490386
   \              0x0A00AE27   
   \              0x7D079EB1   
   \              0xF00F9344   
   \              0x8708A3D2   
   \   00000248   0x1E01F268         DC32 503444072, 1762050814, 4150417245, 2154129355, 426522225
   \              0x6906C2FE   
   \              0xF762575D   
   \              0x806567CB   
   \              0x196C3671   
   \   0000025C   0x6E6B06E7         DC32 1852507879, 4275313526, 2312317920, 282753626, 1742555852
   \              0xFED41B76   
   \              0x89D32BE0   
   \              0x10DA7A5A   
   \              0x67DD4ACC   
   \   00000270   0xF9B9DF6F         DC32 4189708143, 2394877945, 397917763, 1622183637, 3604390888
   \              0x8EBEEFF9   
   \              0x17B7BE43   
   \              0x60B08ED5   
   \              0xD6D6A3E8   
   \   00000284   0xA1D1937E         DC32 2714866558, 953729732, 1340076626, 3518719985, 2797360999
   \              0x38D8C2C4   
   \              0x4FDFF252   
   \              0xD1BB67F1   
   \              0xA6BC5767   
   \   00000298   0x3FB506DD         DC32 1068828381, 1219638859, 3624741850, 2936675148, 906185462
   \              0x48B2364B   
   \              0xD80D2BDA   
   \              0xAF0A1B4C   
   \              0x36034AF6   
   \   000002AC   0x41047A60         DC32 1090812512, 3747672003, 2825379669, 829329135, 1181335161
   \              0xDF60EFC3   
   \              0xA867DF55   
   \              0x316E8EEF   
   \              0x4669BE79   
   \   000002C0   0xCB61B38C         DC32 3412177804, 3160834842, 628085408, 1382605366, 3423369109
   \              0xBC66831A   
   \              0x256FD2A0   
   \              0x5268E236   
   \              0xCC0C7795   
   \   000002D4   0xBB0B4703         DC32 3138078467, 570562233, 1426400815, 3317316542, 2998733608
   \              0x220216B9   
   \              0x5505262F   
   \              0xC5BA3BBE   
   \              0xB2BD0B28   
   \   000002E8   0x2BB45A92         DC32 733239954, 1555261956, 3268935591, 3050360625, 752459403
   \              0x5CB36A04   
   \              0xC2D7FFA7   
   \              0xB5D0CF31   
   \              0x2CD99E8B   
   \   000002FC   0x5BDEAE1D         DC32 1541320221, 2607071920, 3965973030, 1969922972, 40735498
   \              0x9B64C2B0   
   \              0xEC63F226   
   \              0x756AA39C   
   \              0x026D930A   
   \   00000310   0x9C0906A9         DC32 2617837225, 3943577151, 1913087877, 83908371, 2512341634
   \              0xEB0E363F   
   \              0x72076785   
   \              0x05005713   
   \              0x95BF4A82   
   \   00000324   0xE2B87A14         DC32 3803740692, 2075208622, 213261112, 2463272603, 3855990285
   \              0x7BB12BAE   
   \              0x0CB61B38   
   \              0x92D28E9B   
   \              0xE5D5BE0D   
   \   00000338   0x7CDCEFB7         DC32 2094854071, 198958881, 2262029012, 4057260610, 1759359992
   \              0x0BDBDF21   
   \              0x86D3D2D4   
   \              0xF1D4E242   
   \              0x68DDB3F8   
   \   0000034C   0x1FDA836E         DC32 534414190, 2176718541, 4139329115, 1873836001, 414664567
   \              0x81BE16CD   
   \              0xF6B9265B   
   \              0x6FB077E1   
   \              0x18B74777   
   \   00000360   0x88085AE6         DC32 2282248934, 4279200368, 1711684554, 285281116, 2405801727
   \              0xFF0F6A70   
   \              0x66063BCA   
   \              0x11010B5C   
   \              0x8F659EFF   
   \   00000374   0xF862AE69         DC32 4167216745, 1634467795, 376229701, 2685067896, 3608007406
   \              0x616BFFD3   
   \              0x166CCF45   
   \              0xA00AE278   
   \              0xD70DD2EE   
   \   00000388   0x4E048354         DC32 1308918612, 956543938, 2808555105, 3495958263, 1231636301
   \              0x3903B3C2   
   \              0xA7672661   
   \              0xD06016F7   
   \              0x4969474D   
   \   0000039C   0x3E6E77DB         DC32 1047427035, 2932959818, 3654703836, 1088359270, 936918000
   \              0xAED16A4A   
   \              0xD9D65ADC   
   \              0x40DF0B66   
   \              0x37D83BF0   
   \   000003B0   0xA9BCAE53         DC32 2847714899, 3736837829, 1202900863, 817233897, 3183342108
   \              0xDEBB9EC5   
   \              0x47B2CF7F   
   \              0x30B5FFE9   
   \              0xBDBDF21C   
   \   000003C4   0xCABAC28A         DC32 3401237130, 1404277552, 615818150, 3134207493, 3453421203
   \              0x53B39330   
   \              0x24B4A3A6   
   \              0xBAD03605   
   \              0xCDD70693   
   \   000003D8   0x54DE5729         DC32 1423857449, 601450431, 3009837614, 3294710456, 1567103746
   \              0x23D967BF   
   \              0xB3667A2E   
   \              0xC4614AB8   
   \              0x5D681B02   
   \   000003EC   0x2A6F2B94         DC32 711928724, 3020668471, 3272380065, 1510334235, 755167117
   \              0xB40BBE37   
   \              0xC30C8EA1   
   \              0x5A05DF1B   
   \              0x2D02EF8D   
    389              0x00000000,0x77073096,0xee0e612c,0x990951ba,0x076dc419,0x706af48f,0xe963a535,0x9e6495a3,
    390              0x0edb8832,0x79dcb8a4,0xe0d5e91e,0x97d2d988,0x09b64c2b,0x7eb17cbd,0xe7b82d07,0x90bf1d91,
    391              0x1db71064,0x6ab020f2,0xf3b97148,0x84be41de,0x1adad47d,0x6ddde4eb,0xf4d4b551,0x83d385c7,
    392              0x136c9856,0x646ba8c0,0xfd62f97a,0x8a65c9ec,0x14015c4f,0x63066cd9,0xfa0f3d63,0x8d080df5,
    393              0x3b6e20c8,0x4c69105e,0xd56041e4,0xa2677172,0x3c03e4d1,0x4b04d447,0xd20d85fd,0xa50ab56b,
    394              0x35b5a8fa,0x42b2986c,0xdbbbc9d6,0xacbcf940,0x32d86ce3,0x45df5c75,0xdcd60dcf,0xabd13d59,
    395              0x26d930ac,0x51de003a,0xc8d75180,0xbfd06116,0x21b4f4b5,0x56b3c423,0xcfba9599,0xb8bda50f,
    396              0x2802b89e,0x5f058808,0xc60cd9b2,0xb10be924,0x2f6f7c87,0x58684c11,0xc1611dab,0xb6662d3d,
    397              0x76dc4190,0x01db7106,0x98d220bc,0xefd5102a,0x71b18589,0x06b6b51f,0x9fbfe4a5,0xe8b8d433,
    398              0x7807c9a2,0x0f00f934,0x9609a88e,0xe10e9818,0x7f6a0dbb,0x086d3d2d,0x91646c97,0xe6635c01,
    399              0x6b6b51f4,0x1c6c6162,0x856530d8,0xf262004e,0x6c0695ed,0x1b01a57b,0x8208f4c1,0xf50fc457,
    400              0x65b0d9c6,0x12b7e950,0x8bbeb8ea,0xfcb9887c,0x62dd1ddf,0x15da2d49,0x8cd37cf3,0xfbd44c65,
    401              0x4db26158,0x3ab551ce,0xa3bc0074,0xd4bb30e2,0x4adfa541,0x3dd895d7,0xa4d1c46d,0xd3d6f4fb,
    402              0x4369e96a,0x346ed9fc,0xad678846,0xda60b8d0,0x44042d73,0x33031de5,0xaa0a4c5f,0xdd0d7cc9,
    403              0x5005713c,0x270241aa,0xbe0b1010,0xc90c2086,0x5768b525,0x206f85b3,0xb966d409,0xce61e49f,
    404              0x5edef90e,0x29d9c998,0xb0d09822,0xc7d7a8b4,0x59b33d17,0x2eb40d81,0xb7bd5c3b,0xc0ba6cad,
    405              0xedb88320,0x9abfb3b6,0x03b6e20c,0x74b1d29a,0xead54739,0x9dd277af,0x04db2615,0x73dc1683,
    406              0xe3630b12,0x94643b84,0x0d6d6a3e,0x7a6a5aa8,0xe40ecf0b,0x9309ff9d,0x0a00ae27,0x7d079eb1,
    407              0xf00f9344,0x8708a3d2,0x1e01f268,0x6906c2fe,0xf762575d,0x806567cb,0x196c3671,0x6e6b06e7,
    408              0xfed41b76,0x89d32be0,0x10da7a5a,0x67dd4acc,0xf9b9df6f,0x8ebeeff9,0x17b7be43,0x60b08ed5,
    409              0xd6d6a3e8,0xa1d1937e,0x38d8c2c4,0x4fdff252,0xd1bb67f1,0xa6bc5767,0x3fb506dd,0x48b2364b,
    410              0xd80d2bda,0xaf0a1b4c,0x36034af6,0x41047a60,0xdf60efc3,0xa867df55,0x316e8eef,0x4669be79,
    411              0xcb61b38c,0xbc66831a,0x256fd2a0,0x5268e236,0xcc0c7795,0xbb0b4703,0x220216b9,0x5505262f,
    412              0xc5ba3bbe,0xb2bd0b28,0x2bb45a92,0x5cb36a04,0xc2d7ffa7,0xb5d0cf31,0x2cd99e8b,0x5bdeae1d,
    413              0x9b64c2b0,0xec63f226,0x756aa39c,0x026d930a,0x9c0906a9,0xeb0e363f,0x72076785,0x05005713,
    414              0x95bf4a82,0xe2b87a14,0x7bb12bae,0x0cb61b38,0x92d28e9b,0xe5d5be0d,0x7cdcefb7,0x0bdbdf21,
    415              0x86d3d2d4,0xf1d4e242,0x68ddb3f8,0x1fda836e,0x81be16cd,0xf6b9265b,0x6fb077e1,0x18b74777,
    416              0x88085ae6,0xff0f6a70,0x66063bca,0x11010b5c,0x8f659eff,0xf862ae69,0x616bffd3,0x166ccf45,
    417              0xa00ae278,0xd70dd2ee,0x4e048354,0x3903b3c2,0xa7672661,0xd06016f7,0x4969474d,0x3e6e77db,
    418              0xaed16a4a,0xd9d65adc,0x40df0b66,0x37d83bf0,0xa9bcae53,0xdebb9ec5,0x47b2cf7f,0x30b5ffe9,
    419              0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
    420              0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
    421          };
    422          
    423          /*******************************************************************************
    424           * 名    称： GetCrc32Chk
    425           * 功    能： 
    426           * 入口参数： 
    427           * 出口参数： 
    428           * 作    者： 无名沈.
    429           * 创建日期： 2017-07-26
    430           * 修    改：
    431           * 修改日期：
    432           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    433          u64 GetCrc32Chk(u64 m_CRC, u8  *buf, u16 len)
    434          {
   \                     GetCrc32Chk: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    435              u8 index;
    436              u16 i;
    437              
    438              for ( i = 0; i < len; i++ ) {
   \   00000002   0x2600             MOVS     R6,#+0
   \   00000004   0xE00E             B.N      ??GetCrc32Chk_0
    439                  index           = (u8)((m_CRC ^ buf[i]) & 0xff);
   \                     ??GetCrc32Chk_1: (+1)
   \   00000006   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000008   0x5CB4             LDRB     R4,[R6, R2]
   \   0000000A   0x4044             EORS     R4,R4,R0
    440                  m_CRC           = CRC32_TAB[index] ^ (m_CRC >> 8);
   \   0000000C   0x....             LDR.N    R5,??DataTable4_4
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xF855 0x4024      LDR      R4,[R5, R4, LSL #+2]
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0x0A00             LSRS     R0,R0,#+8
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x0A09             LSRS     R1,R1,#+8
   \   0000001E   0x4060             EORS     R0,R4,R0
   \   00000020   0x4069             EORS     R1,R5,R1
    441              }
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \                     ??GetCrc32Chk_0: (+1)
   \   00000024   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000028   0x429E             CMP      R6,R3
   \   0000002A   0xD3EC             BCC.N    ??GetCrc32Chk_1
    442              //return m_CRC ^ 0x00000000ffffffffL;
    443              return m_CRC;
   \   0000002C   0xBC70             POP      {R4-R6}
   \   0000002E   0x4770             BX       LR               ;; return
    444          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     APP_SD_CRC16_TAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     APP_CRC16_TAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     APP_AUCH_CRC_HI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     APP_AUCH_CRC_LO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     CRC32_TAB

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   GetCheckSumNR
       8   GetCrc16Chk
      12   GetCrc16Chk2
      12   GetCrc32Chk
       4   GetMBCrc16Chk
       4   GetMBCrc16Up
       4   GetSum16Chk
       4   GetSum16XorChk
       4   GetSumChk
       4   GetSumXorChk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
     256  APP_AUCH_CRC_HI
     256  APP_AUCH_CRC_LO
     512  APP_CRC16_TAB
     512  APP_SD_CRC16_TAB
    1024  CRC32_TAB
      42  GetCheckSumNR
      48  GetCrc16Chk
      52  GetCrc16Chk2
      48  GetCrc32Chk
      50  GetMBCrc16Chk
      50  GetMBCrc16Up
      32  GetSum16Chk
      48  GetSum16XorChk
      32  GetSumChk
      36  GetSumXorChk

 
 2 560 bytes in section .rodata
   458 bytes in section .text
 
   458 bytes of CODE  memory
 2 560 bytes of CONST memory

Errors: none
Warnings: none
