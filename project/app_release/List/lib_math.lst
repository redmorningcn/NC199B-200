###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:08
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_math.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_math.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\lib_math.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\lib_math.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_math.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/LIB
      4          *                                        CUSTOM LIBRARY MODULES
      5          *
      6          *                         (c) Copyright 2004-2015; Micrium, Inc.; Weston, FL
      7          *
      8          *                  All rights reserved.  Protected by international copyright laws.
      9          *
     10          *                  uC/LIB is provided in source form to registered licensees ONLY.  It is
     11          *                  illegal to distribute this source code to any third party unless you receive
     12          *                  written permission by an authorized Micrium representative.  Knowledge of
     13          *                  the source code may NOT be used to develop a similar product.
     14          *
     15          *                  Please help us continue to provide the Embedded community with the finest
     16          *                  software available.  Your honesty is greatly appreciated.
     17          *
     18          *                  You can find our product's user manual, API reference, release notes and
     19          *                  more information at: https://doc.micrium.com
     20          *
     21          *                  You can contact us at: http://www.micrium.com
     22          *********************************************************************************************************
     23          */
     24          
     25          /*
     26          *********************************************************************************************************
     27          *
     28          *                                        MATHEMATIC OPERATIONS
     29          *
     30          * Filename      : lib_math.c
     31          * Version       : V1.38.02
     32          * Programmer(s) : SR
     33          *                 ITJ
     34          *********************************************************************************************************
     35          * Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
     36          *
     37          *                     (a) ALL standard library functions are implemented in the custom library modules :
     38          *
     39          *                         (1) \<Custom Library Directory>\lib_*.*
     40          *
     41          *                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
     42          *
     43          *                               where
     44          *                                       <Custom Library Directory>      directory path for custom library software
     45          *                                       <cpu>                           directory name for specific processor (CPU)
     46          *                                       <compiler>                      directory name for specific compiler
     47          *
     48          *                     (b) Product-specific library functions are implemented in individual products.
     49          *
     50          *********************************************************************************************************
     51          * Notice(s)     : (1) The Institute of Electrical and Electronics Engineers and The Open Group, have given
     52          *                     us permission to reprint portions of their documentation.  Portions of this text are
     53          *                     reprinted and reproduced in electronic form from the IEEE Std 1003.1, 2004 Edition,
     54          *                     Standard for Information Technology -- Portable Operating System Interface (POSIX),
     55          *                     The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute
     56          *                     of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any
     57          *                     discrepancy between these versions and the original IEEE and The Open Group Standard,
     58          *                     the original IEEE and The Open Group Standard is the referee document.  The original
     59          *                     Standard can be obtained online at http://www.opengroup.org/unix/online.html.
     60          *********************************************************************************************************
     61          */
     62          
     63          
     64          /*
     65          *********************************************************************************************************
     66          *                                            INCLUDE FILES
     67          *********************************************************************************************************
     68          */
     69          
     70          #define    MICRIUM_SOURCE
     71          #define    LIB_MATH_MODULE
     72          #include  <lib_math.h>
     73          
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                            LOCAL DEFINES
     78          *********************************************************************************************************
     79          */
     80          
     81          
     82          /*
     83          *********************************************************************************************************
     84          *                                           LOCAL CONSTANTS
     85          *********************************************************************************************************
     86          */
     87          
     88          
     89          /*
     90          *********************************************************************************************************
     91          *                                          LOCAL DATA TYPES
     92          *********************************************************************************************************
     93          */
     94          
     95          
     96          /*
     97          *********************************************************************************************************
     98          *                                            LOCAL TABLES
     99          *********************************************************************************************************
    100          */
    101          
    102          
    103          /*
    104          *********************************************************************************************************
    105          *                                       LOCAL GLOBAL VARIABLES
    106          *********************************************************************************************************
    107          */
    108          

   \                                 In section .bss, align 4
    109          RAND_NBR  Math_RandSeedCur;                                     /* Cur rand nbr seed.                                   */
   \                     Math_RandSeedCur:
   \   00000000                      DS8 4
    110          
    111          
    112          /*
    113          *********************************************************************************************************
    114          *                                      LOCAL FUNCTION PROTOTYPES
    115          *********************************************************************************************************
    116          */
    117          
    118          
    119          /*
    120          *********************************************************************************************************
    121          *                                     LOCAL CONFIGURATION ERRORS
    122          *********************************************************************************************************
    123          */
    124          
    125          
    126          /*
    127          *********************************************************************************************************
    128          *                                             Math_Init()
    129          *
    130          * Description : (1) Initialize Mathematic Module :
    131          *
    132          *                   (a) Initialize random number seed value
    133          *
    134          *
    135          * Argument(s) : none.
    136          *
    137          * Return(s)   : none.
    138          *
    139          * Caller(s)   : Application.
    140          *
    141          * Note(s)     : (2) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "if rand()
    142          *                   is called before any calls to srand() are made, the same sequence shall be generated
    143          *                   as when srand() is first called with a seed value of 1".
    144          *********************************************************************************************************
    145          */
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void  Math_Init (void)
    148          {
   \                     Math_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    149              Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       Math_RandSetSeed
    150          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    151          
    152          
    153          /*
    154          *********************************************************************************************************
    155          *                                         Math_RandSetSeed()
    156          *
    157          * Description : Set the current pseudo-random number generator seed.
    158          *
    159          * Argument(s) : seed        Initial (or current) value to set for the pseudo-random number sequence.
    160          *
    161          * Return(s)   : none.
    162          *
    163          * Caller(s)   : Application.
    164          *
    165          * Note(s)     : (1) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "srand()
    166          *                   ... uses the argument as a seed for a new sequence of pseudo-random numbers to be
    167          *                   returned by subsequent calls to rand()".
    168          *
    169          *               (2) 'Math_RandSeedCur' MUST always be accessed exclusively in critical sections.
    170          *
    171          *                   See also 'Math_Rand()  Note #1b'.
    172          *********************************************************************************************************
    173          */
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void  Math_RandSetSeed (RAND_NBR  seed)
    176          {
   \                     Math_RandSetSeed: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    177              CPU_SR_ALLOC();
   \   00000004   0x2500             MOVS     R5,#+0
    178          
    179          
    180              CPU_CRITICAL_ENTER();
   \   00000006   0x.... 0x....      BL       CPU_SR_Save
   \   0000000A   0x0005             MOVS     R5,R0
   \   0000000C   0x.... 0x....      BL       CPU_IntDisMeasStart
    181              Math_RandSeedCur = seed;
   \   00000010   0x....             LDR.N    R0,??DataTable2
   \   00000012   0x6004             STR      R4,[R0, #+0]
    182              CPU_CRITICAL_EXIT();
   \   00000014   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       CPU_SR_Restore
    183          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    184          
    185          
    186          /*
    187          *********************************************************************************************************
    188          *                                             Math_Rand()
    189          *
    190          * Description : Calculate the next pseudo-random number.
    191          *
    192          * Argument(s) : none.
    193          *
    194          * Return(s)   : Next pseudo-random number in the sequence after 'Math_RandSeedCur'.
    195          *
    196          * Caller(s)   : Application.
    197          *
    198          * Note(s)     : (1) (a) The pseudo-random number generator is implemented as a Linear Congruential
    199          *                       Generator (LCG).
    200          *
    201          *                   (b) The pseudo-random number generated is in the range [0, RAND_LCG_PARAM_M].
    202          *
    203          *                   See also 'Math_RandSeed()  Note #1'.
    204          *
    205          *               (2) (a) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "rand()
    206          *                       ... need not be reentrant ... [and] is not required to be thread-safe".
    207          *
    208          *                   (b) However, in order to implement Math_Rand() as re-entrant; 'Math_RandSeedCur' MUST
    209          *                       always be accessed & updated exclusively in critical sections.
    210          *
    211          *                   See also 'Math_RandSeed()  Note #2'.
    212          *********************************************************************************************************
    213          */
    214          

   \                                 In section .text, align 2, keep-with-next
    215          RAND_NBR  Math_Rand (void)
    216          {
   \                     Math_Rand: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    217              RAND_NBR  seed;
    218              RAND_NBR  rand_nbr;
    219              CPU_SR_ALLOC();
   \   00000002   0x2500             MOVS     R5,#+0
    220          
    221          
    222              CPU_CRITICAL_ENTER();
   \   00000004   0x.... 0x....      BL       CPU_SR_Save
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0x.... 0x....      BL       CPU_IntDisMeasStart
    223              seed             = Math_RandSeedCur;
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x6800             LDR      R0,[R0, #+0]
    224              rand_nbr         = Math_RandSeed(seed);
   \   00000012   0x.... 0x....      BL       Math_RandSeed
   \   00000016   0x0004             MOVS     R4,R0
    225              Math_RandSeedCur = rand_nbr;
   \   00000018   0x....             LDR.N    R0,??DataTable2
   \   0000001A   0x6004             STR      R4,[R0, #+0]
    226              CPU_CRITICAL_EXIT();
   \   0000001C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       CPU_SR_Restore
    227          
    228              return (rand_nbr);
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    229          }
    230          
    231          
    232          /*
    233          *********************************************************************************************************
    234          *                                           Math_RandSeed()
    235          *
    236          * Description : Calculate the next pseudo-random number.
    237          *
    238          * Argument(s) : seed        Initial (or current) value for the pseudo-random number sequence.
    239          *
    240          * Return(s)   : Next pseudo-random number in the sequence after 'seed'.
    241          *
    242          * Caller(s)   : Math_Rand(),
    243          *               Application.
    244          *
    245          * Note(s)     : (1) (a) BSD/ANSI-C implements rand() as a Linear Congruential Generator (LCG) :
    246          *
    247          *                       (A) random_number       =  [(a * random_number ) + b]  modulo m
    248          *                                        n + 1                        n
    249          *
    250          *                               where
    251          *                                       (1) (a) random_number           Next     random number to generate
    252          *                                                            n+1
    253          *                                           (b) random_number           Previous random number    generated
    254          *                                                            n
    255          *
    256          *                                       (2) a = RAND_LCG_PARAM_A        LCG multiplier
    257          *                                       (3) b = RAND_LCG_PARAM_B        LCG incrementor
    258          *                                       (4) m = RAND_LCG_PARAM_M + 1    LCG modulus
    259          *
    260          *                   (b) The pseudo-random number generated is in the range [0, RAND_LCG_PARAM_M].
    261          *
    262                              See also 'lib_math.h  RANDOM NUMBER DEFINES  Note #1b'.
    263          *
    264          *               (2) (a) IEEE Std 1003.1, 2004 Edition, Section 'rand() : DESCRIPTION' states that "rand()
    265          *                       ... need not be reentrant ... [and] is not required to be thread-safe".
    266          *
    267          *                   (b) However, Math_RandSeed() is re-entrant since it calculates the next random number
    268          *                       using ONLY local variables.
    269          *********************************************************************************************************
    270          */
    271          

   \                                 In section .text, align 2, keep-with-next
    272          RAND_NBR  Math_RandSeed (RAND_NBR  seed)
    273          {
    274              RAND_NBR  rand_nbr;
    275          
    276          
    277              rand_nbr = (((RAND_NBR)RAND_LCG_PARAM_A * seed) + (RAND_NBR)RAND_LCG_PARAM_B)  %  ((RAND_NBR)RAND_LCG_PARAM_M + 1u);
   \                     Math_RandSeed: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable2_1  ;; 0x41c64e6d
   \   00000002   0xF243 0x0239      MOVW     R2,#+12345
   \   00000006   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   0000000A   0xF05F 0x4200      MOVS     R2,#-2147483648
   \   0000000E   0xFBB1 0xF0F2      UDIV     R0,R1,R2
   \   00000012   0xFB00 0x1012      MLS      R0,R0,R2,R1
    278          
    279              return (rand_nbr);
   \   00000016   0x4770             BX       LR               ;; return
    280          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     Math_RandSeedCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x41C64E6D         DC32     0x41c64e6d
    281          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Math_Init
         8   -> Math_RandSetSeed
      16   Math_Rand
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> Math_RandSeed
       0   Math_RandSeed
      16   Math_RandSetSeed
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      10  Math_Init
      42  Math_Rand
      24  Math_RandSeed
       4  Math_RandSeedCur
      32  Math_RandSetSeed

 
   4 bytes in section .bss
 116 bytes in section .text
 
 116 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
