###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_event.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_event.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\osal_event.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\osal_event.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_event.c
      1          /*******************************************************************************
      2           *   Filename:      @osal_event.c
      3           *   Revised:
      4           *   Revision:
      5           *   Writer:        @Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <osal.h>
     20          #include <osal_event.h>
     21          #include <osal_memory.h>
     22          
     23          #if OSAL_EVENT_EN > 0
     24          /*******************************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*******************************************************************************
     29           * TYPEDEFS
     30           */
     31          
     32          /*******************************************************************************
     33           * MACROS
     34           */
     35          
     36          /*******************************************************************************
     37           * LOCAL VARIABLES
     38           */
     39          
     40          /*******************************************************************************
     41           * GLOBAL VARIABLES
     42           */

   \                                 In section .bss, align 4
     43          OsalTadkREC_t   *TaskHead;      //the point to link'head
   \                     TaskHead:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          OsalTadkREC_t   *TaskActive;
   \                     TaskActive:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          osalTid           Task_id;
   \                     Task_id:
   \   00000000                      DS8 4
     46          
     47          #if OSAL_MEM_EN == 0

   \                                 In section .bss, align 4
     48          OsalTadkREC_t   Task[OSAL_MAX_TASKS];
   \                     Task:
   \   00000000                      DS8 240
     49          #endif
     50          
     51          /***********************************************
     52          * 描述： OS接口
     53          */
     54          #if UCOS_EN     == DEF_ENABLED
     55          #if OS_VERSION > 30000U

   \                                 In section .bss, align 4
     56           OS_SEM			Osal_EvtSem;    	        //信号量
   \                     Osal_EvtSem:
   \   00000000                      DS8 40
     57          #else
     58           OS_EVENT		*Osal_EvtSem;               //信号量
     59          #endif
     60          #endif
     61          /*******************************************************************************
     62           * LOCAL FUNCTIONS
     63           */
     64          
     65          /*******************************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*******************************************************************************
     70           * EXTERN VARIABLES
     71           */
     72          
     73           /*******************************************************************************
     74           * EXTERN FUNCTIONS
     75           */
     76          
     77          /*******************************************************************************
     78           * @fn       osal_init_TaskHead
     79           *
     80           * @brief   init task link's head
     81           *
     82           * @param   none
     83           *
     84           * @return
     85           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     86          void  osal_init_TaskHead(void )
     87          {
     88          #if OSAL_MEM_EN == 0
     89              byte       idx;
     90              for ( idx = 0; idx < OSAL_MAX_TASKS; idx++ ) {
   \                     osal_init_TaskHead: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE02A             B.N      ??osal_init_TaskHead_0
     91                  Task[idx].next              = (void *)NULL;
   \                     ??osal_init_TaskHead_1: (+1)
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R2,??DataTable4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2318             MOVS     R3,#+24
   \   0000000C   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000010   0x6011             STR      R1,[R2, #+0]
     92                  Task[idx].events            = 0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x....             LDR.N    R2,??DataTable4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x2318             MOVS     R3,#+24
   \   0000001A   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000001E   0x6151             STR      R1,[R2, #+20]
     93                  Task[idx].taskID            = 0;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x....             LDR.N    R2,??DataTable4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2318             MOVS     R3,#+24
   \   00000028   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000002C   0x60D1             STR      R1,[R2, #+12]
     94                  Task[idx].taskPriority      = 0;
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x....             LDR.N    R2,??DataTable4
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x2318             MOVS     R3,#+24
   \   00000036   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000003A   0x7411             STRB     R1,[R2, #+16]
     95                  Task[idx].pfnInit           = (void *)0;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x....             LDR.N    R2,??DataTable4
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2318             MOVS     R3,#+24
   \   00000044   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000048   0x6051             STR      R1,[R2, #+4]
     96                  Task[idx].pfnEventProcessor = (void *)0;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x....             LDR.N    R2,??DataTable4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x2318             MOVS     R3,#+24
   \   00000052   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000056   0x6091             STR      R1,[R2, #+8]
     97              }
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \                     ??osal_init_TaskHead_0: (+1)
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x280A             CMP      R0,#+10
   \   0000005E   0xDBD1             BLT.N    ??osal_init_TaskHead_1
     98          #endif
     99              TaskHead    = (OsalTadkREC_t *)NULL;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable4_1
   \   00000064   0x6008             STR      R0,[R1, #+0]
    100              TaskActive  = (OsalTadkREC_t *)NULL;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x....             LDR.N    R1,??DataTable4_2
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    101              Task_id     = 0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x....             LDR.N    R1,??DataTable4_3
   \   00000070   0x6008             STR      R0,[R1, #+0]
    102           }
   \   00000072   0x4770             BX       LR               ;; return
    103          
    104          /*******************************************************************************
    105           * @fn       osal_Task_init
    106           *
    107           * @brief   init task
    108           *
    109           * @param   none
    110           *
    111           * @return
    112           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    113          void  osal_Task_init(void)
    114          {
   \                     osal_Task_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    115              TaskActive = TaskHead;
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable4_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0xE00D             B.N      ??osal_Task_init_0
    116          
    117              while(TaskActive) {
    118                  if(TaskActive->pfnInit) {
   \                     ??osal_Task_init_1: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable4_2
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD003             BEQ.N    ??osal_Task_init_2
    119                       TaskActive->pfnInit();
   \   00000016   0x....             LDR.N    R0,??DataTable4_2
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x6840             LDR      R0,[R0, #+4]
   \   0000001C   0x4780             BLX      R0
    120                  }
    121                  TaskActive = TaskActive->next;
   \                     ??osal_Task_init_2: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable4_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable4_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
    122              }
   \                     ??osal_Task_init_0: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable4_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD1ED             BNE.N    ??osal_Task_init_1
    123              TaskActive = (OsalTadkREC_t *)NULL;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable4_2
   \   00000034   0x6008             STR      R0,[R1, #+0]
    124          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    125          
    126          /*******************************************************************************
    127          * 修改记录：20140510 增加INT8U id参数，用以任务ID自由分配取代任务ID系统分配
    128          */

   \                                 In section .text, align 2, keep-with-next
    129           void  osal_add_Task(pTaskInitFn pfnInit,
    130                                pTaskEventHandlerFn pfnEventProcessor,
    131                                osalPrio taskPriority,osalTid id)
    132          {
   \                     osal_add_Task: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    133              OsalTadkREC_t  *TaskNew;
    134              OsalTadkREC_t  *TaskSech;
    135              OsalTadkREC_t  **TaskPTR;
    136          #if OSAL_MEM_EN > 0
    137              TaskNew = osal_mem_alloc(sizeof( OsalTadkREC_t));
    138          #else
    139              byte           idx;
    140              for ( idx = 0; idx < OSAL_MAX_TASKS; idx++ ) {//查找空闲的任务资源，如找到则进行分配；
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0xE000             B.N      ??osal_add_Task_0
   \                     ??osal_add_Task_1: (+1)
   \   00000006   0x1C6D             ADDS     R5,R5,#+1
   \                     ??osal_add_Task_0: (+1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D0A             CMP      R5,#+10
   \   0000000C   0xDA0C             BGE.N    ??osal_add_Task_2
    141                  if ( !Task[idx].pfnEventProcessor ) {
   \   0000000E   0x....             LDR.N    R6,??DataTable4
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2718             MOVS     R7,#+24
   \   00000014   0xFB07 0x6605      MLA      R6,R7,R5,R6
   \   00000018   0x68B6             LDR      R6,[R6, #+8]
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD1F3             BNE.N    ??osal_add_Task_1
    142                      TaskNew = &Task[idx];
   \   0000001E   0x....             LDR.N    R4,??DataTable4
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2618             MOVS     R6,#+24
   \   00000024   0xFB06 0x4405      MLA      R4,R6,R5,R4
    143                      break;
    144                  }
    145              }
    146          #endif
    147              if(TaskNew) {
   \                     ??osal_add_Task_2: (+1)
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD017             BEQ.N    ??osal_add_Task_3
    148                  TaskNew->pfnInit =                      pfnInit;
   \   0000002C   0x6060             STR      R0,[R4, #+4]
    149                  TaskNew->pfnEventProcessor =            pfnEventProcessor;
   \   0000002E   0x60A1             STR      R1,[R4, #+8]
    150                  TaskNew->taskID =                       id;//Task_id++;
   \   00000030   0x60E3             STR      R3,[R4, #+12]
    151                  TaskNew->events =                       0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x6160             STR      R0,[R4, #+20]
    152                  TaskNew->taskPriority =                 taskPriority;
   \   00000036   0x7422             STRB     R2,[R4, #+16]
    153                  TaskNew->next =                         (OsalTadkREC_t *)NULL;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x6020             STR      R0,[R4, #+0]
    154          
    155                  TaskPTR = &TaskHead;
   \   0000003C   0x....             LDR.N    R1,??DataTable4_1
    156                  TaskSech = TaskHead;
   \   0000003E   0x....             LDR.N    R0,??DataTable4_1
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xE001             B.N      ??osal_add_Task_4
    157          
    158                  while(TaskSech)  {
    159                      if(TaskNew->taskPriority > TaskSech->taskPriority) {
    160                          TaskNew->next = TaskSech;
    161                          *TaskPTR = TaskNew;
    162                          return;
    163                      }
    164                      TaskPTR = &TaskSech->next;
   \                     ??osal_add_Task_5: (+1)
   \   00000044   0x0001             MOVS     R1,R0
    165                      TaskSech = TaskSech->next;
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \                     ??osal_add_Task_4: (+1)
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD006             BEQ.N    ??osal_add_Task_6
   \   0000004C   0x7C02             LDRB     R2,[R0, #+16]
   \   0000004E   0x7C23             LDRB     R3,[R4, #+16]
   \   00000050   0x429A             CMP      R2,R3
   \   00000052   0xD2F7             BCS.N    ??osal_add_Task_5
   \   00000054   0x6020             STR      R0,[R4, #+0]
   \   00000056   0x600C             STR      R4,[R1, #+0]
   \   00000058   0xE000             B.N      ??osal_add_Task_7
    166                  }
    167                  *TaskPTR = TaskNew;
   \                     ??osal_add_Task_6: (+1)
   \   0000005A   0x600C             STR      R4,[R1, #+0]
    168              }
    169              return;
   \                     ??osal_add_Task_3: (+1)
   \                     ??osal_add_Task_7: (+1)
   \   0000005C   0xBCF0             POP      {R4-R7}
   \   0000005E   0x4770             BX       LR               ;; return
    170          }
    171          
    172          /*******************************************************************************
    173           * @fn      osalNextActiveTask
    174           *
    175           * @brief   This function will return the next active task.
    176           *
    177           * NOTE:    Task queue is in priority order. We can stop at the
    178           *          first task that is "ready" (events element non-zero)
    179           *
    180           * @param   none
    181           *
    182           * @return  pointer to the found task, NULL if not found
    183           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    184          OsalTadkREC_t *osalNextActiveTask( void )
    185          {
    186              OsalTadkREC_t  *TaskSech;
    187          
    188              // Start at the beginning
    189              TaskSech = TaskHead;
   \                     osalNextActiveTask: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xE000             B.N      ??osalNextActiveTask_0
    190          
    191              // When found or not
    192              while (  TaskSech )  {
    193                  if ( TaskSech->events)  {
    194                      // task is highest priority that is ready
    195                      return  TaskSech;
    196                  }
    197                  TaskSech =  TaskSech->next;
   \                     ??osalNextActiveTask_1: (+1)
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \                     ??osalNextActiveTask_0: (+1)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD003             BEQ.N    ??osalNextActiveTask_2
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD0F9             BEQ.N    ??osalNextActiveTask_1
   \   00000012   0xE000             B.N      ??osalNextActiveTask_3
    198              }
    199              return NULL;
   \                     ??osalNextActiveTask_2: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??osalNextActiveTask_3: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    200          }
    201          
    202          /*******************************************************************************
    203           * @fn      osalFindActiveTask
    204           *
    205           * @brief   This function will return the taskid task.
    206           *
    207           * NOTE:    Task queue is in priority order. We can stop at the
    208           *          first task that is "ready" (events element non-zero)
    209           *
    210           * @param   task_id
    211           *
    212           * @return  pointer to the found task, NULL if not found
    213           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    214          OsalTadkREC_t *osalFindTask( osalTid taskID )
    215          {
    216              OsalTadkREC_t *TaskSech;
    217              TaskSech = TaskHead;
   \                     osalFindTask: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_1
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xE000             B.N      ??osalFindTask_0
    218              while(TaskSech) {
    219                  if(TaskSech->taskID == taskID) {
    220                          return (TaskSech);
    221                  }
    222                  TaskSech = TaskSech->next;
   \                     ??osalFindTask_1: (+1)
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \                     ??osalFindTask_0: (+1)
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD004             BEQ.N    ??osalFindTask_2
   \   0000000C   0x68CA             LDR      R2,[R1, #+12]
   \   0000000E   0x4282             CMP      R2,R0
   \   00000010   0xD1F9             BNE.N    ??osalFindTask_1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xE000             B.N      ??osalFindTask_3
    223              }
    224              return ((OsalTadkREC_t *)NULL);
   \                     ??osalFindTask_2: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??osalFindTask_3: (+1)
   \   00000018   0x4770             BX       LR               ;; return
    225          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     Task

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     TaskHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     TaskActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     Task_id
    226          /*******************************************************************************
    227           * 				end of file                                    *
    228           *******************************************************************************/
    229          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   osalFindTask
       0   osalNextActiveTask
       8   osal_Task_init
         8   -- Indirect call
      16   osal_add_Task
       0   osal_init_TaskHead


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      40  Osal_EvtSem
     240  Task
       4  TaskActive
       4  TaskHead
       4  Task_id
      26  osalFindTask
      24  osalNextActiveTask
      56  osal_Task_init
      96  osal_add_Task
     116  osal_init_TaskHead

 
 292 bytes in section .bss
 334 bytes in section .text
 
 334 bytes of CODE memory
 292 bytes of DATA memory

Errors: none
Warnings: none
