###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC210\NC210-200处理板\source\driver\bsp_wdt.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\driver\bsp_wdt.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\bsp_wdt.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\bsp_wdt.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\driver\bsp_wdt.c
      1          /*******************************************************************************
      2           *   Filename:       bsp_wdt.c
      3           *   Revised:        All copyrights reserved to Roger.
      4           *   Date:           2015-08-11
      5           *   Revision:       v1.0
      6           *   Writer:	     wumingshen.
      7           *
      8           *   Description:    看门狗驱动模块
      9           *
     10           *
     11           *   Notes:
     12           *   独立看门狗工作原理：在键值寄存器（IWDG_KR）中写入0XCCCC，开始启用独立看门狗，
     13           *   此时计数器开始从其复位值OXFFF递减计数，当计数器计数到末尾0X000的时候，会产生
     14           *   一个复位信号（IWDG_RESET），无论何时，只要寄存器IWDG_KR中被写入0XAAAA，IWDG_RLR
     15           *   中的值就会被重新加载到计数器中从而避免产生看门狗复位。
     16           *
     17           *   All copyrights reserved to wumingshen
     18           *******************************************************************************/
     19          
     20          /*******************************************************************************
     21          * INCLUDES
     22          */
     23          #include <includes.h>
     24          #include <bsp_wdt.h>
     25          
     26          #define BSP_WDT_MODULE_EN 1
     27          #if BSP_WDT_MODULE_EN > 0
     28          
     29          // 0:禁止；1：外部看门狗；2：内部看门狗；3：同时使用内部和外部看门狗;

   \                                 In section .bss, align 1
     30          INT8U BSP_WdtMode  = 0;
   \                     BSP_WdtMode:
   \   00000000                      DS8 1
     31          
     32          /*******************************************************************************
     33          * 名    称： BSP_WdtRst
     34          * 功    能： 喂狗
     35          * 入口参数： 无
     36          * 出口参数： 无
     37          * 作　 　者： 无名沈
     38          * 创建日期： 2014-08-18
     39          * 修    改：
     40          * 修改日期：
     41          * 备    注：
     42          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     43          void  BSP_WDT_Rst(void)
     44          {
   \                     BSP_WDT_Rst: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45              if ( BSP_WdtMode == BSP_WDT_MODE_NONE )
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD009             BEQ.N    ??BSP_WDT_Rst_0
     46                  return;
     47          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
     48              OS_CPU_SR  cpu_sr = 0u;
     49          #endif
     50              /***********************************************
     51              * 描述：STM内部看门狗喂狗 Reload IWDG counter
     52              */
     53              if ( ( BSP_WdtMode == BSP_WDT_MODE_INT ) || ( BSP_WdtMode == BSP_WDT_MODE_ALL ) ) {
   \                     ??BSP_WDT_Rst_1: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD003             BEQ.N    ??BSP_WDT_Rst_2
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD101             BNE.N    ??BSP_WDT_Rst_3
     54                  IWDG_ReloadCounter();
   \                     ??BSP_WDT_Rst_2: (+1)
   \   0000001A   0x.... 0x....      BL       IWDG_ReloadCounter
     55              }
     56          //    /***********************************************
     57          //    * 描述：外部看门狗喂狗
     58          //    */
     59          //    if ( ( BSP_WdtMode == BSP_WDT_MODE_EXT ) || ( BSP_WdtMode == BSP_WDT_MODE_ALL ) ) {
     60          //        CPU_SR_ALLOC();
     61          //        OS_CRITICAL_ENTER();
     62          //        GPIO_SetBits(WDI_GPIO_PORT, WDI_GPIO_PIN); 
     63          //        Delay_Nus(5);
     64          //        GPIO_ResetBits(WDI_GPIO_PORT, WDI_GPIO_PIN);
     65          //        OS_CRITICAL_EXIT();
     66          //    }
     67          }
   \                     ??BSP_WDT_Rst_3: (+1)
   \                     ??BSP_WDT_Rst_0: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     68          
     69          /*******************************************************************************
     70          * 名    称： BSP_WDT_GetMode
     71          * 功    能： 获取用了什么看门狗
     72          * 入口参数： 无
     73          * 出口参数： 无
     74          * 作　 　者： 无名沈
     75          * 创建日期： 2014-08-18
     76          * 修    改：
     77          * 修改日期：
     78          * 备    注： （内部的？外部的？还是两个都用？）
     79          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     80          u8  BSP_WDT_GetMode(void)
     81          {
     82              return BSP_WdtMode;
   \                     BSP_WDT_GetMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     83          }
     84          
     85          /*******************************************************************************
     86          * 名    称： BSP_WDT_Init
     87          * 功    能： 独立看门狗初始化
     88          * 入口参数： 0:禁止；1：外部看门狗；2：内部看门狗；3：同时使用内部和外部看门狗;
     89          * 出口参数： 0：初始化成功 1：初始化失败
     90          * 作　 　者： 无名沈
     91          * 创建日期： 2014-08-18
     92          * 修    改：
     93          * 修改日期：
     94          * 备    注：
     95          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     96          u8 BSP_WDT_Init(u8 mode)
     97          {
   \                     BSP_WDT_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     98              BSP_WdtMode = mode;
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     99          
    100              if ( mode == BSP_WDT_MODE_NONE )  //禁止狗
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??BSP_WDT_Init_0
    101                  return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE024             B.N      ??BSP_WDT_Init_1
    102          
    103              if ( ( mode == BSP_WDT_MODE_INT ) || ( mode == BSP_WDT_MODE_ALL ) ) { //使用内部狗或者内部外部狗一起用
   \                     ??BSP_WDT_Init_0: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD002             BEQ.N    ??BSP_WDT_Init_2
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD11D             BNE.N    ??BSP_WDT_Init_3
    104          
    105                  /* Check if the system has resumed from IWDG reset */
    106                  if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET) {
   \                     ??BSP_WDT_Init_2: (+1)
   \   0000001C   0x207D             MOVS     R0,#+125
   \   0000001E   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??BSP_WDT_Init_4
    107                      /* Clear reset flags */
    108                      RCC_ClearFlag();
   \   00000026   0x.... 0x....      BL       RCC_ClearFlag
    109                  } else {
    110                      /* IWDGRST flag is not set */
    111                  }
    112          
    113                  //2.独立看门狗(IWDG)由专用的40kHz 的低速时钟为驱动；因此，即使主时钟发生
    114                  //故障它也仍然有效。窗口看门狗由从APB1 时钟分频后得到的时钟驱动，通过可
    115                  //配置的时间窗口来检测应用程序非正常的过迟或过早的行为。可通过
    116                  //IWDG_SetPrescaler(IWDG_Prescaler_32); 对其时钟进行分频，4-256，
    117                  //通过以下方式喂狗 ：
    118                  ///* Reload IWDG counter */
    119                  //IWDG_ReloadCounter();
    120                  //3. 0.625KHz 即每周期 为1.6ms
    121                  //共计时 1000 个周期，即1000*1.6ms=1.6s
    122                  //看门狗定时时限= IWDG_SetReload（）的值 / 看门狗时钟频率
    123                  //看门狗时钟频率=LSI（内部低速时钟）的频率（40KHz）/ 分频数
    124          
    125                  RCC_LSICmd(ENABLE);                              //打开LSI
   \                     ??BSP_WDT_Init_4: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       RCC_LSICmd
    126                  while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY)==RESET);
   \                     ??BSP_WDT_Init_5: (+1)
   \   00000030   0x2061             MOVS     R0,#+97
   \   00000032   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD0FA             BEQ.N    ??BSP_WDT_Init_5
    127          
    128                  /* Enable write access to IWDG_PR and IWDG_RLR registers */
    129                  IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
   \   0000003A   0xF245 0x5055      MOVW     R0,#+21845
   \   0000003E   0x.... 0x....      BL       IWDG_WriteAccessCmd
    130                  /* IWDG counter clock: 40KHz(LSI) / 64 * 2  = 0.625 / 2  KHz */
    131                  IWDG_SetPrescaler(IWDG_Prescaler_128);
   \   00000042   0x2005             MOVS     R0,#+5
   \   00000044   0x.... 0x....      BL       IWDG_SetPrescaler
    132                  /* 3.2s ,max 0xFFF  0~4095  */
    133                  IWDG_SetReload(3000);
   \   00000048   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000004C   0x.... 0x....      BL       IWDG_SetReload
    134                  IWDG_ReloadCounter();
   \   00000050   0x.... 0x....      BL       IWDG_ReloadCounter
    135                  IWDG_Enable();
   \   00000054   0x.... 0x....      BL       IWDG_Enable
    136              }
    137          //    if ( ( mode == BSP_WDT_MODE_EXT ) || ( mode == BSP_WDT_MODE_ALL ) ) { //使用外狗或者内狗外狗一起用
    138          //        GPIO_InitTypeDef  gpio_init;
    139          //        RCC_APB2PeriphClockCmd(WDI_GPIO_RCC, ENABLE);
    140          //
    141          //        gpio_init.GPIO_Pin   = WDI_GPIO_PIN;
    142          //        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
    143          //        gpio_init.GPIO_Mode  = GPIO_Mode_Out_PP;
    144          //
    145          //        GPIO_Init(WDI_GPIO_PORT, &gpio_init);
    146          //    }
    147          
    148              return 1;
   \                     ??BSP_WDT_Init_3: (+1)
   \   00000058   0x2001             MOVS     R0,#+1
   \                     ??BSP_WDT_Init_1: (+1)
   \   0000005A   0xBD02             POP      {R1,PC}          ;; return
    149          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     BSP_WdtMode
    150          
    151          /*******************************************************************************
    152          *              end of file                                                    *
    153          *******************************************************************************/
    154          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BSP_WDT_GetMode
       8   BSP_WDT_Init
         8   -> IWDG_Enable
         8   -> IWDG_ReloadCounter
         8   -> IWDG_SetPrescaler
         8   -> IWDG_SetReload
         8   -> IWDG_WriteAccessCmd
         8   -> RCC_ClearFlag
         8   -> RCC_GetFlagStatus
         8   -> RCC_LSICmd
       8   BSP_WDT_Rst
         8   -> IWDG_ReloadCounter


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       6  BSP_WDT_GetMode
      92  BSP_WDT_Init
      32  BSP_WDT_Rst
       1  BSP_WdtMode

 
   1 byte  in section .bss
 134 bytes in section .text
 
 134 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
