###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\osal.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\osal.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal.c
      1          /*******************************************************************************
      2           *   Filename:      @osal.c
      3           *   Revised:
      4           *   Revision:
      5           *   Writer:        @Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <global.h>
     20          #include <includes.h>
     21          //#include <bsp_hal.h>
     22          
     23          #if OSAL_EN > 0
     24          /*******************************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*******************************************************************************
     29           * TYPEDEFS
     30           */
     31          /*******************************************************************************
     32           * MACROS
     33           */
     34          
     35          
     36          /*******************************************************************************
     37           * LOCAL VARIABLES
     38           */
     39          
     40          /*******************************************************************************
     41           * GLOBAL VARIABLES
     42           */
     43          //osal_msg_q_t    osal_qHead;
     44          
     45          /*******************************************************************************
     46           * LOCAL FUNCTIONS
     47           */
     48          
     49          /*******************************************************************************
     50           * GLOBAL FUNCTIONS
     51           */
     52          
     53          /*******************************************************************************
     54           * EXTERN VARIABLES
     55           */
     56          
     57           /*******************************************************************************
     58           * EXTERN FUNCTIONS
     59           */
     60          
     61           /*******************************************************************************
     62           * @fn      osal_set_event
     63           *
     64           * @brief
     65           *
     66           *    This function is called to set the event flags for a task.  The
     67           *    event passed in is OR'd into the task's event variable.
     68           *
     69           * @param   byte task_id - receiving tasks ID
     70           * @param   byte event_flag - what event to set
     71           *
     72           * @return  ZSUCCESS, INVALID_TASK
     73           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          byte osal_set_event( osalTid task_id, osalFlg event_flag )
     75          {
   \                     osal_set_event: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
     76              OsalTadkREC_t  *srchTask;
     77              halIntState_t   cpu_sr;
     78          
     79              srchTask = osalFindTask( task_id );
   \   00000004   0x.... 0x....      BL       osalFindTask
   \   00000008   0x0005             MOVS     R5,R0
     80              if ( srchTask ) {
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD00F             BEQ.N    ??osal_set_event_0
     81                  // Hold off interrupts
     82                  CPU_CRITICAL_ENTER();
   \   0000000E   0x.... 0x....      BL       CPU_SR_Save
   \   00000012   0x0006             MOVS     R6,R0
   \   00000014   0x.... 0x....      BL       CPU_IntDisMeasStart
     83                  // Stuff the event bit(s)
     84                  srchTask->events |= event_flag;
   \   00000018   0x6968             LDR      R0,[R5, #+20]
   \   0000001A   0x4320             ORRS     R0,R4,R0
   \   0000001C   0x6168             STR      R0,[R5, #+20]
     85                  // Release interrupts
     86                  CPU_CRITICAL_EXIT();
   \   0000001E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       CPU_SR_Restore
     87          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
     88                  //BSP_OS_SemPost(&Osal_EvtSem);                     // 发送信号量
     89          #endif
     90              } else
     91                  return ( INVALID_TASK );
     92              return ( ZSUCCESS );
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B.N      ??osal_set_event_1
   \                     ??osal_set_event_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??osal_set_event_1: (+1)
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
     93          }
     94          
     95          /*******************************************************************************
     96           * @fn      osal_init_system
     97           *
     98           * @brief
     99           *
    100           *   This function initializes the "task" system by creating the
    101           *   tasks defined in the task table (OSAL_Tasks.h).
    102           *
    103           * @param   void
    104           *
    105           * @return  ZSUCCESS
    106           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          byte osal_init_system( void )
    108          {
   \                     osal_init_system: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    109              // Initialize the Memory Allocation System
    110          #if OSAL_MEM_EN > 0
    111              osal_mem_init();
    112          #endif
    113              // Initialize the message queue
    114              // osal_qHead = NULL;
    115          
    116          #if defined( OSAL_TOTAL_MEM )
    117              osal_msg_cnt = 0;
    118          #endif
    119          
    120              // Initialize the timers
    121              osalTimerInit();
   \   00000002   0x.... 0x....      BL       osalTimerInit
    122          
    123              // Initialize the tasking system
    124              osal_init_TaskHead();
   \   00000006   0x.... 0x....      BL       osal_init_TaskHead
    125          
    126              return ( ZSUCCESS );
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    127          }
    128          
    129          /*******************************************************************************
    130           * @fn      osal_start_system
    131           *
    132           * @brief
    133           *
    134           *   This function is the main loop function of the task system.  It
    135           *   will look through all task events and call the task_event_processor()
    136           *   function for the task with the event.  If there are no events (for
    137           *   all tasks), this function puts the processor into Sleep.
    138           *   This Function doesn't return.
    139           *
    140           * @param   void
    141           *
    142           * @return  none
    143           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void osal_start_system( void )
    145          {
   \                     osal_start_system: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    146              osalEvt       events;
    147              halIntState_t cpu_sr;
    148          
    149              /***********************************************
    150              * 描述：OSAL任务查询和执行
    151              */
    152              while(1) {
    153                  /***********************************************
    154                  * 描述：用于需要系统总是查询的的事件，如：
    155                  *       串口接收事件，按钮扫描事件等
    156                  */
    157                  //HAL_ProcessPoll();
    158                  /***********************************************
    159                  * 描述：查找是否有任务产生事件
    160                  */
    161                  TaskActive = osalNextActiveTask();
   \                     ??osal_start_system_0: (+1)
   \   00000002   0x.... 0x....      BL       osalNextActiveTask
   \   00000006   0x....             LDR.N    R1,??DataTable0
   \   00000008   0x6008             STR      R0,[R1, #+0]
    162          
    163                  /***********************************************
    164                  * 描述：如果当前任务有事件发生
    165                  */
    166                  if ( TaskActive ) {
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0F7             BEQ.N    ??osal_start_system_0
    167                      CPU_CRITICAL_ENTER();
   \   00000012   0x.... 0x....      BL       CPU_SR_Save
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0x.... 0x....      BL       CPU_IntDisMeasStart
    168                      events = TaskActive->events;
   \   0000001C   0x....             LDR.N    R0,??DataTable0
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6944             LDR      R4,[R0, #+20]
    169                      /***********************************************
    170                      * 描述：清除当前任务事件
    171                      */
    172                      TaskActive->events = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable0
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x6148             STR      R0,[R1, #+20]
    173                      CPU_CRITICAL_EXIT();
   \   0000002A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0x.... 0x....      BL       CPU_SR_Restore
    174          
    175                      /***********************************************
    176                      * 描述：再次检查事件是否存在
    177                      */
    178                      if ( events != 0 ) {
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD0E3             BEQ.N    ??osal_start_system_0
    179                          /***********************************************
    180                          * 描述：判断任务函数是否存在
    181                          */
    182                          if ( TaskActive->pfnEventProcessor ) {
   \   0000003A   0x....             LDR.N    R0,??DataTable0
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x6880             LDR      R0,[R0, #+8]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD0DE             BEQ.N    ??osal_start_system_0
    183                              /***********************************************
    184                              * 描述：执行任务处理高优先级事件并返回未处理完的事件
    185                              *       事件值越小，优先级越高
    186                              */
    187                              events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   00000044   0x0021             MOVS     R1,R4
   \   00000046   0x....             LDR.N    R0,??DataTable0
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x68C0             LDR      R0,[R0, #+12]
   \   0000004C   0x....             LDR.N    R2,??DataTable0
   \   0000004E   0x6812             LDR      R2,[R2, #+0]
   \   00000050   0x6892             LDR      R2,[R2, #+8]
   \   00000052   0x4790             BLX      R2
   \   00000054   0x0004             MOVS     R4,R0
    188                              /***********************************************
    189                              * 描述：添加返回未处理完的事件到当前任务，等待下次执行
    190                              */
    191                              CPU_CRITICAL_ENTER();
   \   00000056   0x.... 0x....      BL       CPU_SR_Save
   \   0000005A   0x0005             MOVS     R5,R0
   \   0000005C   0x.... 0x....      BL       CPU_IntDisMeasStart
    192                              TaskActive->events |= events;
   \   00000060   0x....             LDR.N    R0,??DataTable0
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x6940             LDR      R0,[R0, #+20]
   \   00000066   0x4320             ORRS     R0,R4,R0
   \   00000068   0x....             LDR.N    R1,??DataTable0
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x6148             STR      R0,[R1, #+20]
    193                              CPU_CRITICAL_EXIT();
   \   0000006E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0x.... 0x....      BL       CPU_SR_Restore
   \   0000007A   0xE7C2             B.N      ??osal_start_system_0
    194                          }
    195                      }
    196                  }
    197              }
    198          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     TaskActive
    199          /*******************************************************************************
    200           * 				end of file                                    *
    201           *******************************************************************************/
    202          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   osal_init_system
         8   -> osalTimerInit
         8   -> osal_init_TaskHead
      16   osal_set_event
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> osalFindTask
      16   osal_start_system
        16   -- Indirect call
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> osalNextActiveTask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      14  osal_init_system
      50  osal_set_event
     124  osal_start_system

 
 192 bytes in section .text
 
 192 bytes of CODE memory

Errors: none
Warnings: none
