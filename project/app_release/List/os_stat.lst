###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_stat.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_stat.c
#        -D USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\os_stat.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\os_stat.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_stat.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2016; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  STATISTICS MODULE
     10          *
     11          * File    : OS_STAT.C
     12          * By      : JJL
     13          * Version : V3.06.00
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your
     20          *           application/product.   We provide ALL the source code for your convenience and to help you
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can find our product's user manual, API reference, release notes and
     30          *           more information at https://doc.micrium.com.
     31          *           You can contact us at www.micrium.com.
     32          ************************************************************************************************************************
     33          */
     34          
     35          #define  MICRIUM_SOURCE
     36          #include "os.h"
     37          
     38          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     39          const  CPU_CHAR  *os_stat__c = "$Id: $";
     40          #endif
     41          
     42          
     43          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     44          
     45          /*
     46          ************************************************************************************************************************
     47          *                                                   RESET STATISTICS
     48          *
     49          * Description: This function is called by your application to reset the statistics.
     50          *
     51          * Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.
     52          *
     53          *                             OS_ERR_NONE            The call succeeded
     54          *
     55          * Returns    : none
     56          *
     57          * Note(s)    : none
     58          ************************************************************************************************************************
     59          */
     60          
     61          void  OSStatReset (OS_ERR  *p_err)
     62          {
     63          #if (OS_CFG_DBG_EN == DEF_ENABLED)
     64              OS_TCB      *p_tcb;
     65          #if (OS_MSG_EN == DEF_ENABLED)
     66              OS_MSG_Q    *p_msg_q;
     67          #endif
     68          #if (OS_CFG_Q_EN == DEF_ENABLED)
     69              OS_Q        *p_q;
     70          #endif
     71          #endif
     72              CPU_SR_ALLOC();
     73          
     74          
     75          
     76          #ifdef OS_SAFETY_CRITICAL
     77              if (p_err == DEF_NULL) {
     78                  OS_SAFETY_CRITICAL_EXCEPTION();
     79                  return;
     80              }
     81          #endif
     82          
     83              CPU_CRITICAL_ENTER();
     84          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     85              OSStatTaskCPUUsageMax = 0u;
     86          #if (OS_CFG_TS_EN == DEF_ENABLED)
     87              OSStatTaskTimeMax     = 0u;
     88          #endif
     89          #endif
     90          
     91          #if (OS_CFG_TS_EN == DEF_ENABLED)
     92              OSTickTaskTimeMax     = 0u;
     93          #endif
     94          
     95          #if (OS_CFG_TMR_EN == DEF_ENABLED)
     96          #if (OS_CFG_TS_EN == DEF_ENABLED)
     97              OSTmrTaskTimeMax      = 0u;
     98          #endif
     99          #endif
    100          
    101          #ifdef CPU_CFG_INT_DIS_MEAS_EN
    102          #if (OS_CFG_TS_EN == DEF_ENABLED)
    103              OSIntDisTimeMax       = 0u;                                 /* Reset the maximum interrupt disable time             */
    104              CPU_StatReset();                                            /* Reset CPU-specific performance monitors.             */
    105          #endif
    106          #endif
    107          
    108          #if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN == DEF_ENABLED)
    109              OSSchedLockTimeMax    = 0u;                                 /* Reset the maximum scheduler lock time                */
    110          #endif
    111          
    112          #if ((OS_MSG_EN == DEF_ENABLED) && (OS_CFG_DBG_EN == DEF_ENABLED))
    113              OSMsgPool.NbrUsedMax  = 0u;
    114          #endif
    115              CPU_CRITICAL_EXIT();
    116          
    117          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    118              CPU_CRITICAL_ENTER();
    119              p_tcb = OSTaskDbgListPtr;
    120              CPU_CRITICAL_EXIT();
    121              while (p_tcb != DEF_NULL) {                                 /* Reset per-Task statistics                            */
    122                  CPU_CRITICAL_ENTER();
    123          
    124          #ifdef CPU_CFG_INT_DIS_MEAS_EN
    125                  p_tcb->IntDisTimeMax    = 0u;
    126          #endif
    127          
    128          #if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN == DEF_ENABLED)
    129                  p_tcb->SchedLockTimeMax = 0u;
    130          #endif
    131          
    132          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    133          #if (OS_CFG_TASK_Q_EN == DEF_ENABLED)
    134                  p_tcb->MsgQPendTimeMax  = 0u;
    135          #endif
    136                  p_tcb->SemPendTimeMax   = 0u;
    137                  p_tcb->CtxSwCtr         = 0u;
    138                  p_tcb->CPUUsage         = 0u;
    139                  p_tcb->CPUUsageMax      = 0u;
    140                  p_tcb->CyclesTotal      = 0u;
    141                  p_tcb->CyclesTotalPrev  = 0u;
    142          #if (OS_CFG_TS_EN == DEF_ENABLED)
    143                  p_tcb->CyclesStart      = OS_TS_GET();
    144          #endif
    145          #endif
    146          
    147          #if (OS_CFG_TASK_Q_EN == DEF_ENABLED)
    148                  p_msg_q                 = &p_tcb->MsgQ;
    149                  p_msg_q->NbrEntriesMax  = 0u;
    150          #endif
    151                  p_tcb                   = p_tcb->DbgNextPtr;
    152                  CPU_CRITICAL_EXIT();
    153              }
    154          #endif
    155          
    156          #if (OS_CFG_Q_EN == DEF_ENABLED) && (OS_CFG_DBG_EN == DEF_ENABLED)
    157              CPU_CRITICAL_ENTER();
    158              p_q = OSQDbgListPtr;
    159              CPU_CRITICAL_EXIT();
    160              while (p_q != DEF_NULL) {                                   /* Reset message queues statistics                      */
    161                  CPU_CRITICAL_ENTER();
    162                  p_msg_q                = &p_q->MsgQ;
    163                  p_msg_q->NbrEntriesMax = 0u;
    164                  p_q                    = p_q->DbgNextPtr;
    165                  CPU_CRITICAL_EXIT();
    166              }
    167          #endif
    168          
    169          
    170             *p_err = OS_ERR_NONE;
    171          }
    172          
    173          
    174          /*
    175          ************************************************************************************************************************
    176          *                                                DETERMINE THE CPU CAPACITY
    177          *
    178          * Description: This function is called by your application to establish CPU usage by first determining how high a 32-bit
    179          *              counter would count to in 1/10 second if no other tasks were to execute during that time.  CPU usage is
    180          *              then determined by a low priority task which keeps track of this 32-bit counter every second but this
    181          *              time, with other tasks running.  CPU usage is determined by:
    182          *
    183          *                                             OS_Stat_IdleCtr
    184          *                 CPU Usage (%) = 100 * (1 - ------------------)
    185          *                                            OS_Stat_IdleCtrMax
    186          *
    187          * Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.
    188          *
    189          *                             OS_ERR_NONE              The call was successfu
    190          *                             OS_ERR_OS_NOT_RUNNING    If uC/OS-III is not running yet
    191          *
    192          * Returns    : none
    193          *
    194          * Note(s)    : none
    195          ************************************************************************************************************************
    196          */
    197          
    198          void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
    199          {
    200              OS_ERR   err;
    201              OS_TICK  dly;
    202              CPU_SR_ALLOC();
    203          
    204          
    205          
    206          #ifdef OS_SAFETY_CRITICAL
    207              if (p_err == DEF_NULL) {
    208                  OS_SAFETY_CRITICAL_EXCEPTION();
    209                  return;
    210              }
    211          #endif
    212          
    213          #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
    214              if (OSRunning != OS_STATE_OS_RUNNING) {
    215                 *p_err = OS_ERR_OS_NOT_RUNNING;
    216                  return;
    217              }
    218          #endif
    219          
    220          #if ((OS_CFG_TMR_EN == DEF_ENABLED) && (OS_CFG_TASK_SUSPEND_EN == DEF_ENABLED))
    221              OSTaskSuspend(&OSTmrTaskTCB, &err);
    222              if (err != OS_ERR_NONE) {
    223                 *p_err = err;
    224                  return;
    225              }
    226          #endif
    227          
    228              OSTimeDly(2u,                                               /* Synchronize with clock tick                          */
    229                        (OS_OPT  )OS_OPT_TIME_DLY,
    230                        (OS_ERR *)&err);
    231              if (err != OS_ERR_NONE) {
    232                 *p_err = err;
    233                  return;
    234              }
    235              CPU_CRITICAL_ENTER();
    236              OSStatTaskCtr = 0u;                                         /* Clear idle counter                                   */
    237              CPU_CRITICAL_EXIT();
    238          
    239              dly = 0u;
    240              if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
    241                  dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
    242              }
    243              if (dly == 0u) {
    244                  dly =  (OSCfg_TickRate_Hz / 10u);
    245              }
    246          
    247              OSTimeDly(dly,                                              /* Determine MAX. idle counter value                    */
    248                        OS_OPT_TIME_DLY,
    249                        &err);
    250          
    251          #if ((OS_CFG_TMR_EN == DEF_ENABLED) && (OS_CFG_TASK_SUSPEND_EN == DEF_ENABLED))
    252              OSTaskResume(&OSTmrTaskTCB, &err);
    253              if (err != OS_ERR_NONE) {
    254                 *p_err = err;
    255                  return;
    256              }
    257          #endif
    258          
    259              CPU_CRITICAL_ENTER();
    260          #if (OS_CFG_TS_EN == DEF_ENABLED)
    261              OSStatTaskTimeMax = 0u;
    262          #endif
    263          
    264              OSStatTaskCtrMax  = OSStatTaskCtr;                          /* Store maximum idle counter count                     */
    265              OSStatTaskRdy     = OS_STATE_RDY;
    266              CPU_CRITICAL_EXIT();
    267             *p_err             = OS_ERR_NONE;
    268          }
    269          
    270          
    271          /*
    272          ************************************************************************************************************************
    273          *                                                    STATISTICS TASK
    274          *
    275          * Description: This task is internal to uC/OS-III and is used to compute some statistics about the multitasking
    276          *              environment.  Specifically, OS_StatTask() computes the CPU usage.  CPU usage is determined by:
    277          *
    278          *                                                   OSStatTaskCtr
    279          *                 OSStatTaskCPUUsage = 100 * (1 - ------------------)     (units are in %)
    280          *                                                  OSStatTaskCtrMax
    281          *
    282          * Arguments  : p_arg     this pointer is not used at this time.
    283          *
    284          * Returns    : none
    285          *
    286          * Note(s)    : 1) This task runs at a priority level higher than the idle task.
    287          *
    288          *              2) You can disable this task by setting the configuration #define OS_CFG_STAT_TASK_EN to 0.
    289          *
    290          *              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establish the maximum value
    291          *                 for the idle counter.
    292          *
    293          *              4) This function is INTERNAL to uC/OS-III and your application should not call it.
    294          ************************************************************************************************************************
    295          */
    296          
    297          void  OS_StatTask (void  *p_arg)
    298          {
    299          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    300          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    301              OS_CPU_USAGE usage;
    302              OS_CYCLES    cycles_total;
    303              OS_CYCLES    cycles_div;
    304              OS_CYCLES    cycles_mult;
    305              OS_CYCLES    cycles_max;
    306          #endif
    307              OS_TCB      *p_tcb;
    308          #endif
    309              OS_TICK      ctr_max;
    310              OS_TICK      ctr_mult;
    311              OS_TICK      ctr_div;
    312              OS_ERR       err;
    313              OS_TICK      dly;
    314          #if (OS_CFG_TS_EN == DEF_ENABLED)
    315              CPU_TS       ts_start;
    316              CPU_TS       ts_end;
    317          #endif
    318              CPU_SR_ALLOC();
    319          
    320          
    321          
    322              (void)p_arg;                                                /* Prevent compiler warning for not using 'p_arg'       */
    323          
    324              while (OSStatTaskRdy != DEF_TRUE) {
    325                  OSTimeDly(2u * OSCfg_StatTaskRate_Hz,                   /* Wait until statistic task is ready                   */
    326                            OS_OPT_TIME_DLY,
    327                            &err);
    328              }
    329              OSStatReset(&err);                                          /* Reset statistics                                     */
    330          
    331              dly = (OS_TICK)0;                                           /* Compute statistic task sleep delay                   */
    332              if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
    333                  dly = (OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
    334              }
    335              if (dly == 0u) {
    336                  dly =  (OSCfg_TickRate_Hz / 10u);
    337              }
    338          
    339              for (;;) {
    340          #if (OS_CFG_TS_EN == DEF_ENABLED)
    341                  ts_start        = OS_TS_GET();
    342          #endif
    343          #ifdef  CPU_CFG_INT_DIS_MEAS_EN
    344                  OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
    345          #endif
    346          
    347                  CPU_CRITICAL_ENTER();                                   /* ---------------- OVERALL CPU USAGE ----------------- */
    348                  OSStatTaskCtrRun   = OSStatTaskCtr;                     /* Obtain the of the stat counter for the past .1 second*/
    349                  OSStatTaskCtr      = 0u;                                /* Reset the stat counter for the next .1 second        */
    350                  CPU_CRITICAL_EXIT();
    351          
    352                  if (OSStatTaskCtrMax > OSStatTaskCtrRun) {              /* Compute CPU Usage with best resolution               */
    353                      if (OSStatTaskCtrMax < 400000u) {                   /* 1 to       400,000                                   */
    354                          ctr_mult = 10000u;
    355                          ctr_div  =     1u;
    356                      } else if (OSStatTaskCtrMax <   4000000u) {         /* 400,000 to     4,000,000                             */
    357                          ctr_mult =  1000u;
    358                          ctr_div  =    10u;
    359                      } else if (OSStatTaskCtrMax <  40000000u) {         /* 4,000,000 to    40,000,000                           */
    360                          ctr_mult =   100u;
    361                          ctr_div  =   100u;
    362                      } else if (OSStatTaskCtrMax < 400000000u) {         /* 40,000,000 to   400,000,000                          */
    363                          ctr_mult =    10u;
    364                          ctr_div  =  1000u;
    365                      } else {                                            /* 400,000,000 and up                                   */
    366                          ctr_mult =     1u;
    367                          ctr_div  = 10000u;
    368                      }
    369                      ctr_max            = OSStatTaskCtrMax / ctr_div;
    370                      OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
    371                      if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
    372                          OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
    373                      }
    374                  } else {
    375                      OSStatTaskCPUUsage = 0u;
    376                  }
    377          
    378                  OSStatTaskHook();                                       /* Invoke user definable hook                           */
    379          
    380          
    381          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    382          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    383                  cycles_total = 0u;
    384          
    385                  CPU_CRITICAL_ENTER();
    386                  p_tcb = OSTaskDbgListPtr;
    387                  CPU_CRITICAL_EXIT();
    388                  while (p_tcb != DEF_NULL) {                             /* ---------------- TOTAL CYCLES COUNT ---------------- */
    389                      CPU_CRITICAL_ENTER();
    390                      p_tcb->CyclesTotalPrev = p_tcb->CyclesTotal;        /* Save accumulated # cycles into a temp variable       */
    391                      p_tcb->CyclesTotal     = 0u;                        /* Reset total cycles for task for next run             */
    392                      CPU_CRITICAL_EXIT();
    393          
    394                      cycles_total          += p_tcb->CyclesTotalPrev;    /* Perform sum of all task # cycles                     */
    395          
    396                      CPU_CRITICAL_ENTER();
    397                      p_tcb                  = p_tcb->DbgNextPtr;
    398                      CPU_CRITICAL_EXIT();
    399                  }
    400          #endif
    401          
    402          
    403          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)
    404                                                                          /* ------------ INDIVIDUAL TASK CPU USAGE ------------- */
    405                  if (cycles_total > 0u) {                                /* 'cycles_total' scaling ...                           */
    406                      if (cycles_total < 400000u) {                       /* 1 to       400,000                                   */
    407                          cycles_mult = 10000u;
    408                          cycles_div  =     1u;
    409                      } else if (cycles_total <   4000000u) {             /* 400,000 to     4,000,000                             */
    410                          cycles_mult =  1000u;
    411                          cycles_div  =    10u;
    412                      } else if (cycles_total <  40000000u) {             /* 4,000,000 to    40,000,000                           */
    413                          cycles_mult =   100u;
    414                          cycles_div  =   100u;
    415                      } else if (cycles_total < 400000000u) {             /* 40,000,000 to   400,000,000                          */
    416                          cycles_mult =    10u;
    417                          cycles_div  =  1000u;
    418                      } else {                                            /* 400,000,000 and up                                   */
    419                          cycles_mult =     1u;
    420                          cycles_div  = 10000u;
    421                      }
    422                      cycles_max  = cycles_total / cycles_div;
    423                  } else {
    424                      cycles_mult = 0u;
    425                      cycles_max  = 1u;
    426                  }
    427          #endif
    428                  CPU_CRITICAL_ENTER();
    429                  p_tcb = OSTaskDbgListPtr;
    430                  CPU_CRITICAL_EXIT();
    431                  while (p_tcb != DEF_NULL) {
    432          #if (OS_CFG_TASK_PROFILE_EN == DEF_ENABLED)                     /* Compute execution time of each task                  */
    433                      usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
    434                      if (usage > 10000u) {
    435                          usage = 10000u;
    436                      }
    437                      p_tcb->CPUUsage = usage;
    438                      if (p_tcb->CPUUsageMax < usage) {                   /* Detect peak CPU usage                                */
    439                          p_tcb->CPUUsageMax = usage;
    440                      }
    441          #endif
    442          
    443          #if (OS_CFG_STAT_TASK_STK_CHK_EN == DEF_ENABLED)
    444                      OSTaskStkChk( p_tcb,                                /* Compute stack usage of active tasks only             */
    445                                   &p_tcb->StkFree,
    446                                   &p_tcb->StkUsed,
    447                                   &err);
    448          #endif
    449          
    450                      CPU_CRITICAL_ENTER();
    451                      p_tcb = p_tcb->DbgNextPtr;
    452                      CPU_CRITICAL_EXIT();
    453                  }
    454          #endif
    455          
    456                  if (OSStatResetFlag == DEF_TRUE) {                      /* Check if need to reset statistics                    */
    457                      OSStatResetFlag  = DEF_FALSE;
    458                      OSStatReset(&err);
    459                  }
    460          
    461          #if (OS_CFG_TS_EN == DEF_ENABLED)
    462                  ts_end = OS_TS_GET() - ts_start;                        /* Measure execution time of statistic task             */
    463                  if (OSStatTaskTimeMax < ts_end) {
    464                      OSStatTaskTimeMax = ts_end;
    465                  }
    466          #endif
    467          
    468                  OSTimeDly(dly,
    469                            OS_OPT_TIME_DLY,
    470                            &err);
    471              }
    472          }
    473          
    474          
    475          /*
    476          ************************************************************************************************************************
    477          *                                              INITIALIZE THE STATISTICS
    478          *
    479          * Description: This function is called by OSInit() to initialize the statistic task.
    480          *
    481          * Argument(s): p_err     is a pointer to a variable that will contain an error code returned by this function.
    482          *
    483          *                            OS_ERR_STK_INVALID       If you specified a NULL stack pointer during configuration
    484          *                            OS_ERR_STK_SIZE_INVALID  If you didn't specify a large enough stack.
    485          *                            OS_ERR_PRIO_INVALID      If you specified a priority for the statistic task equal to or
    486          *                                                     lower (i.e. higher number) than the idle task.
    487          *                            OS_ERR_xxx               An error code returned by OSTaskCreate()
    488          *
    489          * Returns    : none
    490          *
    491          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    492          ************************************************************************************************************************
    493          */
    494          
    495          void  OS_StatTaskInit (OS_ERR  *p_err)
    496          {
    497              OSStatTaskCtr    = 0u;
    498              OSStatTaskCtrRun = 0u;
    499              OSStatTaskCtrMax = 0u;
    500              OSStatTaskRdy    = OS_STATE_NOT_RDY;                        /* Statistic task is not ready                          */
    501              OSStatResetFlag  = DEF_FALSE;
    502          
    503                                                                          /* --------------- CREATE THE STAT TASK --------------- */
    504              if (OSCfg_StatTaskStkBasePtr == DEF_NULL) {
    505                 *p_err = OS_ERR_STAT_STK_INVALID;
    506                  return;
    507              }
    508          
    509              if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
    510                 *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
    511                  return;
    512              }
    513          
    514              if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
    515                 *p_err = OS_ERR_STAT_PRIO_INVALID;
    516                  return;
    517              }
    518          
    519              OSTaskCreate(&OSStatTaskTCB,
    520                           (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
    521                           OS_StatTask,
    522                           DEF_NULL,
    523                           OSCfg_StatTaskPrio,
    524                           OSCfg_StatTaskStkBasePtr,
    525                           OSCfg_StatTaskStkLimit,
    526                           OSCfg_StatTaskStkSize,
    527                           0u,
    528                           0u,
    529                           DEF_NULL,
    530                           (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    531                           p_err);
    532          }
    533          
    534          #endif


 

 


Errors: none
Warnings: none
