###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC210\NC210-200处理板\source\task\app_task_osal.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\task\app_task_osal.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\app_task_osal.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\app_task_osal.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\task\app_task_osal.c
      1          /*******************************************************************************
      2          * Description  : OSAL任务，有ucOS调用
      3          * Author       : 2018/5/10 星期四, by redmorningcn
      4          *******************************************************************************/
      5          
      6          
      7          /*******************************************************************************
      8           * INCLUDES
      9           */
     10          #include <includes.h>
     11          
     12          
     13          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     14          const  CPU_CHAR  *app_task_osal__c = "$Id: $";
     15          #endif
     16          
     17          #define APP_TASK_OSAL_EN     DEF_ENABLED
     18          #if APP_TASK_OSAL_EN == DEF_ENABLED
     19          /*******************************************************************************
     20           * CONSTANTS
     21           */
     22          
     23          /*******************************************************************************
     24           * MACROS
     25           */
     26          #define  OSAL_CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ / 1u)
     27          #define  OSAL_TASK_IDLE_SEM_EN      DEF_DISABLED                // 不使用信号量做为空闲退出
     28          
     29          /*******************************************************************************
     30           * TYPEDEFS
     31           */
     32          #if ( OSAL_EN == DEF_ENABLED )
     33          /***********************************************
     34          * 描述： 任务控制块（TCB）
     35          */

   \                                 In section .bss, align 4
     36          static  OS_TCB   AppTaskOsalTCB;
   \                     AppTaskOsalTCB:
   \   00000000                      DS8 160
     37          
     38          /***********************************************
     39          * 描述： 任务堆栈（STACKS）
     40          */

   \                                 In section .bss, align 4
     41          static  CPU_STK  AppTaskOsalStk[ APP_TASK_OSAL_STK_SIZE ];
   \                     AppTaskOsalStk:
   \   00000000                      DS8 2048
     42          #endif
     43          /*******************************************************************************
     44           * LOCAL VARIABLES
     45           */
     46          
     47          /*******************************************************************************
     48           * GLOBAL VARIABLES
     49           */
     50          /*******************************************************************************
     51           * LOCAL FUNCTIONS
     52           */
     53          static  void    AppTaskOsal             (void *p_arg);
     54          static  void    APP_OsalInit            (void);
     55          
     56          /*******************************************************************************
     57           * GLOBAL FUNCTIONS
     58           */
     59          
     60          /*******************************************************************************
     61           * EXTERN VARIABLES
     62           */
     63          
     64          
     65           /*******************************************************************************
     66           * EXTERN FUNCTIONS
     67           */
     68          
     69          /*******************************************************************************/
     70          
     71          /*******************************************************************************
     72           * 名    称： App_TaskOsalCreate
     73           * 功    能： **任务创建
     74           * 入口参数： 无
     75           * 出口参数： 无
     76           * 作　　者： wumingshen.
     77           * 创建日期： 2015-02-05
     78           * 修    改：
     79           * 修改日期：
     80           * 备    注： 任务创建函数需要在app.h文件中声明
     81           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          void  App_TaskOsalCreate(void)
     83          {
   \                     App_TaskOsalCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     84          #if ( OSAL_EN == DEF_ENABLED )
     85              OS_ERR  err;
     86          
     87              /***********************************************
     88              * 描述： 任务创建
     89              */
     90              OSTaskCreate((OS_TCB     *)&AppTaskOsalTCB,                 // 任务控制块  （当前文件中定义）
     91                           (CPU_CHAR   *)"App Task Osal",                 // 任务名称
     92                           (OS_TASK_PTR ) AppTaskOsal,                    // 任务函数指针（当前文件中定义）
     93                           (void       *) 0,                              // 任务函数参数
     94                           (OS_PRIO     ) APP_TASK_OSAL_PRIO,             // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
     95                           (CPU_STK    *)&AppTaskOsalStk[0],              // 任务栈顶
     96                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE / 10,    // 任务栈溢出报警值
     97                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE,         // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
     98                           (OS_MSG_QTY  ) 5u,                             // 可以发送给任务的最大消息队列数量
     99                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    100                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    101                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    102                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    103                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   00000004   0xA809             ADD      R0,SP,#+36
   \   00000006   0x9008             STR      R0,[SP, #+32]
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x9007             STR      R0,[SP, #+28]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9006             STR      R0,[SP, #+24]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9005             STR      R0,[SP, #+20]
   \   00000014   0x2005             MOVS     R0,#+5
   \   00000016   0x9004             STR      R0,[SP, #+16]
   \   00000018   0xF44F 0x7000      MOV      R0,#+512
   \   0000001C   0x9003             STR      R0,[SP, #+12]
   \   0000001E   0x2033             MOVS     R0,#+51
   \   00000020   0x9002             STR      R0,[SP, #+8]
   \   00000022   0x....             LDR.N    R0,??DataTable1
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x203D             MOVS     R0,#+61
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskOsal
   \   00000030   0x....             LDR.N    R1,??DataTable1_1
   \   00000032   0x....             LDR.N    R0,??DataTable1_2
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    104          #else
    105          #endif
    106          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    107          
    108          /*******************************************************************************
    109           * 名    称： osalEventInit
    110           * 功    能： 
    111           * 入口参数： 无
    112           * 出口参数： 无
    113           * 作    者： 无名沈
    114           * 创建日期： 2017/12/7
    115           * 修    改： 
    116           * 修改日期： 
    117           * 备    注： 
    118           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    119          void osalEventInit(void)
    120          {
   \                     osalEventInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121              /***********************************************
    122              * 描述： 任务初始化
    123              */
    124              APP_OsalInit();
   \   00000002   0x.... 0x....      BL       APP_OsalInit
    125              
    126              /***********************************************
    127              * 描述：OSAL系统初始化
    128              */
    129              osal_init_system();
   \   00000006   0x.... 0x....      BL       osal_init_system
    130              
    131              /***********************************************
    132              * 描述： OSAL创建任务
    133              */
    134              OSAL_TaskCreateHook();
   \   0000000A   0x.... 0x....      BL       OSAL_TaskCreateHook
    135              
    136              /***********************************************
    137              * 描述：OSAL任务初始化
    138              */
    139              osal_Task_init();
   \   0000000E   0x.... 0x....      BL       osal_Task_init
    140          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    141          
    142          /*******************************************************************************
    143          * 名    称： osalEventHandle
    144          * 功    能： 
    145          * 入口参数： 无
    146          * 出口参数： 无
    147          * 作    者： 无名沈
    148          * 创建日期： 2017/12/7
    149          * 修    改： 
    150          * 修改日期： 
    151          * 备    注： 
    152          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          void osalEventHandle(void)
    154          {
   \                     osalEventHandle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    155              halIntState_t   cpu_sr;
    156              
    157              do {
    158                  static osalEvt  events;
    159                  /***********************************************
    160                  * 描述：用于需要系统总是查询的的事件，如：
    161                  *       串口接收事件，按钮扫描事件等
    162                  */
    163                  //HAL_ProcessPoll();
    164                  
    165                  /***********************************************
    166                  * 描述：查找是否有任务产生事件
    167                  */
    168                  TaskActive = osalNextActiveTask();
   \                     ??osalEventHandle_0: (+1)
   \   00000002   0x.... 0x....      BL       osalNextActiveTask
   \   00000006   0x....             LDR.N    R1,??DataTable1_3
   \   00000008   0x6008             STR      R0,[R1, #+0]
    169                  
    170                  /***********************************************
    171                  * 描述：如果当前任务有事件发生
    172                  */
    173                  if ( TaskActive ) {
   \   0000000A   0x....             LDR.N    R0,??DataTable1_3
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD03B             BEQ.N    ??osalEventHandle_1
    174                      CPU_CRITICAL_ENTER();
   \   00000012   0x.... 0x....      BL       CPU_SR_Save
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0x.... 0x....      BL       CPU_IntDisMeasStart
    175                      events = TaskActive->events;
   \   0000001C   0x....             LDR.N    R0,??DataTable1_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6940             LDR      R0,[R0, #+20]
   \   00000022   0x....             LDR.N    R1,??DataTable1_4
   \   00000024   0x6008             STR      R0,[R1, #+0]
    176                      
    177                      /***********************************************
    178                      * 描述：清除当前任务事件
    179                      */
    180                      TaskActive->events = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable1_3
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6148             STR      R0,[R1, #+20]
    181                      CPU_CRITICAL_EXIT();
   \   0000002E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       CPU_SR_Restore
    182                      
    183                      /***********************************************
    184                      * 描述：再次检查事件是否存在
    185                      */
    186                      if ( events != 0 ) {
   \   0000003A   0x....             LDR.N    R0,??DataTable1_4
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD023             BEQ.N    ??osalEventHandle_1
    187                          /***********************************************
    188                          * 描述：判断任务函数是否存在
    189                          */
    190                          if ( TaskActive->pfnEventProcessor ) {
   \   00000042   0x....             LDR.N    R0,??DataTable1_3
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x6880             LDR      R0,[R0, #+8]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD01E             BEQ.N    ??osalEventHandle_1
    191                              /***********************************************
    192                              * 描述：执行任务处理高优先级事件并返回未处理完的事件
    193                              *       事件值越小，优先级越高
    194                              */
    195                              events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   0000004C   0x....             LDR.N    R0,??DataTable1_4
   \   0000004E   0x6801             LDR      R1,[R0, #+0]
   \   00000050   0x....             LDR.N    R0,??DataTable1_3
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x68C0             LDR      R0,[R0, #+12]
   \   00000056   0x....             LDR.N    R2,??DataTable1_3
   \   00000058   0x6812             LDR      R2,[R2, #+0]
   \   0000005A   0x6892             LDR      R2,[R2, #+8]
   \   0000005C   0x4790             BLX      R2
   \   0000005E   0x....             LDR.N    R1,??DataTable1_4
   \   00000060   0x6008             STR      R0,[R1, #+0]
    196                              
    197                              /***********************************************
    198                              * 描述：添加返回未处理完的事件到当前任务，等待下次执行
    199                              */
    200                              CPU_CRITICAL_ENTER();
   \   00000062   0x.... 0x....      BL       CPU_SR_Save
   \   00000066   0x0004             MOVS     R4,R0
   \   00000068   0x.... 0x....      BL       CPU_IntDisMeasStart
    201                              TaskActive->events |= events;
   \   0000006C   0x....             LDR.N    R0,??DataTable1_3
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x6940             LDR      R0,[R0, #+20]
   \   00000072   0x....             LDR.N    R1,??DataTable1_4
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x4308             ORRS     R0,R1,R0
   \   00000078   0x....             LDR.N    R1,??DataTable1_3
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0x6148             STR      R0,[R1, #+20]
    202                              CPU_CRITICAL_EXIT();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0x.... 0x....      BL       CPU_SR_Restore
    203                          }
    204                      }
    205                  }
    206              } while (TaskActive);                           // 等待所有任务执行完
   \                     ??osalEventHandle_1: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable1_3
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD1B7             BNE.N    ??osalEventHandle_0
    207          }
   \   00000092   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??events:
   \   00000000                      DS8 4
    208          
    209          /*******************************************************************************
    210           * 名    称： AppTaskOsal
    211           * 功    能： 控制任务
    212           * 入口参数： p_arg - 由任务创建函数传入
    213           * 出口参数： 无
    214           * 作　　者： wumingshen.
    215           * 创建日期： 2015-02-05
    216           * 修    改：
    217           * 修改日期：
    218           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    219           static void  AppTaskOsal (void *p_arg)
    220          {    
   \                     AppTaskOsal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    221          #if ( OSAL_EN == DEF_ENABLED )
    222          #if ( OSAL_TASK_IDLE_SEM_EN == DEF_ENABLED )
    223              OS_ERR          err;
    224              INT32U          ticks;
    225              static INT32S   dly     = 1;
    226          #endif
    227              /***********************************************
    228              * 描述： 2017/12/16,无名沈：osal事件初始化
    229              */
    230              osalEventInit();
   \   00000002   0x.... 0x....      BL       osalEventInit
    231              /***********************************************
    232              * 描述： Task body, always written as an infinite loop.
    233              *        OSAL任务查询和执行
    234              */
    235              while (DEF_TRUE) {
    236                  /***********************************************
    237                  * 描述： 得到系统当前时间,不使用信号量，此任务将占用空闲任务
    238                  */
    239          #if ( OSAL_TASK_IDLE_SEM_EN == DEF_ENABLED )
    240                  ticks = OSTimeGet(&err);        
    241          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
    242                  BOOL    ret = BSP_OS_SemWait(&Osal_EvtSem, dly);
    243          #endif
    244          #endif
    245                  /***********************************************
    246                  * 描述： 2017/12/7,无名沈：osal事件处理
    247                  */
    248                  osalEventHandle();
   \                     ??AppTaskOsal_0: (+1)
   \   00000006   0x.... 0x....      BL       osalEventHandle
    249                  
    250          #if ( OSAL_TASK_IDLE_SEM_EN == DEF_ENABLED )
    251                  /***********************************************
    252                  * 描述： 去除任务运行的时间，等到一个控制周期里剩余需要延时的时间
    253                  */
    254                  dly   = OSAL_CYCLE_TIME_TICKS - ( OSTimeGet(&err) - ticks );
    255                  if ( dly  <= 0 ) {
    256                      dly   = 1;
    257                  }
    258          #else 
    259                  /***********************************************
    260                  * 描述： 2017/12/16,无名沈：使用空闲任务
    261                  */
    262          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
    263                  void  OSIdleTaskHook (void);
    264                  OSIdleTaskHook ();
   \   0000000A   0x.... 0x....      BL       OSIdleTaskHook
   \   0000000E   0xE7FA             B.N      ??AppTaskOsal_0
    265          #endif
    266          #endif
    267              }
    268          #else
    269          #endif
    270          }
    271          
    272          /*******************************************************************************
    273           * 名    称： APP_OsalInit
    274           * 功    能： 任务初始化
    275           * 入口参数： 无
    276           * 出口参数： 无
    277           * 作　　者： wumingshen.
    278           * 创建日期： 2015-03-28
    279           * 修    改：
    280           * 修改日期：
    281           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    282          static void APP_OsalInit(void)
    283          {
    284              /***********************************************
    285              * 描述： 在看门狗标志组注册本任务的看门狗标志
    286              */
    287              #if (UCOS_EN     == DEF_ENABLED)
    288          #if OS_VERSION > 30000U
    289              //BSP_OS_SemCreate(&Osal_EvtSem,0, "Osal_EvtSem");     // 创建信号量
    290          #else
    291              Osal_EvtSem     = OSSemCreate(0);                    // 创建信号量
    292          #endif
    293          #endif
    294          }
   \                     APP_OsalInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     AppTaskOsalStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     AppTaskOsalTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     TaskActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ??events

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Osal"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x4F    
   \              0x73 0x61    
   \              0x6C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    295          
    296          /*******************************************************************************
    297           * 				end of file
    298           *******************************************************************************/
    299          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   APP_OsalInit
       8   AppTaskOsal
         8   -> OSIdleTaskHook
         8   -> osalEventHandle
         8   -> osalEventInit
      48   App_TaskOsalCreate
        48   -> OSTaskCreate
       8   osalEventHandle
         8   -- Indirect call
         8   -> CPU_IntDisMeasStart
         8   -> CPU_IntDisMeasStop
         8   -> CPU_SR_Restore
         8   -> CPU_SR_Save
         8   -> osalNextActiveTask
       8   osalEventInit
         8   -> APP_OsalInit
         8   -> OSAL_TaskCreateHook
         8   -> osal_Task_init
         8   -> osal_init_system


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      16  ?_0
       2  APP_OsalInit
      16  AppTaskOsal
    2048  AppTaskOsalStk
     160  AppTaskOsalTCB
      60  App_TaskOsalCreate
       4  events
     148  osalEventHandle
      20  osalEventInit

 
 2 212 bytes in section .bss
    16 bytes in section .rodata
   266 bytes in section .text
 
   266 bytes of CODE  memory
    16 bytes of CONST memory
 2 212 bytes of DATA  memory

Errors: none
Warnings: none
