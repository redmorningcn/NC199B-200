###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:08
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_ascii.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_ascii.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\lib_ascii.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\lib_ascii.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\uC-LIB\lib_ascii.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/LIB
      4          *                                        CUSTOM LIBRARY MODULES
      5          *
      6          *                         (c) Copyright 2004-2015; Micrium, Inc.; Weston, FL
      7          *
      8          *                  All rights reserved.  Protected by international copyright laws.
      9          *
     10          *                  uC/LIB is provided in source form to registered licensees ONLY.  It is
     11          *                  illegal to distribute this source code to any third party unless you receive
     12          *                  written permission by an authorized Micrium representative.  Knowledge of
     13          *                  the source code may NOT be used to develop a similar product.
     14          *
     15          *                  Please help us continue to provide the Embedded community with the finest
     16          *                  software available.  Your honesty is greatly appreciated.
     17          *
     18          *                  You can find our product's user manual, API reference, release notes and
     19          *                  more information at: https://doc.micrium.com
     20          *
     21          *                  You can contact us at: http://www.micrium.com
     22          *********************************************************************************************************
     23          */
     24          
     25          /*
     26          *********************************************************************************************************
     27          *
     28          *                                     ASCII CHARACTER OPERATIONS
     29          *
     30          * Filename      : lib_ascii.c
     31          * Version       : V1.38.02
     32          * Programmer(s) : BAN
     33          *                 ITJ
     34          *********************************************************************************************************
     35          * Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
     36          *
     37          *                     (a) ALL standard library functions are implemented in the custom library modules :
     38          *
     39          *                         (1) \<Custom Library Directory>\lib_*.*
     40          *
     41          *                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
     42          *
     43          *                               where
     44          *                                       <Custom Library Directory>      directory path for custom library software
     45          *                                       <cpu>                           directory name for specific processor (CPU)
     46          *                                       <compiler>                      directory name for specific compiler
     47          *
     48          *                     (b) Product-specific library functions are implemented in individual products.
     49          *
     50          *
     51          *                 (2) (a) ECMA-6 '7-Bit coded Character Set' (6th edition), which corresponds to the
     52          *                         3rd edition of ISO 646, specifies several versions of a 7-bit character set :
     53          *
     54          *                         (1) THE GENERAL VERSION, which allows characters at 0x23 and 0x24 to be given a
     55          *                             set alternate form and allows the characters 0x40, 0x5B, 0x5D, 0x60, 0x7B &
     56          *                             0x7D to be assigned a "unique graphic character" or to be declared as unused.
     57          *                             All other characters are explicitly specified.
     58          *
     59          *                         (2) THE INTERNATIONAL REFERENCE VERSION, which explicitly specifies all characters
     60          *                             in the 7-bit character set.
     61          *
     62          *                         (3) NATIONAL & APPLICATION-ORIENTED VERSIONS, which may be derived from the
     63          *                             standard in specified ways.
     64          *
     65          *                     (b) The character set represented in this file reproduces the Internation Reference
     66          *                         Version.  This is identical to the 7-bit character set which occupies Unicode
     67          *                         characters 0x0000 through 0x007F.  The character names are taken from v5.0 of the
     68          *                         Unicode specification, with certain abbreviations so that the resulting #define
     69          *                         names will not violate ANSI C naming restriction :
     70          *
     71          *                         (1) For the Latin capital & lowercase letters, the name components 'LETTER_CAPITAL'
     72          *                             & 'LETTER_SMALL' are replaced by 'UPPER' & 'LOWER', respectively.
     73          *********************************************************************************************************
     74          */
     75          
     76          
     77          /*
     78          *********************************************************************************************************
     79          *                                            INCLUDE FILES
     80          *********************************************************************************************************
     81          */
     82          
     83          #define    MICRIUM_SOURCE
     84          #define    LIB_ASCII_MODULE
     85          #include  <lib_ascii.h>
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                            LOCAL DEFINES
     91          *********************************************************************************************************
     92          */
     93          
     94          
     95          /*
     96          *********************************************************************************************************
     97          *                                           LOCAL CONSTANTS
     98          *********************************************************************************************************
     99          */
    100          
    101          
    102          /*
    103          *********************************************************************************************************
    104          *                                          LOCAL DATA TYPES
    105          *********************************************************************************************************
    106          */
    107          
    108          
    109          /*
    110          *********************************************************************************************************
    111          *                                            LOCAL TABLES
    112          *********************************************************************************************************
    113          */
    114          
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                       LOCAL GLOBAL VARIABLES
    119          *********************************************************************************************************
    120          */
    121          
    122          
    123          /*
    124          *********************************************************************************************************
    125          *                                      LOCAL FUNCTION PROTOTYPES
    126          *********************************************************************************************************
    127          */
    128          
    129          
    130          /*
    131          *********************************************************************************************************
    132          *                                     LOCAL CONFIGURATION ERRORS
    133          *********************************************************************************************************
    134          */
    135          
    136          
    137          /*
    138          *********************************************************************************************************
    139          *                                           ASCII_IsAlpha()
    140          *
    141          * Description : Determine whether a character is an alphabetic character.
    142          *
    143          * Argument(s) : c           Character to examine.
    144          *
    145          * Return(s)   : DEF_YES, if character is     an alphabetic character.
    146          *
    147          *               DEF_NO,     if character is NOT an alphabetic character.
    148          *
    149          * Caller(s)   : Application.
    150          *
    151          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.2.(2) states that "isalpha() returns true only for the
    152          *                   characters for which isupper() or islower() is true".
    153          *********************************************************************************************************
    154          */
    155          

   \                                 In section .text, align 2, keep-with-next
    156          CPU_BOOLEAN  ASCII_IsAlpha (CPU_CHAR  c)
    157          {
    158              CPU_BOOLEAN  alpha;
    159          
    160          
    161              alpha = ASCII_IS_ALPHA(c);
   \                     ASCII_IsAlpha: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   00000006   0x291A             CMP      R1,#+26
   \   00000008   0xD201             BCS.N    ??ASCII_IsAlpha_0
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xE000             B.N      ??ASCII_IsAlpha_1
   \                     ??ASCII_IsAlpha_0: (+1)
   \   0000000E   0x2100             MOVS     R1,#+0
   \                     ??ASCII_IsAlpha_1: (+1)
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD008             BEQ.N    ??ASCII_IsAlpha_2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x3861             SUBS     R0,R0,#+97
   \   00000018   0x281A             CMP      R0,#+26
   \   0000001A   0xD201             BCS.N    ??ASCII_IsAlpha_3
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??ASCII_IsAlpha_4
   \                     ??ASCII_IsAlpha_3: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlpha_4: (+1)
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD101             BNE.N    ??ASCII_IsAlpha_5
   \                     ??ASCII_IsAlpha_2: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??ASCII_IsAlpha_6
   \                     ??ASCII_IsAlpha_5: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
    162          
    163              return (alpha);
   \                     ??ASCII_IsAlpha_6: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x4770             BX       LR               ;; return
    164          }
    165          
    166          
    167          /*
    168          *********************************************************************************************************
    169          *                                         ASCII_IsAlphaNum()
    170          *
    171          * Description : Determine whether a character is an alphanumeric character.
    172          *
    173          * Argument(s) : c           Character to examine.
    174          *
    175          * Return(s)   : DEF_YES, if character is     an alphanumeric character.
    176          *
    177          *               DEF_NO,     if character is NOT an alphanumeric character.
    178          *
    179          * Caller(s)   : Application.
    180          *
    181          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.1.(2) states that "isalnum() ... tests for any character
    182          *                   for which isalpha() or isdigit() is true".
    183          *********************************************************************************************************
    184          */
    185          

   \                                 In section .text, align 2, keep-with-next
    186          CPU_BOOLEAN  ASCII_IsAlphaNum (CPU_CHAR  c)
    187          {
    188              CPU_BOOLEAN  alpha_num;
    189          
    190          
    191              alpha_num = ASCII_IS_ALPHA_NUM(c);
   \                     ASCII_IsAlphaNum: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   00000006   0x291A             CMP      R1,#+26
   \   00000008   0xD201             BCS.N    ??ASCII_IsAlphaNum_0
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xE000             B.N      ??ASCII_IsAlphaNum_1
   \                     ??ASCII_IsAlphaNum_0: (+1)
   \   0000000E   0x2100             MOVS     R1,#+0
   \                     ??ASCII_IsAlphaNum_1: (+1)
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD009             BEQ.N    ??ASCII_IsAlphaNum_2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xF1B0 0x0161      SUBS     R1,R0,#+97
   \   0000001A   0x291A             CMP      R1,#+26
   \   0000001C   0xD201             BCS.N    ??ASCII_IsAlphaNum_3
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xE000             B.N      ??ASCII_IsAlphaNum_4
   \                     ??ASCII_IsAlphaNum_3: (+1)
   \   00000022   0x2100             MOVS     R1,#+0
   \                     ??ASCII_IsAlphaNum_4: (+1)
   \   00000024   0x2901             CMP      R1,#+1
   \   00000026   0xD101             BNE.N    ??ASCII_IsAlphaNum_5
   \                     ??ASCII_IsAlphaNum_2: (+1)
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0xE000             B.N      ??ASCII_IsAlphaNum_6
   \                     ??ASCII_IsAlphaNum_5: (+1)
   \   0000002C   0x2100             MOVS     R1,#+0
   \                     ??ASCII_IsAlphaNum_6: (+1)
   \   0000002E   0x2901             CMP      R1,#+1
   \   00000030   0xD008             BEQ.N    ??ASCII_IsAlphaNum_7
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x3830             SUBS     R0,R0,#+48
   \   00000036   0x280A             CMP      R0,#+10
   \   00000038   0xD201             BCS.N    ??ASCII_IsAlphaNum_8
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE000             B.N      ??ASCII_IsAlphaNum_9
   \                     ??ASCII_IsAlphaNum_8: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_9: (+1)
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD101             BNE.N    ??ASCII_IsAlphaNum_10
   \                     ??ASCII_IsAlphaNum_7: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE000             B.N      ??ASCII_IsAlphaNum_11
   \                     ??ASCII_IsAlphaNum_10: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
    192          
    193              return (alpha_num);
   \                     ??ASCII_IsAlphaNum_11: (+1)
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x4770             BX       LR               ;; return
    194          }
    195          
    196          
    197          /*
    198          *********************************************************************************************************
    199          *                                           ASCII_IsLower()
    200          *
    201          * Description : Determine whether a character is a lowercase alphabetic character.
    202          *
    203          * Argument(s) : c           Character to examine.
    204          *
    205          * Return(s)   : DEF_YES, if character is     a lowercase alphabetic character.
    206          *
    207          *               DEF_NO,     if character is NOT a lowercase alphabetic character.
    208          *
    209          * Caller(s)   : Application.
    210          *
    211          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.7.(2)  states that "islower() returns true only for
    212          *                   the lowercase letters".
    213          *********************************************************************************************************
    214          */
    215          

   \                                 In section .text, align 2, keep-with-next
    216          CPU_BOOLEAN  ASCII_IsLower (CPU_CHAR  c)
    217          {
    218              CPU_BOOLEAN  lower;
    219          
    220          
    221              lower = ASCII_IS_LOWER(c);
   \                     ASCII_IsLower: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3861             SUBS     R0,R0,#+97
   \   00000004   0x281A             CMP      R0,#+26
   \   00000006   0xD201             BCS.N    ??ASCII_IsLower_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsLower_1
   \                     ??ASCII_IsLower_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    222          
    223              return (lower);
   \                     ??ASCII_IsLower_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    224          }
    225          
    226          
    227          /*
    228          *********************************************************************************************************
    229          *                                           ASCII_IsUpper()
    230          *
    231          * Description : Determine whether a character is an uppercase alphabetic character.
    232          *
    233          * Argument(s) : c           Character to examine.
    234          *
    235          * Return(s)   : DEF_YES, if character is     an uppercase alphabetic character.
    236          *
    237          *               DEF_NO,     if character is NOT an uppercase alphabetic character.
    238          *
    239          * Caller(s)   : Application.
    240          *
    241          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.11.(2) states that "isupper() returns true only for
    242          *                   the uppercase letters".
    243          *********************************************************************************************************
    244          */
    245          

   \                                 In section .text, align 2, keep-with-next
    246          CPU_BOOLEAN  ASCII_IsUpper (CPU_CHAR  c)
    247          {
    248              CPU_BOOLEAN  upper;
    249          
    250          
    251              upper = ASCII_IS_UPPER(c);
   \                     ASCII_IsUpper: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3841             SUBS     R0,R0,#+65
   \   00000004   0x281A             CMP      R0,#+26
   \   00000006   0xD201             BCS.N    ??ASCII_IsUpper_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsUpper_1
   \                     ??ASCII_IsUpper_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    252          
    253              return (upper);
   \                     ??ASCII_IsUpper_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    254          }
    255          
    256          
    257          /*
    258          *********************************************************************************************************
    259          *                                            ASCII_IsDig()
    260          *
    261          * Description : Determine whether a character is a decimal-digit character.
    262          *
    263          * Argument(s) : c           Character to examine.
    264          *
    265          * Return(s)   : DEF_YES, if character is     a decimal-digit character.
    266          *
    267          *               DEF_NO,     if character is NOT a decimal-digit character.
    268          *
    269          * Caller(s)   : Application.
    270          *
    271          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.5.(2)  states that "isdigit()  ... tests for any
    272          *                   decimal-digit character".
    273          *********************************************************************************************************
    274          */
    275          

   \                                 In section .text, align 2, keep-with-next
    276          CPU_BOOLEAN  ASCII_IsDig (CPU_CHAR  c)
    277          {
    278              CPU_BOOLEAN  dig;
    279          
    280          
    281              dig = ASCII_IS_DIG(c);
   \                     ASCII_IsDig: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3830             SUBS     R0,R0,#+48
   \   00000004   0x280A             CMP      R0,#+10
   \   00000006   0xD201             BCS.N    ??ASCII_IsDig_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsDig_1
   \                     ??ASCII_IsDig_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    282          
    283              return (dig);
   \                     ??ASCII_IsDig_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    284          }
    285          
    286          
    287          /*
    288          *********************************************************************************************************
    289          *                                          ASCII_IsDigOct()
    290          *
    291          * Description : Determine whether a character is an octal-digit character.
    292          *
    293          * Argument(s) : c           Character to examine.
    294          *
    295          * Return(s)   : DEF_YES, if character is     an octal-digit character.
    296          *
    297          *               DEF_NO,     if character is NOT an octal-digit character.
    298          *
    299          * Caller(s)   : Application.
    300          *
    301          * Note(s)     : none.
    302          *********************************************************************************************************
    303          */
    304          

   \                                 In section .text, align 2, keep-with-next
    305          CPU_BOOLEAN  ASCII_IsDigOct (CPU_CHAR  c)
    306          {
    307              CPU_BOOLEAN  dig_oct;
    308          
    309          
    310              dig_oct = ASCII_IS_DIG_OCT(c);
   \                     ASCII_IsDigOct: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3830             SUBS     R0,R0,#+48
   \   00000004   0x2808             CMP      R0,#+8
   \   00000006   0xD201             BCS.N    ??ASCII_IsDigOct_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsDigOct_1
   \                     ??ASCII_IsDigOct_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    311          
    312              return (dig_oct);
   \                     ??ASCII_IsDigOct_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    313          }
    314          
    315          
    316          /*
    317          *********************************************************************************************************
    318          *                                          ASCII_IsDigHex()
    319          *
    320          * Description : Determine whether a character is a hexadecimal-digit character.
    321          *
    322          * Argument(s) : c           Character to examine.
    323          *
    324          * Return(s)   : DEF_YES, if character is     a hexadecimal-digit character.
    325          *
    326          *               DEF_NO,     if character is NOT a hexadecimal-digit character.
    327          *
    328          * Caller(s)   : Application.
    329          *
    330          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.12.(2) states that "isxdigit() ... tests for any
    331          *                   hexadecimal-digit character".
    332          *********************************************************************************************************
    333          */
    334          

   \                                 In section .text, align 2, keep-with-next
    335          CPU_BOOLEAN  ASCII_IsDigHex (CPU_CHAR  c)
    336          {
    337              CPU_BOOLEAN  dig_hex;
    338          
    339          
    340              dig_hex = ASCII_IS_DIG_HEX(c);
   \                     ASCII_IsDigHex: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0130      SUBS     R1,R0,#+48
   \   00000006   0x290A             CMP      R1,#+10
   \   00000008   0xD308             BCC.N    ??ASCII_IsDigHex_0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   00000010   0x2906             CMP      R1,#+6
   \   00000012   0xD303             BCC.N    ??ASCII_IsDigHex_0
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x3861             SUBS     R0,R0,#+97
   \   00000018   0x2806             CMP      R0,#+6
   \   0000001A   0xD201             BCS.N    ??ASCII_IsDigHex_1
   \                     ??ASCII_IsDigHex_0: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??ASCII_IsDigHex_2
   \                     ??ASCII_IsDigHex_1: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
    341          
    342              return (dig_hex);
   \                     ??ASCII_IsDigHex_2: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x4770             BX       LR               ;; return
    343          }
    344          
    345          
    346          /*
    347          *********************************************************************************************************
    348          *                                           ASCII_IsBlank()
    349          *
    350          * Description : Determine whether a character is a standard blank character.
    351          *
    352          * Argument(s) : c           Character to examine.
    353          *
    354          * Return(s)   : DEF_YES, if character is     a standard blank character.
    355          *
    356          *               DEF_NO,     if character is NOT a standard blank character.
    357          *
    358          * Caller(s)   : Application.
    359          *
    360          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) states that "isblank() returns true only for
    361          *                       the standard blank characters".
    362          *
    363          *                   (b) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) defines "the standard blank characters" as
    364          *                       the "space (' '), and horizontal tab ('\t')".
    365          *********************************************************************************************************
    366          */
    367          

   \                                 In section .text, align 2, keep-with-next
    368          CPU_BOOLEAN  ASCII_IsBlank (CPU_CHAR  c)
    369          {
    370              CPU_BOOLEAN  blank;
    371          
    372          
    373              blank = ASCII_IS_BLANK(c);
   \                     ASCII_IsBlank: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2820             CMP      R0,#+32
   \   00000004   0xD002             BEQ.N    ??ASCII_IsBlank_0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x2809             CMP      R0,#+9
   \   0000000A   0xD101             BNE.N    ??ASCII_IsBlank_1
   \                     ??ASCII_IsBlank_0: (+1)
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B.N      ??ASCII_IsBlank_2
   \                     ??ASCII_IsBlank_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
    374          
    375              return (blank);
   \                     ??ASCII_IsBlank_2: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x4770             BX       LR               ;; return
    376          }
    377          
    378          
    379          /*
    380          *********************************************************************************************************
    381          *                                           ASCII_IsSpace()
    382          *
    383          * Description : Determine whether a character is a white-space character.
    384          *
    385          * Argument(s) : c           Character to examine.
    386          *
    387          * Return(s)   : DEF_YES, if character is     a white-space character.
    388          *
    389          *               DEF_NO,     if character is NOT a white-space character.
    390          *
    391          * Caller(s)   : Application.
    392          *
    393          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) states that "isspace() returns true only
    394          *                       for the standard white-space characters".
    395          *
    396          *                   (b) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) defines "the standard white-space characters"
    397          *                       as the "space (' '), form feed ('\f'), new-line ('\n'), carriage return ('\r'),
    398          *                       horizontal tab ('\t'), and vertical tab ('\v')".
    399          *********************************************************************************************************
    400          */
    401          

   \                                 In section .text, align 2, keep-with-next
    402          CPU_BOOLEAN  ASCII_IsSpace (CPU_CHAR  c)
    403          {
    404              CPU_BOOLEAN  space;
    405          
    406          
    407              space = ASCII_IS_SPACE(c);
   \                     ASCII_IsSpace: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2820             CMP      R0,#+32
   \   00000004   0xD00E             BEQ.N    ??ASCII_IsSpace_0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x280D             CMP      R0,#+13
   \   0000000A   0xD00B             BEQ.N    ??ASCII_IsSpace_0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD008             BEQ.N    ??ASCII_IsSpace_0
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x280C             CMP      R0,#+12
   \   00000016   0xD005             BEQ.N    ??ASCII_IsSpace_0
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2809             CMP      R0,#+9
   \   0000001C   0xD002             BEQ.N    ??ASCII_IsSpace_0
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x280B             CMP      R0,#+11
   \   00000022   0xD101             BNE.N    ??ASCII_IsSpace_1
   \                     ??ASCII_IsSpace_0: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE000             B.N      ??ASCII_IsSpace_2
   \                     ??ASCII_IsSpace_1: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
    408          
    409              return (space);
   \                     ??ASCII_IsSpace_2: (+1)
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x4770             BX       LR               ;; return
    410          }
    411          
    412          
    413          /*
    414          *********************************************************************************************************
    415          *                                           ASCII_IsPrint()
    416          *
    417          * Description : Determine whether a character is a printing character.
    418          *
    419          * Argument(s) : c           Character to examine.
    420          *
    421          * Return(s)   : DEF_YES, if character is     a printing character.
    422          *
    423          *               DEF_NO,     if character is NOT a printing character.
    424          *
    425          * Caller(s)   : Application.
    426          *
    427          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.8.(2) states that "isprint() ... tests for any
    428          *                       printing character including space (' ')".
    429          *
    430          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    431          *                       ASCII character set, the printing characters are those whose values lie from
    432          *                       0x20 (space) through 0x7E (tilde)".
    433          *********************************************************************************************************
    434          */
    435          

   \                                 In section .text, align 2, keep-with-next
    436          CPU_BOOLEAN  ASCII_IsPrint (CPU_CHAR  c)
    437          {
    438              CPU_BOOLEAN  print;
    439          
    440          
    441              print = ASCII_IS_PRINT(c);
   \                     ASCII_IsPrint: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3820             SUBS     R0,R0,#+32
   \   00000004   0x285F             CMP      R0,#+95
   \   00000006   0xD201             BCS.N    ??ASCII_IsPrint_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsPrint_1
   \                     ??ASCII_IsPrint_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    442          
    443              return (print);
   \                     ??ASCII_IsPrint_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    444          }
    445          
    446          
    447          /*
    448          *********************************************************************************************************
    449          *                                           ASCII_IsGraph()
    450          *
    451          * Description : Determine whether a character is any printing character except a space character.
    452          *
    453          * Argument(s) : c           Character to examine.
    454          *
    455          * Return(s)   : DEF_YES, if character is     a graphic character.
    456          *
    457          *               DEF_NO,     if character is NOT a graphic character.
    458          *
    459          * Caller(s)   : Application.
    460          *
    461          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.6.(2) states that "isgraph() ... tests for any
    462          *                       printing character except space (' ')".
    463          *
    464          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    465          *                       ASCII character set, the printing characters are those whose values lie from
    466          *                       0x20 (space) through 0x7E (tilde)".
    467          *********************************************************************************************************
    468          */
    469          

   \                                 In section .text, align 2, keep-with-next
    470          CPU_BOOLEAN  ASCII_IsGraph (CPU_CHAR  c)
    471          {
    472              CPU_BOOLEAN  graph;
    473          
    474          
    475              graph = ASCII_IS_GRAPH(c);
   \                     ASCII_IsGraph: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x3821             SUBS     R0,R0,#+33
   \   00000004   0x285E             CMP      R0,#+94
   \   00000006   0xD201             BCS.N    ??ASCII_IsGraph_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??ASCII_IsGraph_1
   \                     ??ASCII_IsGraph_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
    476          
    477              return (graph);
   \                     ??ASCII_IsGraph_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    478          }
    479          
    480          
    481          /*
    482          *********************************************************************************************************
    483          *                                           ASCII_IsPunct()
    484          *
    485          * Description : Determine whether a character is a punctuation character.
    486          *
    487          * Argument(s) : c           Character to examine.
    488          *
    489          * Return(s)   : DEF_YES, if character is     a punctuation character.
    490          *
    491          *               DEF_NO,     if character is NOT a punctuation character.
    492          *
    493          * Caller(s)   : Application.
    494          *
    495          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.9.(2) states that "ispunct() returns true for every
    496          *                   printing character for which neither isspace() nor isalnum() is true".
    497          *********************************************************************************************************
    498          */
    499          

   \                                 In section .text, align 2, keep-with-next
    500          CPU_BOOLEAN  ASCII_IsPunct (CPU_CHAR  c)
    501          {
    502              CPU_BOOLEAN  punct;
    503          
    504          
    505              punct = ASCII_IS_PUNCT(c);
   \                     ASCII_IsPunct: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0121      SUBS     R1,R0,#+33
   \   00000006   0x290F             CMP      R1,#+15
   \   00000008   0xD30D             BCC.N    ??ASCII_IsPunct_0
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xF1B0 0x013A      SUBS     R1,R0,#+58
   \   00000010   0x2907             CMP      R1,#+7
   \   00000012   0xD308             BCC.N    ??ASCII_IsPunct_0
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xF1B0 0x015B      SUBS     R1,R0,#+91
   \   0000001A   0x2906             CMP      R1,#+6
   \   0000001C   0xD303             BCC.N    ??ASCII_IsPunct_0
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x387B             SUBS     R0,R0,#+123
   \   00000022   0x2804             CMP      R0,#+4
   \   00000024   0xD201             BCS.N    ??ASCII_IsPunct_1
   \                     ??ASCII_IsPunct_0: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??ASCII_IsPunct_2
   \                     ??ASCII_IsPunct_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
    506          
    507              return (punct);
   \                     ??ASCII_IsPunct_2: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x4770             BX       LR               ;; return
    508          }
    509          
    510          
    511          /*
    512          *********************************************************************************************************
    513          *                                           ASCII_IsCtrl()
    514          *
    515          * Description : Determine whether a character is a control character.
    516          *
    517          * Argument(s) : c           Character to examine.
    518          *
    519          * Return(s)   : DEF_YES, if character is     a control character.
    520          *
    521          *               DEF_NO,     if character is NOT a control character.
    522          *
    523          * Caller(s)   : Application.
    524          *
    525          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.4.(2) states that "iscntrl() ... tests for any
    526          *                       control character".
    527          *
    528          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    529          *                       ASCII character set, ... the control characters are those whose values lie from
    530          *                       0 (NUL) through 0x1F (US), and the character 0x7F (DEL)".
    531          *********************************************************************************************************
    532          */
    533          

   \                                 In section .text, align 2, keep-with-next
    534          CPU_BOOLEAN  ASCII_IsCtrl (CPU_CHAR  c)
    535          {
    536              CPU_BOOLEAN  ctrl;
    537          
    538          
    539              ctrl = ASCII_IS_CTRL(c);
   \                     ASCII_IsCtrl: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD402             BMI.N    ??ASCII_IsCtrl_0
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2820             CMP      R0,#+32
   \   0000000C   0xDB02             BLT.N    ??ASCII_IsCtrl_1
   \                     ??ASCII_IsCtrl_0: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x287F             CMP      R0,#+127
   \   00000012   0xD101             BNE.N    ??ASCII_IsCtrl_2
   \                     ??ASCII_IsCtrl_1: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??ASCII_IsCtrl_3
   \                     ??ASCII_IsCtrl_2: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
    540          
    541              return (ctrl);
   \                     ??ASCII_IsCtrl_3: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x4770             BX       LR               ;; return
    542          }
    543          
    544          
    545          /*
    546          *********************************************************************************************************
    547          *                                           ASCII_ToLower()
    548          *
    549          * Description : Convert uppercase alphabetic character to its corresponding lowercase alphabetic character.
    550          *
    551          * Argument(s) : c           Character to convert.
    552          *
    553          * Return(s)   : Lowercase equivalent of 'c', if character 'c' is an uppercase character (see Note #1b1).
    554          *
    555          *               Character 'c',               otherwise                                  (see Note #1b2).
    556          *
    557          * Caller(s)   : Application.
    558          *
    559          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.2.1.(2) states that "tolower() ... converts an
    560          *                       uppercase letter to a corresponding lowercase letter".
    561          *
    562          *                   (b) ISO/IEC 9899:TC2, Section 7.4.2.1.(3) states that :
    563          *
    564          *                       (1) (A) "if the argument is a character for which isupper() is true and there are
    565          *                                one or more corresponding characters ... for which islower() is true," ...
    566          *                           (B) "tolower() ... returns one of the corresponding characters;" ...
    567          *
    568          *                       (2) "otherwise, the argument is returned unchanged."
    569          *********************************************************************************************************
    570          */
    571          

   \                                 In section .text, align 2, keep-with-next
    572          CPU_CHAR  ASCII_ToLower (CPU_CHAR  c)
    573          {
    574              CPU_CHAR  lower;
    575          
    576          
    577              lower = ASCII_TO_LOWER(c);
   \                     ASCII_ToLower: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   00000006   0x291A             CMP      R1,#+26
   \   00000008   0xD201             BCS.N    ??ASCII_ToLower_0
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xE000             B.N      ??ASCII_ToLower_1
   \                     ??ASCII_ToLower_0: (+1)
   \   0000000E   0x2100             MOVS     R1,#+0
   \                     ??ASCII_ToLower_1: (+1)
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD101             BNE.N    ??ASCII_ToLower_2
   \   00000014   0x3020             ADDS     R0,R0,#+32
   \   00000016   0xE7FF             B.N      ??ASCII_ToLower_3
    578          
    579              return (lower);
   \                     ??ASCII_ToLower_2: (+1)
   \                     ??ASCII_ToLower_3: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x4770             BX       LR               ;; return
    580          }
    581          
    582          
    583          /*
    584          *********************************************************************************************************
    585          *                                           ASCII_ToUpper()
    586          *
    587          * Description : Convert lowercase alphabetic character to its corresponding uppercase alphabetic character.
    588          *
    589          * Argument(s) : c           Character to convert.
    590          *
    591          * Return(s)   : Uppercase equivalent of 'c', if character 'c' is a lowercase character (see Note #1b1).
    592          *
    593          *               Character 'c',               otherwise                                 (see Note #1b2).
    594          *
    595          * Caller(s)   : Application.
    596          *
    597          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.2.2.(2) states that "toupper() ... converts a
    598          *                       lowercase letter to a corresponding uppercase letter".
    599          *
    600          *                   (b) ISO/IEC 9899:TC2, Section 7.4.2.2.(3) states that :
    601          *
    602          *                       (1) (A) "if the argument is a character for which islower() is true and there are
    603          *                                one or more corresponding characters ... for which isupper() is true," ...
    604          *                           (B) "toupper() ... returns one of the corresponding characters;" ...
    605          *
    606          *                       (2) "otherwise, the argument is returned unchanged."
    607          *********************************************************************************************************
    608          */
    609          

   \                                 In section .text, align 2, keep-with-next
    610          CPU_CHAR  ASCII_ToUpper (CPU_CHAR  c)
    611          {
    612              CPU_CHAR  upper;
    613          
    614          
    615              upper = ASCII_TO_UPPER(c);
   \                     ASCII_ToUpper: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF1B0 0x0161      SUBS     R1,R0,#+97
   \   00000006   0x291A             CMP      R1,#+26
   \   00000008   0xD201             BCS.N    ??ASCII_ToUpper_0
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xE000             B.N      ??ASCII_ToUpper_1
   \                     ??ASCII_ToUpper_0: (+1)
   \   0000000E   0x2100             MOVS     R1,#+0
   \                     ??ASCII_ToUpper_1: (+1)
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD101             BNE.N    ??ASCII_ToUpper_2
   \   00000014   0x3820             SUBS     R0,R0,#+32
   \   00000016   0xE7FF             B.N      ??ASCII_ToUpper_3
    616          
    617              return (upper);
   \                     ??ASCII_ToUpper_2: (+1)
   \                     ??ASCII_ToUpper_3: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x4770             BX       LR               ;; return
    618          }
    619          
    620          
    621          /*
    622          *********************************************************************************************************
    623          *                                             ASCII_Cmp()
    624          *
    625          * Description : Determine if two characters are identical (case-insensitive).
    626          *
    627          * Argument(s) : c1          First  character.
    628          *
    629          *               c2          Second character.
    630          *
    631          * Return(s)   : DEF_YES, if the characters are     identical.
    632          *
    633          *               DEF_NO,  if the characters are NOT identical.
    634          *
    635          * Caller(s)   : Application.
    636          *
    637          * Note(s)     : none.
    638          *********************************************************************************************************
    639          */
    640          

   \                                 In section .text, align 2, keep-with-next
    641          CPU_BOOLEAN  ASCII_Cmp (CPU_CHAR  c1,
    642                                  CPU_CHAR  c2)
    643          {
   \                     ASCII_Cmp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
    644              CPU_CHAR     c1_upper;
    645              CPU_CHAR     c2_upper;
    646              CPU_BOOLEAN  cmp;
    647          
    648          
    649              c1_upper =  ASCII_ToUpper(c1);
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x.... 0x....      BL       ASCII_ToUpper
   \   0000000A   0x0005             MOVS     R5,R0
    650              c2_upper =  ASCII_ToUpper(c2);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       ASCII_ToUpper
    651              cmp      = (c1_upper == c2_upper) ? (DEF_YES) : (DEF_NO);
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x4285             CMP      R5,R0
   \   0000001A   0xD101             BNE.N    ??ASCII_Cmp_0
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??ASCII_Cmp_1
   \                     ??ASCII_Cmp_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
    652          
    653              return (cmp);
   \                     ??ASCII_Cmp_1: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    654          }
    655          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ASCII_Cmp
        16   -> ASCII_ToUpper
       0   ASCII_IsAlpha
       0   ASCII_IsAlphaNum
       0   ASCII_IsBlank
       0   ASCII_IsCtrl
       0   ASCII_IsDig
       0   ASCII_IsDigHex
       0   ASCII_IsDigOct
       0   ASCII_IsGraph
       0   ASCII_IsLower
       0   ASCII_IsPrint
       0   ASCII_IsPunct
       0   ASCII_IsSpace
       0   ASCII_IsUpper
       0   ASCII_ToLower
       0   ASCII_ToUpper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      38  ASCII_Cmp
      48  ASCII_IsAlpha
      78  ASCII_IsAlphaNum
      22  ASCII_IsBlank
      30  ASCII_IsCtrl
      18  ASCII_IsDig
      38  ASCII_IsDigHex
      18  ASCII_IsDigOct
      18  ASCII_IsGraph
      18  ASCII_IsLower
      18  ASCII_IsPrint
      48  ASCII_IsPunct
      46  ASCII_IsSpace
      18  ASCII_IsUpper
      28  ASCII_ToLower
      28  ASCII_ToUpper

 
 512 bytes in section .text
 
 512 bytes of CODE memory

Errors: none
Warnings: none
