###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-CPU\ARM-Cortex-M3\IAR\cpu_c.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uC-CPU\ARM-Cortex-M3\IAR\cpu_c.c
#        -D USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\cpu_c.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\cpu_c.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\uC-CPU\ARM-Cortex-M3\IAR\cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/CPU
      4          *                                    CPU CONFIGURATION & PORT LAYER
      5          *
      6          *                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
      7          *
      8          *               All rights reserved.  Protected by international copyright laws.
      9          *
     10          *               uC/CPU is provided in source form to registered licensees ONLY.  It is 
     11          *               illegal to distribute this source code to any third party unless you receive 
     12          *               written permission by an authorized Micrium representative.  Knowledge of 
     13          *               the source code may NOT be used to develop a similar product.
     14          *
     15          *               Please help us continue to provide the Embedded community with the finest 
     16          *               software available.  Your honesty is greatly appreciated.
     17          *
     18          *               You can contact us at www.micrium.com.
     19          *********************************************************************************************************
     20          */
     21          
     22          /*
     23          *********************************************************************************************************
     24          *
     25          *                                            CPU PORT FILE
     26          *
     27          *                                            ARM-Cortex-M3
     28          *                                            IAR C Compiler
     29          *
     30          * Filename      : cpu_c.c
     31          * Version       : V1.29.01.00
     32          * Programmer(s) : JJL
     33          *                 BAN
     34          *********************************************************************************************************
     35          */
     36          
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                            INCLUDE FILES
     41          *********************************************************************************************************
     42          */
     43          
     44          #define    MICRIUM_SOURCE
     45          #include  <cpu.h>
     46          #include  <cpu_core.h>
     47          
     48          #include  <lib_def.h>
     49          
     50          
     51          /*$PAGE*/
     52          /*
     53          *********************************************************************************************************
     54          *                                            LOCAL DEFINES
     55          *********************************************************************************************************
     56          */
     57          
     58          #define  CPU_INT_SRC_POS_MAX                  ((((CPU_REG_NVIC_NVIC + 1) & 0x1F) * 32) + 16)
     59          
     60          #define  CPU_BIT_BAND_SRAM_REG_LO                 0x20000000
     61          #define  CPU_BIT_BAND_SRAM_REG_HI                 0x200FFFFF
     62          #define  CPU_BIT_BAND_SRAM_BASE                   0x22000000
     63          
     64          
     65          #define  CPU_BIT_BAND_PERIPH_REG_LO               0x40000000
     66          #define  CPU_BIT_BAND_PERIPH_REG_HI               0x400FFFFF
     67          #define  CPU_BIT_BAND_PERIPH_BASE                 0x42000000
     68          
     69          
     70          /*
     71          *********************************************************************************************************
     72          *                                           LOCAL CONSTANTS
     73          *********************************************************************************************************
     74          */
     75          
     76          
     77          /*
     78          *********************************************************************************************************
     79          *                                          LOCAL DATA TYPES
     80          *********************************************************************************************************
     81          */
     82          
     83          
     84          /*
     85          *********************************************************************************************************
     86          *                                            LOCAL TABLES
     87          *********************************************************************************************************
     88          */
     89          
     90          
     91          /*
     92          *********************************************************************************************************
     93          *                                       LOCAL GLOBAL VARIABLES
     94          *********************************************************************************************************
     95          */
     96          
     97          
     98          /*
     99          *********************************************************************************************************
    100          *                                      LOCAL FUNCTION PROTOTYPES
    101          *********************************************************************************************************
    102          */
    103          
    104          
    105          /*
    106          *********************************************************************************************************
    107          *                                     LOCAL CONFIGURATION ERRORS
    108          *********************************************************************************************************
    109          */
    110          
    111          
    112          /*$PAGE*/
    113          /*
    114          *********************************************************************************************************
    115          *                                          CPU_BitBandClr()
    116          *
    117          * Description : Clear bit in bit-band region.
    118          *
    119          * Argument(s) : addr            Byte address in memory space.
    120          *
    121          *               bit_nbr         Bit number in byte.
    122          *
    123          * Return(s)   : none.
    124          *
    125          * Caller(s)   : Application.
    126          *
    127          * Note(s)     : none.
    128          *********************************************************************************************************
    129          */
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void  CPU_BitBandClr (CPU_ADDR    addr,
    132                                CPU_INT08U  bit_nbr)
    133          {
    134              CPU_ADDR  bit_word_off;
    135              CPU_ADDR  bit_word_addr;
    136          
    137          
    138              if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
    139                  (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
   \                     CPU_BitBandClr: (+1)
   \   00000000   0xF1B0 0x5200      SUBS     R2,R0,#+536870912
   \   00000004   0xF5B2 0x1F80      CMP      R2,#+1048576
   \   00000008   0xD20A             BCS.N    ??CPU_BitBandClr_0
    140                  bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
   \   0000000A   0xF1B0 0x5000      SUBS     R0,R0,#+536870912
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x0089             LSLS     R1,R1,#+2
   \   00000012   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
    141                  bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
   \   00000016   0xF110 0x5008      ADDS     R0,R0,#+570425344
    142          
    143                *(volatile CPU_INT32U *)(bit_word_addr) = 0;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   \   0000001E   0xE00E             B.N      ??CPU_BitBandClr_1
    144          
    145              } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
    146                         (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
   \                     ??CPU_BitBandClr_0: (+1)
   \   00000020   0xF1B0 0x4280      SUBS     R2,R0,#+1073741824
   \   00000024   0xF5B2 0x1F80      CMP      R2,#+1048576
   \   00000028   0xD209             BCS.N    ??CPU_BitBandClr_1
    147                  bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
   \   0000002A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000002E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000030   0x0089             LSLS     R1,R1,#+2
   \   00000032   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
    148                  bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
   \   00000036   0xF110 0x4084      ADDS     R0,R0,#+1107296256
    149          
    150                *(volatile CPU_INT32U *)(bit_word_addr) = 0;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    151              }
    152          }
   \                     ??CPU_BitBandClr_1: (+1)
   \   0000003E   0x4770             BX       LR               ;; return
    153          
    154          
    155          /*$PAGE*/
    156          /*
    157          *********************************************************************************************************
    158          *                                          CPU_BitBandSet()
    159          *
    160          * Description : Set bit in bit-band region.
    161          *
    162          * Argument(s) : addr            Byte address in memory space.
    163          *
    164          *               bit_nbr         Bit number in byte.
    165          *
    166          * Return(s)   : none.
    167          *
    168          * Caller(s)   : Application.
    169          *
    170          * Note(s)     : none.
    171          *********************************************************************************************************
    172          */
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void  CPU_BitBandSet (CPU_ADDR    addr,
    175                                CPU_INT08U  bit_nbr)
    176          {
    177              CPU_ADDR  bit_word_off;
    178              CPU_ADDR  bit_word_addr;
    179          
    180          
    181              if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
    182                  (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
   \                     CPU_BitBandSet: (+1)
   \   00000000   0xF1B0 0x5200      SUBS     R2,R0,#+536870912
   \   00000004   0xF5B2 0x1F80      CMP      R2,#+1048576
   \   00000008   0xD20A             BCS.N    ??CPU_BitBandSet_0
    183                  bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
   \   0000000A   0xF1B0 0x5000      SUBS     R0,R0,#+536870912
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x0089             LSLS     R1,R1,#+2
   \   00000012   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
    184                  bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
   \   00000016   0xF110 0x5008      ADDS     R0,R0,#+570425344
    185          
    186                *(volatile CPU_INT32U *)(bit_word_addr) = 1;
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   \   0000001E   0xE00E             B.N      ??CPU_BitBandSet_1
    187          
    188              } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
    189                         (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
   \                     ??CPU_BitBandSet_0: (+1)
   \   00000020   0xF1B0 0x4280      SUBS     R2,R0,#+1073741824
   \   00000024   0xF5B2 0x1F80      CMP      R2,#+1048576
   \   00000028   0xD209             BCS.N    ??CPU_BitBandSet_1
    190                  bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
   \   0000002A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000002E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000030   0x0089             LSLS     R1,R1,#+2
   \   00000032   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
    191                  bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
   \   00000036   0xF110 0x4084      ADDS     R0,R0,#+1107296256
    192          
    193                *(volatile CPU_INT32U *)(bit_word_addr) = 1;
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    194              }
    195          }
   \                     ??CPU_BitBandSet_1: (+1)
   \   0000003E   0x4770             BX       LR               ;; return
    196          
    197          
    198          /*$PAGE*/
    199          /*
    200          *********************************************************************************************************
    201          *                                           CPU_IntSrcDis()
    202          *
    203          * Description : Disable an interrupt source.
    204          *
    205          * Argument(s) : pos     Position of interrupt vector in interrupt table :
    206          *
    207          *                           0       Invalid (see Note #1a).
    208          *                           1       Invalid (see Note #1b).
    209          *                           2       Non-maskable interrupt.
    210          *                           3       Hard Fault.
    211          *                           4       Memory Management.
    212          *                           5       Bus Fault.
    213          *                           6       Usage Fault.
    214          *                           7-10    Reserved.
    215          *                           11      SVCall
    216          *                           12      Debug monitor.
    217          *                           13      Reserved
    218          *                           14      PendSV.
    219          *                           15      SysTick.
    220          *                           16+     External Interrupt.
    221          *
    222          * Return(s)   : none.
    223          *
    224          * Caller(s)   : Application.
    225          *
    226          * Note(s)     : (1) Several table positions do not contain interrupt sources :
    227          *
    228          *                   (a) Position 0 contains the stack pointer.
    229          *                   (b) Positions 7-10, 13 are reserved.
    230          *
    231          *               (2) Several interrupts cannot be disabled/enabled :
    232          *
    233          *                   (a) Reset.
    234          *                   (b) NMI.
    235          *                   (c) Hard fault.
    236          *                   (d) SVCall.
    237          *                   (e) Debug monitor.
    238          *                   (f) PendSV.
    239          *
    240          *               (3) The maximum Cortex-M3 table position is 256.  A particular Cortex-M3 may have fewer
    241          *                   than 240 external exceptions and, consequently, fewer than 256 table positions.
    242          *                   This function assumes that the specified table position is valid if the interrupt
    243          *                   controller type register's INTLINESNUM field is large enough so that the position
    244          *                   COULD be valid.
    245          *********************************************************************************************************
    246          */
    247          /*$PAGE*/

   \                                 In section .text, align 2, keep-with-next
    248          void  CPU_IntSrcDis (CPU_INT08U  pos)
    249          {
   \                     CPU_IntSrcDis: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    250              CPU_INT08U  group;
    251              CPU_INT08U  pos_max;
    252              CPU_INT08U  nbr;
    253              CPU_SR_ALLOC();
   \   00000002   0x2400             MOVS     R4,#+0
    254          
    255          
    256              switch (pos) {
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD017             BEQ.N    ??CPU_IntSrcDis_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD016             BEQ.N    ??CPU_IntSrcDis_1
   \   0000000E   0xD315             BCC.N    ??CPU_IntSrcDis_1
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD014             BEQ.N    ??CPU_IntSrcDis_2
   \   00000014   0xD312             BCC.N    ??CPU_IntSrcDis_1
   \   00000016   0x2806             CMP      R0,#+6
   \   00000018   0xD037             BEQ.N    ??CPU_IntSrcDis_3
   \   0000001A   0xD323             BCC.N    ??CPU_IntSrcDis_4
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xD00C             BEQ.N    ??CPU_IntSrcDis_0
   \   00000020   0xD30B             BCC.N    ??CPU_IntSrcDis_0
   \   00000022   0x280A             CMP      R0,#+10
   \   00000024   0xD009             BEQ.N    ??CPU_IntSrcDis_0
   \   00000026   0xD308             BCC.N    ??CPU_IntSrcDis_0
   \   00000028   0x280C             CMP      R0,#+12
   \   0000002A   0xD007             BEQ.N    ??CPU_IntSrcDis_1
   \   0000002C   0xD306             BCC.N    ??CPU_IntSrcDis_1
   \   0000002E   0x280E             CMP      R0,#+14
   \   00000030   0xD004             BEQ.N    ??CPU_IntSrcDis_1
   \   00000032   0xD302             BCC.N    ??CPU_IntSrcDis_0
   \   00000034   0x280F             CMP      R0,#+15
   \   00000036   0xD03B             BEQ.N    ??CPU_IntSrcDis_5
   \   00000038   0xE04D             B.N      ??CPU_IntSrcDis_6
    257                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    258                  case CPU_INT_RSVD_07:
    259                  case CPU_INT_RSVD_08:
    260                  case CPU_INT_RSVD_09:
    261                  case CPU_INT_RSVD_10:
    262                  case CPU_INT_RSVD_13:
    263                       break;
   \                     ??CPU_IntSrcDis_0: (+1)
   \   0000003A   0xE076             B.N      ??CPU_IntSrcDis_7
    264          
    265          
    266                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    267                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    268                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    269                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    270                  case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
    271                  case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
    272                  case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
    273                       break;
   \                     ??CPU_IntSrcDis_1: (+1)
   \   0000003C   0xE075             B.N      ??CPU_IntSrcDis_7
    274          
    275                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    276                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_2: (+1)
   \   0000003E   0x.... 0x....      BL       CPU_SR_Save
   \   00000042   0x0004             MOVS     R4,R0
   \   00000044   0x.... 0x....      BL       CPU_IntDisMeasStart
    277                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   00000056   0x6008             STR      R0,[R1, #+0]
    278                       CPU_CRITICAL_EXIT();
   \   00000058   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       CPU_SR_Restore
    279                       break;
   \   00000062   0xE062             B.N      ??CPU_IntSrcDis_7
    280          
    281                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    282                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_4: (+1)
   \   00000064   0x.... 0x....      BL       CPU_SR_Save
   \   00000068   0x0004             MOVS     R4,R0
   \   0000006A   0x.... 0x....      BL       CPU_IntDisMeasStart
    283                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    284                       CPU_CRITICAL_EXIT();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       CPU_SR_Restore
    285                       break;
   \   00000088   0xE04F             B.N      ??CPU_IntSrcDis_7
    286          
    287                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    288                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_3: (+1)
   \   0000008A   0x.... 0x....      BL       CPU_SR_Save
   \   0000008E   0x0004             MOVS     R4,R0
   \   00000090   0x.... 0x....      BL       CPU_IntDisMeasStart
    289                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    290                       CPU_CRITICAL_EXIT();
   \   000000A4   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0x.... 0x....      BL       CPU_SR_Restore
    291                       break;
   \   000000AE   0xE03C             B.N      ??CPU_IntSrcDis_7
    292          
    293                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    294                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_5: (+1)
   \   000000B0   0x.... 0x....      BL       CPU_SR_Save
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0x.... 0x....      BL       CPU_IntDisMeasStart
    295                       CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable4_1  ;; 0xe000e010
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x0840             LSRS     R0,R0,#+1
   \   000000C2   0x0040             LSLS     R0,R0,#+1
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0xe000e010
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    296                       CPU_CRITICAL_EXIT();
   \   000000CA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       CPU_SR_Restore
    297                       break;
   \   000000D4   0xE029             B.N      ??CPU_IntSrcDis_7
    298          
    299          
    300                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    301                  default:
    302                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcDis_6: (+1)
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0xe000e004
   \   000000DA   0x6809             LDR      R1,[R1, #+0]
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   000000E2   0x0149             LSLS     R1,R1,#+5
   \   000000E4   0x3110             ADDS     R1,R1,#+16
    303                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000EA   0x4288             CMP      R0,R1
   \   000000EC   0xD21D             BCS.N    ??CPU_IntSrcDis_8
    304                           group = (pos - 16) / 32;
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xF1B0 0x0110      SUBS     R1,R0,#+16
   \   000000F4   0x2220             MOVS     R2,#+32
   \   000000F6   0xFB91 0xF5F2      SDIV     R5,R1,R2
    305                           nbr   = (pos - 16) % 32;
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x3810             SUBS     R0,R0,#+16
   \   000000FE   0x2120             MOVS     R1,#+32
   \   00000100   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \   00000104   0xFB06 0x0611      MLS      R6,R6,R1,R0
    306          
    307                           CPU_CRITICAL_ENTER();
   \   00000108   0x.... 0x....      BL       CPU_SR_Save
   \   0000010C   0x0004             MOVS     R4,R0
   \   0000010E   0x.... 0x....      BL       CPU_IntDisMeasStart
    308                           CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x40B0             LSLS     R0,R0,R6
   \   00000116   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable4_3  ;; 0xe000e180
   \   0000011C   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
    309                           CPU_CRITICAL_EXIT();
   \   00000120   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000124   0x0020             MOVS     R0,R4
   \   00000126   0x.... 0x....      BL       CPU_SR_Restore
    310                       }
    311                       break;
    312              }
    313          }
   \                     ??CPU_IntSrcDis_8: (+1)
   \                     ??CPU_IntSrcDis_7: (+1)
   \   0000012A   0xBD70             POP      {R4-R6,PC}       ;; return
    314          
    315          
    316          /*$PAGE*/
    317          /*
    318          *********************************************************************************************************
    319          *                                           CPU_IntSrcEn()
    320          *
    321          * Description : Enable an interrupt source.
    322          *
    323          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    324          *
    325          * Return(s)   : none.
    326          *
    327          * Caller(s)   : Application.
    328          *
    329          * Note(s)     : (1) See 'CPU_IntSrcDis()  Note #1'.
    330          *
    331          *               (2) See 'CPU_IntSrcDis()  Note #2'.
    332          *
    333          *               (3) See 'CPU_IntSrcDis()  Note #3'.
    334          *********************************************************************************************************
    335          */
    336          

   \                                 In section .text, align 2, keep-with-next
    337          void  CPU_IntSrcEn (CPU_INT08U  pos)
    338          {
   \                     CPU_IntSrcEn: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    339              CPU_INT08U  group;
    340              CPU_INT08U  nbr;
    341              CPU_INT08U  pos_max;
    342              CPU_SR_ALLOC();
   \   00000002   0x2400             MOVS     R4,#+0
    343          
    344          
    345              switch (pos) {
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD017             BEQ.N    ??CPU_IntSrcEn_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD016             BEQ.N    ??CPU_IntSrcEn_1
   \   0000000E   0xD315             BCC.N    ??CPU_IntSrcEn_1
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD014             BEQ.N    ??CPU_IntSrcEn_2
   \   00000014   0xD312             BCC.N    ??CPU_IntSrcEn_1
   \   00000016   0x2806             CMP      R0,#+6
   \   00000018   0xD037             BEQ.N    ??CPU_IntSrcEn_3
   \   0000001A   0xD323             BCC.N    ??CPU_IntSrcEn_4
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xD00C             BEQ.N    ??CPU_IntSrcEn_0
   \   00000020   0xD30B             BCC.N    ??CPU_IntSrcEn_0
   \   00000022   0x280A             CMP      R0,#+10
   \   00000024   0xD009             BEQ.N    ??CPU_IntSrcEn_0
   \   00000026   0xD308             BCC.N    ??CPU_IntSrcEn_0
   \   00000028   0x280C             CMP      R0,#+12
   \   0000002A   0xD007             BEQ.N    ??CPU_IntSrcEn_1
   \   0000002C   0xD306             BCC.N    ??CPU_IntSrcEn_1
   \   0000002E   0x280E             CMP      R0,#+14
   \   00000030   0xD004             BEQ.N    ??CPU_IntSrcEn_1
   \   00000032   0xD302             BCC.N    ??CPU_IntSrcEn_0
   \   00000034   0x280F             CMP      R0,#+15
   \   00000036   0xD03B             BEQ.N    ??CPU_IntSrcEn_5
   \   00000038   0xE04D             B.N      ??CPU_IntSrcEn_6
    346                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    347                  case CPU_INT_RSVD_07:
    348                  case CPU_INT_RSVD_08:
    349                  case CPU_INT_RSVD_09:
    350                  case CPU_INT_RSVD_10:
    351                  case CPU_INT_RSVD_13:
    352                       break;
   \                     ??CPU_IntSrcEn_0: (+1)
   \   0000003A   0xE076             B.N      ??CPU_IntSrcEn_7
    353          
    354          
    355                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    356                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    357                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    358                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    359                  case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
    360                  case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
    361                  case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
    362                       break;
   \                     ??CPU_IntSrcEn_1: (+1)
   \   0000003C   0xE075             B.N      ??CPU_IntSrcEn_7
    363          
    364                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    365                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_2: (+1)
   \   0000003E   0x.... 0x....      BL       CPU_SR_Save
   \   00000042   0x0004             MOVS     R4,R0
   \   00000044   0x.... 0x....      BL       CPU_IntDisMeasStart
    366                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   00000056   0x6008             STR      R0,[R1, #+0]
    367                       CPU_CRITICAL_EXIT();
   \   00000058   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       CPU_SR_Restore
    368                       break;
   \   00000062   0xE062             B.N      ??CPU_IntSrcEn_7
    369          
    370                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    371                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_4: (+1)
   \   00000064   0x.... 0x....      BL       CPU_SR_Save
   \   00000068   0x0004             MOVS     R4,R0
   \   0000006A   0x.... 0x....      BL       CPU_IntDisMeasStart
    372                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    373                       CPU_CRITICAL_EXIT();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       CPU_SR_Restore
    374                       break;
   \   00000088   0xE04F             B.N      ??CPU_IntSrcEn_7
    375          
    376                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    377                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_3: (+1)
   \   0000008A   0x.... 0x....      BL       CPU_SR_Save
   \   0000008E   0x0004             MOVS     R4,R0
   \   00000090   0x.... 0x....      BL       CPU_IntDisMeasStart
    378                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0xe000ed24
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0xe000ed24
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    379                       CPU_CRITICAL_EXIT();
   \   000000A4   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0x.... 0x....      BL       CPU_SR_Restore
    380                       break;
   \   000000AE   0xE03C             B.N      ??CPU_IntSrcEn_7
    381          
    382                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    383                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_5: (+1)
   \   000000B0   0x.... 0x....      BL       CPU_SR_Save
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0x.... 0x....      BL       CPU_IntDisMeasStart
    384                       CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable4_1  ;; 0xe000e010
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0xe000e010
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    385                       CPU_CRITICAL_EXIT();
   \   000000CA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       CPU_SR_Restore
    386                       break;
   \   000000D4   0xE029             B.N      ??CPU_IntSrcEn_7
    387          
    388          
    389                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    390                  default:
    391                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcEn_6: (+1)
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0xe000e004
   \   000000DA   0x6809             LDR      R1,[R1, #+0]
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   000000E2   0x0149             LSLS     R1,R1,#+5
   \   000000E4   0x3110             ADDS     R1,R1,#+16
    392                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000EA   0x4288             CMP      R0,R1
   \   000000EC   0xD21D             BCS.N    ??CPU_IntSrcEn_8
    393                           group = (pos - 16) / 32;
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xF1B0 0x0110      SUBS     R1,R0,#+16
   \   000000F4   0x2220             MOVS     R2,#+32
   \   000000F6   0xFB91 0xF5F2      SDIV     R5,R1,R2
    394                           nbr   = (pos - 16) % 32;
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x3810             SUBS     R0,R0,#+16
   \   000000FE   0x2120             MOVS     R1,#+32
   \   00000100   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \   00000104   0xFB06 0x0611      MLS      R6,R6,R1,R0
    395          
    396                           CPU_CRITICAL_ENTER();
   \   00000108   0x.... 0x....      BL       CPU_SR_Save
   \   0000010C   0x0004             MOVS     R4,R0
   \   0000010E   0x.... 0x....      BL       CPU_IntDisMeasStart
    397                           CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x40B0             LSLS     R0,R0,R6
   \   00000116   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable4_4  ;; 0xe000e100
   \   0000011C   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
    398                           CPU_CRITICAL_EXIT();
   \   00000120   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000124   0x0020             MOVS     R0,R4
   \   00000126   0x.... 0x....      BL       CPU_SR_Restore
    399                       }
    400                       break;
    401              }
    402          }
   \                     ??CPU_IntSrcEn_8: (+1)
   \                     ??CPU_IntSrcEn_7: (+1)
   \   0000012A   0xBD70             POP      {R4-R6,PC}       ;; return
    403          
    404          /*$PAGE*/
    405          /*
    406          *********************************************************************************************************
    407          *                                         CPU_IntSrcPendClr()
    408          *
    409          * Description : Clear a pending interrupt.
    410          *
    411          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    412          *
    413          * Return(s)   : none.
    414          *
    415          * Caller(s)   : Application.
    416          *
    417          * Note(s)     : (1) See 'CPU_IntSrcDis()  Note #1'.
    418          *
    419          *               (2) The pending status of several interrupts cannot be clear/set :
    420          *
    421          *                   (a) Reset.
    422          *                   (b) NMI.
    423          *                   (c) Hard fault.
    424          *                   (d) Memory Managment.
    425          *                   (e) Bus Fault.
    426          *                   (f) Usage Fault.
    427          *                   (g) SVCall.
    428          *                   (h) Debug monitor.
    429          *                   (i) PendSV.
    430          *                   (j) Systick 
    431          *
    432          *               (3) See 'CPU_IntSrcDis()  Note #3'.
    433          *********************************************************************************************************
    434          */
    435          

   \                                 In section .text, align 2, keep-with-next
    436          void  CPU_IntSrcPendClr (CPU_INT08U  pos)
    437          
    438          {
   \                     CPU_IntSrcPendClr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    439              CPU_INT08U  group;
    440              CPU_INT08U  nbr;
    441              CPU_INT08U  pos_max;
    442              CPU_SR_ALLOC();
   \   00000002   0x2600             MOVS     R6,#+0
    443          
    444          
    445              switch (pos) {
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD00E             BEQ.N    ??CPU_IntSrcPendClr_0
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0x2905             CMP      R1,#+5
   \   00000010   0xD90C             BLS.N    ??CPU_IntSrcPendClr_1
   \   00000012   0x1F89             SUBS     R1,R1,#+6
   \   00000014   0x2903             CMP      R1,#+3
   \   00000016   0xD908             BLS.N    ??CPU_IntSrcPendClr_0
   \   00000018   0x1F09             SUBS     R1,R1,#+4
   \   0000001A   0x2901             CMP      R1,#+1
   \   0000001C   0xD906             BLS.N    ??CPU_IntSrcPendClr_1
   \   0000001E   0x1E89             SUBS     R1,R1,#+2
   \   00000020   0xD003             BEQ.N    ??CPU_IntSrcPendClr_0
   \   00000022   0x1E49             SUBS     R1,R1,#+1
   \   00000024   0x2901             CMP      R1,#+1
   \   00000026   0xD901             BLS.N    ??CPU_IntSrcPendClr_1
   \   00000028   0xE001             B.N      ??CPU_IntSrcPendClr_2
    446                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    447                  case CPU_INT_RSVD_07:
    448                  case CPU_INT_RSVD_08:
    449                  case CPU_INT_RSVD_09:
    450                  case CPU_INT_RSVD_10:
    451                  case CPU_INT_RSVD_13:
    452                       break;
   \                     ??CPU_IntSrcPendClr_0: (+1)
   \   0000002A   0xE02A             B.N      ??CPU_IntSrcPendClr_3
    453                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    454                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    455                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    456                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    457                  case CPU_INT_MEM:                                       /* Memory management (see Note #2).                     */
    458                  case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
    459                  case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
    460                  case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
    461                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    462                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    463                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    464                       break;
   \                     ??CPU_IntSrcPendClr_1: (+1)
   \   0000002C   0xE029             B.N      ??CPU_IntSrcPendClr_3
    465                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    466                  default:
    467                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcPendClr_2: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0xe000e004
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000003A   0x0149             LSLS     R1,R1,#+5
   \   0000003C   0x3110             ADDS     R1,R1,#+16
    468                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD21D             BCS.N    ??CPU_IntSrcPendClr_4
    469                           group = (pos - 16) / 32;
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0xF1B0 0x0110      SUBS     R1,R0,#+16
   \   0000004C   0x2220             MOVS     R2,#+32
   \   0000004E   0xFB91 0xF4F2      SDIV     R4,R1,R2
    470                           nbr   = (pos - 16) % 32;
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x3810             SUBS     R0,R0,#+16
   \   00000056   0x2120             MOVS     R1,#+32
   \   00000058   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   0000005C   0xFB05 0x0511      MLS      R5,R5,R1,R0
    471          
    472                           CPU_CRITICAL_ENTER();
   \   00000060   0x.... 0x....      BL       CPU_SR_Save
   \   00000064   0x0006             MOVS     R6,R0
   \   00000066   0x.... 0x....      BL       CPU_IntDisMeasStart
    473                           CPU_REG_NVIC_CLRPEND(group) = DEF_BIT(nbr);
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x40A8             LSLS     R0,R0,R5
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable4_5  ;; 0xe000e280
   \   00000074   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    474                           CPU_CRITICAL_EXIT();
   \   00000078   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0x.... 0x....      BL       CPU_SR_Restore
    475                       }
    476                       break;
    477              }
    478          }
   \                     ??CPU_IntSrcPendClr_4: (+1)
   \                     ??CPU_IntSrcPendClr_3: (+1)
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
    479          
    480          
    481          /*$PAGE*/
    482          /*
    483          *********************************************************************************************************
    484          *                                         CPU_IntSrcPrioSet()
    485          *
    486          * Description : Set priority of an interrupt source.
    487          *
    488          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    489          *
    490          *               prio    Priority.  Use a lower priority number for a higher priority.
    491          *
    492          * Return(s)   : none.
    493          *
    494          * Caller(s)   : Application.
    495          *
    496          * Note(s)     : (1) See 'CPU_IntSrcDis()  Note #1'.
    497          *
    498          *               (2) Several interrupts priorities CANNOT be set :
    499          *
    500          *                   (a) Reset (always -3).
    501          *                   (b) NMI (always -2).
    502          *                   (c) Hard fault (always -1).
    503          *
    504          *               (3) See 'CPU_IntSrcDis()  Note #3'.
    505          *********************************************************************************************************
    506          */
    507          

   \                                 In section .text, align 2, keep-with-next
    508          void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
    509                                   CPU_INT08U  prio)
    510          {
   \                     CPU_IntSrcPrioSet: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
    511              CPU_INT08U  group;
    512              CPU_INT08U  nbr;
    513              CPU_INT08U  pos_max;
    514              CPU_INT32U  prio_32;
    515              CPU_INT32U  temp;
    516              CPU_SR_ALLOC();
   \   00000006   0x2500             MOVS     R5,#+0
    517          
    518          
    519              prio_32 = CPU_RevBits((CPU_INT08U)prio);
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       CPU_RevBits
    520              prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
   \   00000010   0x0E04             LSRS     R4,R0,#+24
    521          
    522              switch (pos) {
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD017             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   00000018   0x2E02             CMP      R6,#+2
   \   0000001A   0xD016             BEQ.N    ??CPU_IntSrcPrioSet_1
   \   0000001C   0xD315             BCC.N    ??CPU_IntSrcPrioSet_1
   \   0000001E   0x2E04             CMP      R6,#+4
   \   00000020   0xD014             BEQ.N    ??CPU_IntSrcPrioSet_2
   \   00000022   0xD312             BCC.N    ??CPU_IntSrcPrioSet_1
   \   00000024   0x2E06             CMP      R6,#+6
   \   00000026   0xD038             BEQ.N    ??CPU_IntSrcPrioSet_3
   \   00000028   0xD323             BCC.N    ??CPU_IntSrcPrioSet_4
   \   0000002A   0x2E08             CMP      R6,#+8
   \   0000002C   0xD00C             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   0000002E   0xD30B             BCC.N    ??CPU_IntSrcPrioSet_0
   \   00000030   0x2E0A             CMP      R6,#+10
   \   00000032   0xD009             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   00000034   0xD308             BCC.N    ??CPU_IntSrcPrioSet_0
   \   00000036   0x2E0C             CMP      R6,#+12
   \   00000038   0xD057             BEQ.N    ??CPU_IntSrcPrioSet_5
   \   0000003A   0xD342             BCC.N    ??CPU_IntSrcPrioSet_6
   \   0000003C   0x2E0E             CMP      R6,#+14
   \   0000003E   0xD067             BEQ.N    ??CPU_IntSrcPrioSet_7
   \   00000040   0xD302             BCC.N    ??CPU_IntSrcPrioSet_0
   \   00000042   0x2E0F             CMP      R6,#+15
   \   00000044   0xD078             BEQ.N    ??CPU_IntSrcPrioSet_8
   \   00000046   0xE08B             B.N      ??CPU_IntSrcPrioSet_9
    523                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    524                  case CPU_INT_RSVD_07:
    525                  case CPU_INT_RSVD_08:
    526                  case CPU_INT_RSVD_09:
    527                  case CPU_INT_RSVD_10:
    528                  case CPU_INT_RSVD_13:
    529                       break;
   \                     ??CPU_IntSrcPrioSet_0: (+1)
   \   00000048   0xE0C0             B.N      ??CPU_IntSrcPrioSet_10
    530          
    531          
    532                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    533                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    534                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    535                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    536                       break;
   \                     ??CPU_IntSrcPrioSet_1: (+1)
   \   0000004A   0xE0BF             B.N      ??CPU_IntSrcPrioSet_10
    537          
    538                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    539                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_2: (+1)
   \   0000004C   0x.... 0x....      BL       CPU_SR_Save
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0x.... 0x....      BL       CPU_IntDisMeasStart
    540                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   00000056   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   00000058   0x6800             LDR      R0,[R0, #+0]
    541                       temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
   \   0000005A   0x0A00             LSRS     R0,R0,#+8
   \   0000005C   0x0200             LSLS     R0,R0,#+8
    542                       temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x4320             ORRS     R0,R4,R0
    543                       CPU_REG_NVIC_SHPRI1  = temp;
   \   00000062   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed18
   \   00000064   0x6008             STR      R0,[R1, #+0]
    544                       CPU_CRITICAL_EXIT();
   \   00000066   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       CPU_SR_Restore
    545                       break;
   \   00000070   0xE0AC             B.N      ??CPU_IntSrcPrioSet_10
    546          
    547                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    548                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_4: (+1)
   \   00000072   0x.... 0x....      BL       CPU_SR_Save
   \   00000076   0x0005             MOVS     R5,R0
   \   00000078   0x.... 0x....      BL       CPU_IntDisMeasStart
    549                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   0000007C   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
    550                       temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
   \   00000080   0xF430 0x407F      BICS     R0,R0,#0xFF00
    551                       temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0xEA50 0x2004      ORRS     R0,R0,R4, LSL #+8
    552                       CPU_REG_NVIC_SHPRI1  = temp;
   \   0000008A   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed18
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    553                       CPU_CRITICAL_EXIT();
   \   0000008E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0x.... 0x....      BL       CPU_SR_Restore
    554                       break;
   \   00000098   0xE098             B.N      ??CPU_IntSrcPrioSet_10
    555          
    556                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    557                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_3: (+1)
   \   0000009A   0x.... 0x....      BL       CPU_SR_Save
   \   0000009E   0x0005             MOVS     R5,R0
   \   000000A0   0x.... 0x....      BL       CPU_IntDisMeasStart
    558                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   000000A4   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
    559                       temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
   \   000000A8   0xF430 0x007F      BICS     R0,R0,#0xFF0000
    560                       temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
   \   000000AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AE   0xEA50 0x4004      ORRS     R0,R0,R4, LSL #+16
    561                       CPU_REG_NVIC_SHPRI1  = temp;
   \   000000B2   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed18
   \   000000B4   0x6008             STR      R0,[R1, #+0]
    562                       CPU_CRITICAL_EXIT();
   \   000000B6   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000BA   0x0028             MOVS     R0,R5
   \   000000BC   0x.... 0x....      BL       CPU_SR_Restore
    563                       break;
   \   000000C0   0xE084             B.N      ??CPU_IntSrcPrioSet_10
    564          
    565                  case CPU_INT_SVCALL:                                    /* SVCall.                                              */
    566                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_6: (+1)
   \   000000C2   0x.... 0x....      BL       CPU_SR_Save
   \   000000C6   0x0005             MOVS     R5,R0
   \   000000C8   0x.... 0x....      BL       CPU_IntDisMeasStart
    567                       temp                 = CPU_REG_NVIC_SHPRI2;
   \   000000CC   0x....             LDR.N    R0,??DataTable4_7  ;; 0xe000ed1c
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
    568                       temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
   \   000000D0   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   000000D2   0x0A00             LSRS     R0,R0,#+8
    569                       temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
   \   000000D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D6   0xEA50 0x6004      ORRS     R0,R0,R4, LSL #+24
    570                       CPU_REG_NVIC_SHPRI2  = temp;
   \   000000DA   0x....             LDR.N    R1,??DataTable4_7  ;; 0xe000ed1c
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    571                       CPU_CRITICAL_EXIT();
   \   000000DE   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000E2   0x0028             MOVS     R0,R5
   \   000000E4   0x.... 0x....      BL       CPU_SR_Restore
    572                       break;
   \   000000E8   0xE070             B.N      ??CPU_IntSrcPrioSet_10
    573          
    574                  case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
    575                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_5: (+1)
   \   000000EA   0x.... 0x....      BL       CPU_SR_Save
   \   000000EE   0x0005             MOVS     R5,R0
   \   000000F0   0x.... 0x....      BL       CPU_IntDisMeasStart
    576                       temp                = CPU_REG_NVIC_SHPRI3;
   \   000000F4   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
    577                       temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
   \   000000F8   0x0A00             LSRS     R0,R0,#+8
   \   000000FA   0x0200             LSLS     R0,R0,#+8
    578                       temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x4320             ORRS     R0,R4,R0
    579                       CPU_REG_NVIC_SHPRI3  = temp;
   \   00000100   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000ed20
   \   00000102   0x6008             STR      R0,[R1, #+0]
    580                       CPU_CRITICAL_EXIT();
   \   00000104   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000108   0x0028             MOVS     R0,R5
   \   0000010A   0x.... 0x....      BL       CPU_SR_Restore
    581                       break;
   \   0000010E   0xE05D             B.N      ??CPU_IntSrcPrioSet_10
    582          
    583                  case CPU_INT_PENDSV:                                    /* PendSV.                                              */
    584                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_7: (+1)
   \   00000110   0x.... 0x....      BL       CPU_SR_Save
   \   00000114   0x0005             MOVS     R5,R0
   \   00000116   0x.... 0x....      BL       CPU_IntDisMeasStart
    585                       temp                 = CPU_REG_NVIC_SHPRI3;
   \   0000011A   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
    586                       temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
   \   0000011E   0xF430 0x007F      BICS     R0,R0,#0xFF0000
    587                       temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
   \   00000122   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000124   0xEA50 0x4004      ORRS     R0,R0,R4, LSL #+16
    588                       CPU_REG_NVIC_SHPRI3  = temp;
   \   00000128   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000ed20
   \   0000012A   0x6008             STR      R0,[R1, #+0]
    589                       CPU_CRITICAL_EXIT();
   \   0000012C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000130   0x0028             MOVS     R0,R5
   \   00000132   0x.... 0x....      BL       CPU_SR_Restore
    590                       break;
   \   00000136   0xE049             B.N      ??CPU_IntSrcPrioSet_10
    591          
    592                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    593                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_8: (+1)
   \   00000138   0x.... 0x....      BL       CPU_SR_Save
   \   0000013C   0x0005             MOVS     R5,R0
   \   0000013E   0x.... 0x....      BL       CPU_IntDisMeasStart
    594                       temp                 = CPU_REG_NVIC_SHPRI3;
   \   00000142   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   00000144   0x6800             LDR      R0,[R0, #+0]
    595                       temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
   \   00000146   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   00000148   0x0A00             LSRS     R0,R0,#+8
    596                       temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
   \   0000014A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014C   0xEA50 0x6004      ORRS     R0,R0,R4, LSL #+24
    597                       CPU_REG_NVIC_SHPRI3  = temp;
   \   00000150   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000ed20
   \   00000152   0x6008             STR      R0,[R1, #+0]
    598                       CPU_CRITICAL_EXIT();
   \   00000154   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000158   0x0028             MOVS     R0,R5
   \   0000015A   0x.... 0x....      BL       CPU_SR_Restore
    599                       break;
   \   0000015E   0xE035             B.N      ??CPU_IntSrcPrioSet_10
    600          
    601          
    602                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    603                  default:
    604                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcPrioSet_9: (+1)
   \   00000160   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000e004
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x1C40             ADDS     R0,R0,#+1
   \   00000166   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000016A   0x0140             LSLS     R0,R0,#+5
   \   0000016C   0x3010             ADDS     R0,R0,#+16
    605                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   0000016E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000170   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000172   0x4286             CMP      R6,R0
   \   00000174   0xD22A             BCS.N    ??CPU_IntSrcPrioSet_11
    606                           group                    = (pos - 16) / 4;
   \   00000176   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000178   0xF1B6 0x0010      SUBS     R0,R6,#+16
   \   0000017C   0x2104             MOVS     R1,#+4
   \   0000017E   0xFB90 0xF7F1      SDIV     R7,R0,R1
    607                           nbr                      = (pos - 16) % 4;
   \   00000182   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000184   0xF1B6 0x0010      SUBS     R0,R6,#+16
   \   00000188   0x2104             MOVS     R1,#+4
   \   0000018A   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \   0000018E   0xFB06 0x0611      MLS      R6,R6,R1,R0
    608          
    609                           CPU_CRITICAL_ENTER();
   \   00000192   0x.... 0x....      BL       CPU_SR_Save
   \   00000196   0x0005             MOVS     R5,R0
   \   00000198   0x.... 0x....      BL       CPU_IntDisMeasStart
    610                           temp                     = CPU_REG_NVIC_PRIO(group);
   \   0000019C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000019E   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000e400
   \   000001A0   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
    611                           temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
   \   000001A4   0x21FF             MOVS     R1,#+255
   \   000001A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001A8   0x00F2             LSLS     R2,R6,#+3
   \   000001AA   0x4091             LSLS     R1,R1,R2
   \   000001AC   0x4388             BICS     R0,R0,R1
    612                           temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
   \   000001AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001B2   0x00F1             LSLS     R1,R6,#+3
   \   000001B4   0xFA14 0xF101      LSLS     R1,R4,R1
   \   000001B8   0x4308             ORRS     R0,R1,R0
    613                           CPU_REG_NVIC_PRIO(group) = temp;
   \   000001BA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001BC   0x....             LDR.N    R1,??DataTable4_9  ;; 0xe000e400
   \   000001BE   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
    614                           CPU_CRITICAL_EXIT();
   \   000001C2   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001C6   0x0028             MOVS     R0,R5
   \   000001C8   0x.... 0x....      BL       CPU_SR_Restore
    615                       }
    616                       break;
    617              }
    618          }
   \                     ??CPU_IntSrcPrioSet_11: (+1)
   \                     ??CPU_IntSrcPrioSet_10: (+1)
   \   000001CC   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    619          
    620          
    621          /*$PAGE*/
    622          /*
    623          *********************************************************************************************************
    624          *                                         CPU_IntSrcPrioGet()
    625          *
    626          * Description : Get priority of an interrupt source.
    627          *
    628          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    629          *
    630          * Return(s)   : Priority of interrupt source.  If the interrupt source specified is invalid, then
    631          *               DEF_INT_16S_MIN_VAL is returned.
    632          *
    633          * Caller(s)   : Application.
    634          *
    635          * Note(s)     : (1) See 'CPU_IntSrcDis()      Note #1'.
    636          *
    637          *               (2) See 'CPU_IntSrcPrioSet()  Note #2'.
    638          *
    639          *               (3) See 'CPU_IntSrcDis()      Note #3'.
    640          *********************************************************************************************************
    641          */
    642          

   \                                 In section .text, align 2, keep-with-next
    643          CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
    644          {
   \                     CPU_IntSrcPrioGet: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    645              CPU_INT08U  group;
    646              CPU_INT08U  nbr;
    647              CPU_INT08U  pos_max;
    648              CPU_INT16S  prio;
    649              CPU_INT32U  prio_32;
    650              CPU_INT32U  temp;
    651              CPU_SR_ALLOC();
   \   00000002   0x2400             MOVS     R4,#+0
    652          
    653          
    654              switch (pos) {
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD017             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD01A             BEQ.N    ??CPU_IntSrcPrioGet_1
   \   0000000E   0xD316             BCC.N    ??CPU_IntSrcPrioGet_2
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD01D             BEQ.N    ??CPU_IntSrcPrioGet_3
   \   00000014   0xD319             BCC.N    ??CPU_IntSrcPrioGet_4
   \   00000016   0x2806             CMP      R0,#+6
   \   00000018   0xD037             BEQ.N    ??CPU_IntSrcPrioGet_5
   \   0000001A   0xD327             BCC.N    ??CPU_IntSrcPrioGet_6
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xD00C             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   00000020   0xD30B             BCC.N    ??CPU_IntSrcPrioGet_0
   \   00000022   0x280A             CMP      R0,#+10
   \   00000024   0xD009             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   00000026   0xD308             BCC.N    ??CPU_IntSrcPrioGet_0
   \   00000028   0x280C             CMP      R0,#+12
   \   0000002A   0xD046             BEQ.N    ??CPU_IntSrcPrioGet_7
   \   0000002C   0xD337             BCC.N    ??CPU_IntSrcPrioGet_8
   \   0000002E   0x280E             CMP      R0,#+14
   \   00000030   0xD051             BEQ.N    ??CPU_IntSrcPrioGet_9
   \   00000032   0xD302             BCC.N    ??CPU_IntSrcPrioGet_0
   \   00000034   0x280F             CMP      R0,#+15
   \   00000036   0xD05D             BEQ.N    ??CPU_IntSrcPrioGet_10
   \   00000038   0xE06A             B.N      ??CPU_IntSrcPrioGet_11
    655                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    656                  case CPU_INT_RSVD_07:
    657                  case CPU_INT_RSVD_08:
    658                  case CPU_INT_RSVD_09:
    659                  case CPU_INT_RSVD_10:
    660                  case CPU_INT_RSVD_13:
    661                       prio = DEF_INT_16S_MIN_VAL;
   \                     ??CPU_IntSrcPrioGet_0: (+1)
   \   0000003A   0x....             LDR.N    R5,??DataTable4_10  ;; 0xffff8000
    662                       break;
   \   0000003C   0xE094             B.N      ??CPU_IntSrcPrioGet_12
    663          
    664          
    665                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    666                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    667                       prio = -3;
   \                     ??CPU_IntSrcPrioGet_2: (+1)
   \   0000003E   0xF07F 0x0502      MVNS     R5,#+2
    668                       break;
   \   00000042   0xE091             B.N      ??CPU_IntSrcPrioGet_12
    669          
    670                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    671                       prio = -2;
   \                     ??CPU_IntSrcPrioGet_1: (+1)
   \   00000044   0xF07F 0x0501      MVNS     R5,#+1
    672                       break;
   \   00000048   0xE08E             B.N      ??CPU_IntSrcPrioGet_12
    673          
    674                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    675                       prio = -1;
   \                     ??CPU_IntSrcPrioGet_4: (+1)
   \   0000004A   0xF05F 0x35FF      MOVS     R5,#-1
    676                       break;
   \   0000004E   0xE08B             B.N      ??CPU_IntSrcPrioGet_12
    677          
    678          
    679                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    680                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_3: (+1)
   \   00000050   0x.... 0x....      BL       CPU_SR_Save
   \   00000054   0x0004             MOVS     R4,R0
   \   00000056   0x.... 0x....      BL       CPU_IntDisMeasStart
    681                       temp = CPU_REG_NVIC_SHPRI1;
   \   0000005A   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   0000005C   0x6805             LDR      R5,[R0, #+0]
    682                       prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
    683                       CPU_CRITICAL_EXIT();
   \   00000060   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       CPU_SR_Restore
    684                       break;
   \   0000006A   0xE07D             B.N      ??CPU_IntSrcPrioGet_12
    685          
    686          
    687                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    688                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_6: (+1)
   \   0000006C   0x.... 0x....      BL       CPU_SR_Save
   \   00000070   0x0004             MOVS     R4,R0
   \   00000072   0x.... 0x....      BL       CPU_IntDisMeasStart
    689                       temp = CPU_REG_NVIC_SHPRI1;
   \   00000076   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   00000078   0x6805             LDR      R5,[R0, #+0]
    690                       prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   0000007A   0xF3C5 0x2507      UBFX     R5,R5,#+8,#+8
    691                       CPU_CRITICAL_EXIT();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       CPU_SR_Restore
    692                       break;
   \   00000088   0xE06E             B.N      ??CPU_IntSrcPrioGet_12
    693          
    694          
    695                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    696                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_5: (+1)
   \   0000008A   0x.... 0x....      BL       CPU_SR_Save
   \   0000008E   0x0004             MOVS     R4,R0
   \   00000090   0x.... 0x....      BL       CPU_IntDisMeasStart
    697                       temp = CPU_REG_NVIC_SHPRI1;
   \   00000094   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed18
   \   00000096   0x6805             LDR      R5,[R0, #+0]
    698                       prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   00000098   0x0C28             LSRS     R0,R5,#+16
   \   0000009A   0xB2C5             UXTB     R5,R0            ;; ZeroExt  R5,R0,#+24,#+24
    699                       break;
   \   0000009C   0xE064             B.N      ??CPU_IntSrcPrioGet_12
    700          
    701                  case CPU_INT_SVCALL:                                    /* SVCall.                                              */
    702                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_8: (+1)
   \   0000009E   0x.... 0x....      BL       CPU_SR_Save
   \   000000A2   0x0004             MOVS     R4,R0
   \   000000A4   0x.... 0x....      BL       CPU_IntDisMeasStart
    703                       temp = CPU_REG_NVIC_SHPRI2;
   \   000000A8   0x....             LDR.N    R0,??DataTable4_7  ;; 0xe000ed1c
   \   000000AA   0x6805             LDR      R5,[R0, #+0]
    704                       prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000AC   0x0E2D             LSRS     R5,R5,#+24
    705                       CPU_CRITICAL_EXIT();
   \   000000AE   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x.... 0x....      BL       CPU_SR_Restore
    706                       break;
   \   000000B8   0xE056             B.N      ??CPU_IntSrcPrioGet_12
    707          
    708                  case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
    709                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_7: (+1)
   \   000000BA   0x.... 0x....      BL       CPU_SR_Save
   \   000000BE   0x0004             MOVS     R4,R0
   \   000000C0   0x.... 0x....      BL       CPU_IntDisMeasStart
    710                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000C4   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   000000C6   0x6805             LDR      R5,[R0, #+0]
    711                       prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
    712                       CPU_CRITICAL_EXIT();
   \   000000CA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       CPU_SR_Restore
    713                       break;
   \   000000D4   0xE048             B.N      ??CPU_IntSrcPrioGet_12
    714          
    715                  case CPU_INT_PENDSV:                                    /* PendSV.                                              */
    716                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_9: (+1)
   \   000000D6   0x.... 0x....      BL       CPU_SR_Save
   \   000000DA   0x0004             MOVS     R4,R0
   \   000000DC   0x.... 0x....      BL       CPU_IntDisMeasStart
    717                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000E0   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   000000E2   0x6805             LDR      R5,[R0, #+0]
    718                       prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000E4   0x0C28             LSRS     R0,R5,#+16
   \   000000E6   0xB2C5             UXTB     R5,R0            ;; ZeroExt  R5,R0,#+24,#+24
    719                       CPU_CRITICAL_EXIT();
   \   000000E8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x.... 0x....      BL       CPU_SR_Restore
    720                       break;
   \   000000F2   0xE039             B.N      ??CPU_IntSrcPrioGet_12
    721          
    722                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    723                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_10: (+1)
   \   000000F4   0x.... 0x....      BL       CPU_SR_Save
   \   000000F8   0x0004             MOVS     R4,R0
   \   000000FA   0x.... 0x....      BL       CPU_IntDisMeasStart
    724                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000FE   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000ed20
   \   00000100   0x6805             LDR      R5,[R0, #+0]
    725                       prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   00000102   0x0E2D             LSRS     R5,R5,#+24
    726                       CPU_CRITICAL_EXIT();
   \   00000104   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x.... 0x....      BL       CPU_SR_Restore
    727                       break;
   \   0000010E   0xE02B             B.N      ??CPU_IntSrcPrioGet_12
    728          
    729          
    730                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    731                  default:
    732                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcPrioGet_11: (+1)
   \   00000110   0x....             LDR.N    R1,??DataTable4_2  ;; 0xe000e004
   \   00000112   0x6809             LDR      R1,[R1, #+0]
   \   00000114   0x1C49             ADDS     R1,R1,#+1
   \   00000116   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000011A   0x0149             LSLS     R1,R1,#+5
   \   0000011C   0x3110             ADDS     R1,R1,#+16
    733                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000122   0x4288             CMP      R0,R1
   \   00000124   0xD21F             BCS.N    ??CPU_IntSrcPrioGet_13
    734                           group = (pos - 16) / 4;
   \   00000126   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000128   0xF1B0 0x0110      SUBS     R1,R0,#+16
   \   0000012C   0x2204             MOVS     R2,#+4
   \   0000012E   0xFB91 0xF5F2      SDIV     R5,R1,R2
    735                           nbr   = (pos - 16) % 4;
   \   00000132   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000134   0x3810             SUBS     R0,R0,#+16
   \   00000136   0x2104             MOVS     R1,#+4
   \   00000138   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \   0000013C   0xFB06 0x0611      MLS      R6,R6,R1,R0
    736          
    737                           CPU_CRITICAL_ENTER();
   \   00000140   0x.... 0x....      BL       CPU_SR_Save
   \   00000144   0x0004             MOVS     R4,R0
   \   00000146   0x.... 0x....      BL       CPU_IntDisMeasStart
    738                           temp  = CPU_REG_NVIC_PRIO(group);
   \   0000014A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014C   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000e400
   \   0000014E   0xF850 0x5025      LDR      R5,[R0, R5, LSL #+2]
    739                           CPU_CRITICAL_EXIT();
   \   00000152   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000156   0x0020             MOVS     R0,R4
   \   00000158   0x.... 0x....      BL       CPU_SR_Restore
    740          
    741                           prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   0000015C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000015E   0x00F0             LSLS     R0,R6,#+3
   \   00000160   0x40C5             LSRS     R5,R5,R0
   \   00000162   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000164   0xE000             B.N      ??CPU_IntSrcPrioGet_14
    742                       } else {
    743                           prio  = DEF_INT_16S_MIN_VAL;
   \                     ??CPU_IntSrcPrioGet_13: (+1)
   \   00000166   0x....             LDR.N    R5,??DataTable4_10  ;; 0xffff8000
    744                       }
    745                       break;
    746              }
    747          
    748              if (prio >= 0) {
   \                     ??CPU_IntSrcPrioGet_14: (+1)
   \                     ??CPU_IntSrcPrioGet_12: (+1)
   \   00000168   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000016A   0x2D00             CMP      R5,#+0
   \   0000016C   0xD404             BMI.N    ??CPU_IntSrcPrioGet_15
    749                  prio_32 = CPU_RevBits((CPU_INT32U)prio);
   \   0000016E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000170   0x0028             MOVS     R0,R5
   \   00000172   0x.... 0x....      BL       CPU_RevBits
    750                  prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
   \   00000176   0x0E05             LSRS     R5,R0,#+24
    751              }
    752          
    753              return (prio);
   \                     ??CPU_IntSrcPrioGet_15: (+1)
   \   00000178   0x0028             MOVS     R0,R5
   \   0000017A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000017C   0xBD70             POP      {R4-R6,PC}       ;; return
    754          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xE000ED24         DC32     0xe000ed24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E004         DC32     0xe000e004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xFFFF8000         DC32     0xffff8000
    755          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CPU_BitBandClr
       0   CPU_BitBandSet
      16   CPU_IntSrcDis
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   CPU_IntSrcEn
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   CPU_IntSrcPendClr
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   CPU_IntSrcPrioGet
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_RevBits
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      24   CPU_IntSrcPrioSet
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_RevBits
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      64  CPU_BitBandClr
      64  CPU_BitBandSet
     300  CPU_IntSrcDis
     300  CPU_IntSrcEn
     132  CPU_IntSrcPendClr
     382  CPU_IntSrcPrioGet
     462  CPU_IntSrcPrioSet

 
 1 748 bytes in section .text
 
 1 748 bytes of CODE memory

Errors: none
Warnings: none
