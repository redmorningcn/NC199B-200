###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_memory.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_memory.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\osal_memory.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\osal_memory.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\OSAL\OS\osal_memory.c
      1          /*******************************************************************************
      2           *   Filename:       osal_memory.c
      3           *   Revised:        $Date: 2013-04-17 $
      4           *   Revision:       $
      5           *   Writer:         Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          /*******************************************************************************
     16           * INCLUDES
     17           */
     18          #include <osal.h>
     19          #include <osal_memory.h>
     20          
     21          #if OSAL_MEM_EN > 0
     22          /*******************************************************************************
     23           * CONSTANTS
     24           */
     25          #define MAXMEMHEAP  2048                // 内存分配堆栈大小// Typically, 0.50-1.50K
     26          
     27          #if ( MAXMEMHEAP >= 32768 )
     28            #error MAXMEMHEAP is too big to manage!
     29          #endif
     30          
     31          #if !defined ( OSALMEM_MIN_BLKSZ )
     32            #define OSALMEM_MIN_BLKSZ    16
     33          #endif
     34          
     35          #if !defined ( OSALMEM_SMALL_BLKSZ )
     36            #define OSALMEM_SMALL_BLKSZ  16
     37          #endif
     38          
     39          #if !defined ( OSALMEM_GUARD )
     40            #define OSALMEM_GUARD  TRUE  // TBD - Hacky workaround til Bugzilla 1252 is fixed!
     41            #define OSALMEM_READY  0xE2
     42          #endif
     43          /*******************************************************************************
     44           * TYPEDEFS
     45           */
     46          typedef INT16U  osalMemHdr_t;
     47          
     48          /*******************************************************************************
     49           * MACROS
     50           */
     51          #define OSALMEM_IN_USE  0x8000
     52          
     53          /* This number sets the size of the small-block bucket. Although profiling
     54           * shows max simultaneous alloc of 16x18, timing without profiling overhead
     55           * shows that the best worst case is achieved with the following.
     56           */
     57          #define SMALLBLKHEAP    40
     58          
     59          // To maintain data alignment of the pointer returned, reserve the greater
     60          // space for the memory block header.
     61          #define HDRSZ  ( (sizeof ( halDataAlign_t ) > sizeof( osalMemHdr_t )) ? \
     62                            sizeof ( halDataAlign_t ) : sizeof( osalMemHdr_t ) )
     63          /*******************************************************************************
     64           * LOCAL VARIABLES
     65           */
     66          
     67          #if ( OSALMEM_GUARD )
     68            static byte ready = 0;
     69          #endif
     70          
     71          static osalMemHdr_t *ff1;  // First free block in the small-block bucket.
     72          static osalMemHdr_t *ff2;  // First free block after the small-block bucket.
     73          
     74          #if defined( EXTERNAL_RAM )
     75            static byte  *theHeap = (byte *)EXT_RAM_BEG;
     76          #else
     77            static halDataAlign_t   _theHeap[ MAXMEMHEAP / sizeof( halDataAlign_t ) ];
     78            static byte  *theHeap     = (byte *)_theHeap;
     79          #endif
     80          
     81          /*******************************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          
     85          /*******************************************************************************
     86           * LOCAL FUNCTIONS
     87           */
     88          
     89          /*******************************************************************************
     90           * GLOBAL FUNCTIONS
     91           */
     92          void *osal_mem_alloc(INT16U size );
     93          /*******************************************************************************
     94           * EXTERN VARIABLES
     95           */
     96          
     97          /*******************************************************************************
     98           * @fn      osal_mem_init
     99           *
    100           * @brief   Initialize the heap memory management system.
    101           *
    102           * @param   void
    103           *
    104           * @return  void
    105           */
    106          void osal_mem_init( void )
    107          {
    108            osalMemHdr_t  *tmp;
    109            // Setup a NULL block at the end of the heap for fast comparisons with zero.
    110            tmp = (osalMemHdr_t *)theHeap + (MAXMEMHEAP / HDRSZ) - 1;
    111            *tmp = 0;
    112          
    113            // Setup a small-block bucket.
    114            tmp = (osalMemHdr_t *)theHeap;
    115            *tmp = SMALLBLKHEAP;
    116          
    117            // Setup the wilderness.
    118            tmp = (osalMemHdr_t *)theHeap + (SMALLBLKHEAP / HDRSZ);
    119            *tmp = ((MAXMEMHEAP / HDRSZ) * HDRSZ) - SMALLBLKHEAP - HDRSZ;
    120          
    121          #if ( OSALMEM_GUARD )
    122            ready = OSALMEM_READY;
    123          #endif
    124          
    125            // Setup a NULL block that is never freed so that the small-block bucket
    126            // is never coalesced with the wilderness.
    127            ff1 = tmp;
    128            ff2 = (osalMemHdr_t *)osal_mem_alloc( 0 );
    129            ff1 = (osalMemHdr_t *)theHeap;
    130          }
    131          
    132          /*******************************************************************************
    133           * @fn      osal_mem_kick
    134           *
    135           * @brief   Kick the ff1 pointer out past the long-lived OSAL Task blocks.
    136           *          Invoke this once after all long-lived blocks have been allocated -
    137           *          presently at the end of osal_init_system().
    138           *
    139           * @param   void
    140           *
    141           * @return  void
    142           *******************************************************************************/
    143          void osal_mem_kick( void )
    144          {
    145            halIntState_t  cpu_sr;
    146            CPU_CRITICAL_ENTER();  // Hold off interrupts.
    147          
    148            /* Logic in osal_mem_free() will ratchet ff1 back down to the first free
    149             * block in the small-block bucket.
    150             */
    151            ff1 = ff2;
    152            CPU_CRITICAL_EXIT();  // Re-enable interrupts.
    153          }
    154          
    155          /*******************************************************************************
    156           * @fn      osal_mem_alloc
    157           *
    158           * @brief   Implementation of the allocator functionality.
    159           *
    160           * @param   size - number of bytes to allocate from the heap.
    161           *
    162           * @return  void * - pointer to the heap allocation; NULL if error or failure.
    163           *******************************************************************************/
    164          void *osal_mem_alloc(INT16U size )
    165          {
    166              osalMemHdr_t   *prev;
    167              osalMemHdr_t   *hdr;
    168              halIntState_t   cpu_sr;
    169              INT16U          tmp;
    170              byte  coal = 0;
    171          
    172           #if ( OSALMEM_GUARD )
    173              // Try to protect against premature use by HAL / OSAL.
    174              if ( ready != OSALMEM_READY ) {
    175                  osal_mem_init();
    176              }
    177          #endif
    178              size += HDRSZ;
    179              // Calculate required bytes to add to 'size' to align to halDataAlign_t.
    180              if ( sizeof( halDataAlign_t ) == 2 ) {
    181                  size += (size & 0x01);
    182              } else if ( sizeof( halDataAlign_t ) != 1 ) {
    183                  byte mod = size % sizeof( halDataAlign_t );
    184          
    185                  if ( mod != 0 ) {
    186                      size += (sizeof( halDataAlign_t ) - mod);
    187                  }
    188              }
    189          
    190              CPU_CRITICAL_ENTER();  // Hold off interrupts.
    191          
    192              // Smaller allocations are first attempted in the small-block bucket.
    193              if ( size <= OSALMEM_SMALL_BLKSZ ) {
    194                  hdr = ff1;
    195              } else {
    196                  hdr = ff2;
    197              }
    198              tmp = *hdr;
    199          
    200              do {
    201                  if ( tmp & OSALMEM_IN_USE ) {
    202                      tmp ^= OSALMEM_IN_USE;
    203                      coal = 0;
    204                  }  else {
    205                      if ( coal != 0 ) {
    206                          *prev += *hdr;
    207                          if ( *prev >= size )  {
    208                              hdr = prev;
    209                              tmp = *hdr;
    210                              break;
    211                          }
    212                      } else {
    213                          if ( tmp >= size ) {
    214                              break;
    215                          }
    216                          coal = 1;
    217                          prev = hdr;
    218                      }
    219                  }
    220          
    221                  hdr = (osalMemHdr_t *)((byte *)hdr + tmp);
    222          
    223                  tmp = *hdr;
    224                  if ( tmp == 0 ) {
    225                      hdr = ((void *)NULL);
    226                      break;
    227                  }
    228              } while ( 1 );
    229          
    230              if ( hdr != ((void *)NULL)) {
    231                  tmp -= size;
    232                  // Determine whether the threshold for splitting is met.
    233                  if ( tmp >= OSALMEM_MIN_BLKSZ ) {
    234                      // Split the block before allocating it.
    235                      osalMemHdr_t *next = (osalMemHdr_t *)((byte *)hdr + size);
    236                      *next = tmp;
    237                      *hdr = (size | OSALMEM_IN_USE);
    238                  } else {
    239                      *hdr |= OSALMEM_IN_USE;
    240                  }
    241                  hdr++;
    242              }
    243              CPU_CRITICAL_EXIT();  // Re-enable interrupts.
    244              return (void *)hdr;
    245          }
    246          
    247          /*******************************************************************************
    248           * @fn      osal_mem_free
    249           *
    250           * @brief   Implementation of the de-allocator functionality.
    251           *
    252           * @param   ptr - pointer to the memory to free.
    253           *
    254           * @return  void
    255           *******************************************************************************/
    256          void osal_mem_free( void *ptr )
    257          {
    258              osalMemHdr_t   *currHdr;
    259              halIntState_t   cpu_sr;
    260          
    261          #if ( OSALMEM_GUARD )
    262              // Try to protect against premature use by HAL / OSAL.
    263              if ( ready != OSALMEM_READY ) {
    264                  osal_mem_init();
    265              }
    266          #endif
    267          
    268              CPU_CRITICAL_ENTER();  // Hold off interrupts.
    269              currHdr = (osalMemHdr_t *)ptr - 1;
    270              *currHdr &= ~OSALMEM_IN_USE;
    271          
    272              if ( ff1 > currHdr ) {
    273                  ff1 = currHdr;
    274              }
    275              CPU_CRITICAL_EXIT();  // Re-enable interrupts.
    276          }
    277          
    278          /*******************************************************************************
    279           * 				     end of file                               *
    280           *******************************************************************************/
    281          #endif


 

 


Errors: none
Warnings: none
