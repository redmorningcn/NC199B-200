###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\user\csnr_package_deal.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\user\csnr_package_deal.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\csnr_package_deal.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\csnr_package_deal.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\user\csnr_package_deal.c
      1          /**************************************************************
      2          * Description  : 长沙南车串口异步通讯协议
      3          * Author       : 2018/5/21 星期一, by redmorningcn
      4          */
      5          
      6          //#include  "csnr_package_deal.h"
      7          #include    <includes.h>
      8          #include    "string.h"
      9          
     10          /**************************************************************
     11          * Description  : 对写数据地址检查，防止数据溢出
     12          * Author       : 2018/6/1 星期五, by redmorningcn
     13          */
     14          #define     CSCN_MAX_BUF_LEN   (254)
     15          
     16          //数据打包，根据stcCsnrProtocolPara信息，将数据打包成CNSR数据
     17          //

   \                                 In section .text, align 2, keep-with-next
     18          void	DataPackage_CSNC(strCsnrProtocolPara *sprotocolpara)
     19          {
   \                     DataPackage_CSNC: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     20          	unsigned char	SumCheck8;
     21          	unsigned short	Crc16;
     22          	unsigned short	AddHeadNum;
     23          	unsigned short	i,j;
     24          	unsigned char	ByteStation;
     25          	unsigned char	DataLen = 0;
   \   00000004   0x2600             MOVS     R6,#+0
     26          
     27              /**************************************************************
     28              * Description  : 对数据长度判断，防止溢出
     29              * Author       : 2018/6/1 星期五, by redmorningcn
     30              */
     31              if(sprotocolpara->datalen > CSCN_MAX_BUF_LEN -12){
   \   00000006   0x7B20             LDRB     R0,[R4, #+12]
   \   00000008   0x28F3             CMP      R0,#+243
   \   0000000A   0xDB02             BLT.N    ??DataPackage_CSNC_0
     32                  sprotocolpara->rxtxlen = 0 ;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x7360             STRB     R0,[R4, #+13]
     33                  return ;
   \   00000010   0xE081             B.N      ??DataPackage_CSNC_1
     34              }
     35                  
     36          
     37          	//////////////////////////////////////////////准备数据
     38          	ByteStation = 0;
   \                     ??DataPackage_CSNC_0: (+1)
   \   00000012   0x2500             MOVS     R5,#+0
     39          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD0;
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x68A1             LDR      R1,[R4, #+8]
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x5468             STRB     R0,[R5, R1]
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
     40          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD1;
   \   0000001E   0x2028             MOVS     R0,#+40
   \   00000020   0x68A1             LDR      R1,[R4, #+8]
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x5468             STRB     R0,[R5, R1]
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
     41          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->sourceaddr;
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x68A1             LDR      R1,[R4, #+8]
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x5468             STRB     R0,[R5, R1]
   \   00000030   0x1C6D             ADDS     R5,R5,#+1
     42          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->destaddr;    //地址
   \   00000032   0x7860             LDRB     R0,[R4, #+1]
   \   00000034   0x68A1             LDR      R1,[R4, #+8]
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x5468             STRB     R0,[R5, R1]
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
     43          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->framnum;
   \   0000003C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000003E   0x68A1             LDR      R1,[R4, #+8]
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x5468             STRB     R0,[R5, R1]
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
     44          	sprotocolpara->rxtxbuf[ByteStation++] = (RS485_CHK_CRC<<4) + sprotocolpara->framcode;
   \   00000046   0x78E0             LDRB     R0,[R4, #+3]
   \   00000048   0x3010             ADDS     R0,R0,#+16
   \   0000004A   0x68A1             LDR      R1,[R4, #+8]
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x5468             STRB     R0,[R5, R1]
   \   00000050   0x1C6D             ADDS     R5,R5,#+1
     45          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->datalen;
   \   00000052   0x7B20             LDRB     R0,[R4, #+12]
   \   00000054   0x68A1             LDR      R1,[R4, #+8]
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0x5468             STRB     R0,[R5, R1]
   \   0000005A   0x1C6D             ADDS     R5,R5,#+1
     46          
     47          	DataLen = sprotocolpara->datalen;
   \   0000005C   0x7B26             LDRB     R6,[R4, #+12]
     48          
     49          	SumCheck8 = GetCheckSumNR(&sprotocolpara->rxtxbuf[2],5);		   	//索引区校验
   \   0000005E   0x2105             MOVS     R1,#+5
   \   00000060   0x68A0             LDR      R0,[R4, #+8]
   \   00000062   0x1C80             ADDS     R0,R0,#+2
   \   00000064   0x.... 0x....      BL       GetCheckSumNR
     50          
     51          	sprotocolpara->rxtxbuf[ByteStation++] = SumCheck8;
   \   00000068   0x68A1             LDR      R1,[R4, #+8]
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x5468             STRB     R0,[R5, R1]
   \   0000006E   0x1C6D             ADDS     R5,R5,#+1
     52          
     53          	memcpy(&sprotocolpara->rxtxbuf[8],sprotocolpara->databuf,DataLen);
   \   00000070   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000072   0x6861             LDR      R1,[R4, #+4]
   \   00000074   0x68A0             LDR      R0,[R4, #+8]
   \   00000076   0xF110 0x0708      ADDS     R7,R0,#+8
   \   0000007A   0x0032             MOVS     R2,R6
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy
     54          	ByteStation += DataLen;
   \   00000082   0x1975             ADDS     R5,R6,R5
     55          
     56          	Crc16 = GetCrc16Chk(&sprotocolpara->rxtxbuf[2],6+sprotocolpara->datalen);
   \   00000084   0x7B20             LDRB     R0,[R4, #+12]
   \   00000086   0x1D81             ADDS     R1,R0,#+6
   \   00000088   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008A   0x68A0             LDR      R0,[R4, #+8]
   \   0000008C   0x1C80             ADDS     R0,R0,#+2
   \   0000008E   0x.... 0x....      BL       GetCrc16Chk
     57          
     58          	sprotocolpara->rxtxbuf[ByteStation+1] = (unsigned char)Crc16;
   \   00000092   0x68A1             LDR      R1,[R4, #+8]
   \   00000094   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000096   0x1869             ADDS     R1,R5,R1
   \   00000098   0x7048             STRB     R0,[R1, #+1]
     59          	sprotocolpara->rxtxbuf[ByteStation]   = (unsigned char)(Crc16>>8);
   \   0000009A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009C   0x0A00             LSRS     R0,R0,#+8
   \   0000009E   0x68A1             LDR      R1,[R4, #+8]
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x5468             STRB     R0,[R5, R1]
     60          	ByteStation += sizeof(Crc16);
   \   000000A4   0x1CAD             ADDS     R5,R5,#+2
     61          
     62          	////////////////////////////////////////////////			    按照协议补位
     63          	AddHeadNum = 0;
   \   000000A6   0x2000             MOVS     R0,#+0
     64          	for(i = 2; i< ByteStation + AddHeadNum;i++ )                    //	数据，补移位 FRAM_HERD0
   \   000000A8   0x2102             MOVS     R1,#+2
   \   000000AA   0xE000             B.N      ??DataPackage_CSNC_2
   \                     ??DataPackage_CSNC_3: (+1)
   \   000000AC   0x1C49             ADDS     R1,R1,#+1
   \                     ??DataPackage_CSNC_2: (+1)
   \   000000AE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0x1942             ADDS     R2,R0,R5
   \   000000B6   0x4291             CMP      R1,R2
   \   000000B8   0xDA1D             BGE.N    ??DataPackage_CSNC_4
     65          	{
     66          		if(sprotocolpara->rxtxbuf[i] == FRAM_HERD0)
   \   000000BA   0x68A2             LDR      R2,[R4, #+8]
   \   000000BC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BE   0x5C8A             LDRB     R2,[R1, R2]
   \   000000C0   0x2A10             CMP      R2,#+16
   \   000000C2   0xD1F3             BNE.N    ??DataPackage_CSNC_3
     67          		{
     68          			for(j = ByteStation + AddHeadNum; j >i; j-- ) 	        //	移位
   \   000000C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C6   0x1942             ADDS     R2,R0,R5
   \   000000C8   0xE008             B.N      ??DataPackage_CSNC_5
     69          			{
     70          				sprotocolpara->rxtxbuf[j] = sprotocolpara->rxtxbuf[j-1];
   \                     ??DataPackage_CSNC_6: (+1)
   \   000000CA   0x68A3             LDR      R3,[R4, #+8]
   \   000000CC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000CE   0x18D3             ADDS     R3,R2,R3
   \   000000D0   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   000000D4   0x68A6             LDR      R6,[R4, #+8]
   \   000000D6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000D8   0x5593             STRB     R3,[R2, R6]
     71          			}
   \   000000DA   0x1E52             SUBS     R2,R2,#+1
   \                     ??DataPackage_CSNC_5: (+1)
   \   000000DC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000DE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000E0   0x4291             CMP      R1,R2
   \   000000E2   0xD3F2             BCC.N    ??DataPackage_CSNC_6
     72          
     73          			i++;											        //跳过移位字节
   \   000000E4   0x1C49             ADDS     R1,R1,#+1
     74          			AddHeadNum++;
   \   000000E6   0x1C40             ADDS     R0,R0,#+1
     75                      /**************************************************************
     76                      * Description  : 限定范围，防止溢出
     77                      * Author       : 2018/6/1 星期五, by redmorningcn
     78                      */
     79                      if(ByteStation + AddHeadNum > CSCN_MAX_BUF_LEN)
   \   000000E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x1942             ADDS     R2,R0,R5
   \   000000EE   0x2AFF             CMP      R2,#+255
   \   000000F0   0xDBDC             BLT.N    ??DataPackage_CSNC_3
     80                      {
     81                          ByteStation = CSCN_MAX_BUF_LEN;
   \   000000F2   0x25FE             MOVS     R5,#+254
     82                          AddHeadNum  = 0;
   \   000000F4   0x2000             MOVS     R0,#+0
     83                          break;
     84                      }
     85          		}
     86          	}
     87          
     88          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum] 	= FRAM_END0;
   \                     ??DataPackage_CSNC_4: (+1)
   \   000000F6   0x68A1             LDR      R1,[R4, #+8]
   \   000000F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FC   0x1942             ADDS     R2,R0,R5
   \   000000FE   0x2310             MOVS     R3,#+16
   \   00000100   0x5453             STRB     R3,[R2, R1]
     89          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum+1] 	= FRAM_END1;
   \   00000102   0x68A1             LDR      R1,[R4, #+8]
   \   00000104   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000106   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000108   0x1942             ADDS     R2,R0,R5
   \   0000010A   0x1851             ADDS     R1,R2,R1
   \   0000010C   0x222C             MOVS     R2,#+44
   \   0000010E   0x704A             STRB     R2,[R1, #+1]
     90          
     91          	sprotocolpara->rxtxlen = (unsigned char)(ByteStation + AddHeadNum + 2);
   \   00000110   0x1940             ADDS     R0,R0,R5
   \   00000112   0x1C80             ADDS     R0,R0,#+2
   \   00000114   0x7360             STRB     R0,[R4, #+13]
     92          }
   \                     ??DataPackage_CSNC_1: (+1)
   \   00000116   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     93          
     94          
     95          //数据解包，将接受到的数据解包到，stcCsnrProtocolPara信息
     96          //能简析，返回1；否则，返回0

   \                                 In section .text, align 2, keep-with-next
     97          unsigned char   DataUnpack_CSNC(strCsnrProtocolPara *sprotocolpara)
     98          {
   \                     DataUnpack_CSNC: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
     99              unsigned short        i,j,k;
    100              unsigned char			SumCheck8;
    101              unsigned char			Tmp;
    102              unsigned short			RecCRC16,Check16 = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    103          	int						DataLen = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    104          
    105          	if(sprotocolpara->rxtxlen< 2+6+2+2)
   \   0000000A   0x7B60             LDRB     R0,[R4, #+13]
   \   0000000C   0x280C             CMP      R0,#+12
   \   0000000E   0xDA01             BGE.N    ??DataUnpack_CSNC_0
    106          		return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE0BB             B.N      ??DataUnpack_CSNC_1
    107              /**************************************************************
    108              * Description  : 限定处理范围，防止溢出
    109              * Author       : 2018/6/1 星期五, by redmorningcn
    110              */
    111              if(sprotocolpara->rxtxlen > CSCN_MAX_BUF_LEN)
   \                     ??DataUnpack_CSNC_0: (+1)
   \   00000014   0x7B60             LDRB     R0,[R4, #+13]
   \   00000016   0x28FF             CMP      R0,#+255
   \   00000018   0xD101             BNE.N    ??DataUnpack_CSNC_2
    112                  sprotocolpara->rxtxlen = CSCN_MAX_BUF_LEN;
   \   0000001A   0x20FE             MOVS     R0,#+254
   \   0000001C   0x7360             STRB     R0,[R4, #+13]
    113              
    114              
    115          	for(j = 0;j < sprotocolpara->rxtxlen;j++ )						//去重复通讯首字节
   \                     ??DataUnpack_CSNC_2: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xE00D             B.N      ??DataUnpack_CSNC_3
    116          	{
    117          		if(
    118          				sprotocolpara->rxtxbuf[j] 	== FRAM_HERD0
    119          			&& 	sprotocolpara->rxtxbuf[j+1] == FRAM_HERD0
    120          		   )
    121          		{
    122          			for(k = j;k < sprotocolpara->rxtxlen; k++)
    123          			{
    124          				Tmp	 = sprotocolpara->rxtxbuf[k+1];
   \                     ??DataUnpack_CSNC_4: (+1)
   \   00000022   0x68A2             LDR      R2,[R4, #+8]
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x188A             ADDS     R2,R1,R2
   \   00000028   0x7852             LDRB     R2,[R2, #+1]
    125          
    126          				sprotocolpara->rxtxbuf[k] = Tmp;
   \   0000002A   0x68A3             LDR      R3,[R4, #+8]
   \   0000002C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   0x54CA             STRB     R2,[R1, R3]
    127          			}
   \   00000030   0x1C49             ADDS     R1,R1,#+1
   \                     ??DataUnpack_CSNC_5: (+1)
   \   00000032   0x7B62             LDRB     R2,[R4, #+13]
   \   00000034   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000036   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   0x4291             CMP      R1,R2
   \   0000003A   0xD3F2             BCC.N    ??DataUnpack_CSNC_4
   \                     ??DataUnpack_CSNC_6: (+1)
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \                     ??DataUnpack_CSNC_3: (+1)
   \   0000003E   0x7B61             LDRB     R1,[R4, #+13]
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD20C             BCS.N    ??DataUnpack_CSNC_7
   \   00000048   0x68A1             LDR      R1,[R4, #+8]
   \   0000004A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004C   0x5C41             LDRB     R1,[R0, R1]
   \   0000004E   0x2910             CMP      R1,#+16
   \   00000050   0xD1F4             BNE.N    ??DataUnpack_CSNC_6
   \   00000052   0x68A1             LDR      R1,[R4, #+8]
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x1841             ADDS     R1,R0,R1
   \   00000058   0x7849             LDRB     R1,[R1, #+1]
   \   0000005A   0x2910             CMP      R1,#+16
   \   0000005C   0xD1EE             BNE.N    ??DataUnpack_CSNC_6
   \   0000005E   0x0001             MOVS     R1,R0
   \   00000060   0xE7E7             B.N      ??DataUnpack_CSNC_5
    128          		}
    129          	}
    130          
    131              for(i = 0; i < sprotocolpara->rxtxlen- 10;i++)					//循环遍历
   \                     ??DataUnpack_CSNC_7: (+1)
   \   00000062   0x2600             MOVS     R6,#+0
   \   00000064   0xE000             B.N      ??DataUnpack_CSNC_8
    132              {
    133          		if(		((sprotocolpara->rxtxbuf[i+0]) == FRAM_HERD0)
    134          			&& 	((sprotocolpara->rxtxbuf[i+1]) == FRAM_HERD1)
    135          		  )															//报头
    136          		{
    137          			DataLen = sprotocolpara->rxtxbuf[i+6];
    138                      
    139                      if((DataLen + i) > 512 )
    140                          continue;
   \                     ??DataUnpack_CSNC_9: (+1)
   \                     ??DataUnpack_CSNC_10: (+1)
   \   00000066   0x1C76             ADDS     R6,R6,#+1
   \                     ??DataUnpack_CSNC_8: (+1)
   \   00000068   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006A   0x7B60             LDRB     R0,[R4, #+13]
   \   0000006C   0x380A             SUBS     R0,R0,#+10
   \   0000006E   0x4286             CMP      R6,R0
   \   00000070   0xF280 0x808B      BGE.W    ??DataUnpack_CSNC_11
   \   00000074   0x68A0             LDR      R0,[R4, #+8]
   \   00000076   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000078   0x5C30             LDRB     R0,[R6, R0]
   \   0000007A   0x2810             CMP      R0,#+16
   \   0000007C   0xD1F3             BNE.N    ??DataUnpack_CSNC_10
   \   0000007E   0x68A0             LDR      R0,[R4, #+8]
   \   00000080   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000082   0x1830             ADDS     R0,R6,R0
   \   00000084   0x7840             LDRB     R0,[R0, #+1]
   \   00000086   0x2828             CMP      R0,#+40
   \   00000088   0xD1ED             BNE.N    ??DataUnpack_CSNC_10
   \   0000008A   0x68A0             LDR      R0,[R4, #+8]
   \   0000008C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008E   0x1830             ADDS     R0,R6,R0
   \   00000090   0x7987             LDRB     R7,[R0, #+6]
   \   00000092   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000094   0x19F0             ADDS     R0,R6,R7
   \   00000096   0xF5B0 0x7F00      CMP      R0,#+512
   \   0000009A   0xDCE4             BGT.N    ??DataUnpack_CSNC_9
    141                      
    142          			if(
    143          			 		(sprotocolpara->rxtxbuf[i+10+DataLen] 	!= FRAM_END0)	||
    144          			 	 	(sprotocolpara->rxtxbuf[i+11+DataLen] 	!= FRAM_END1)
    145          			 )
   \   0000009C   0x68A0             LDR      R0,[R4, #+8]
   \   0000009E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A0   0x19B9             ADDS     R1,R7,R6
   \   000000A2   0x1808             ADDS     R0,R1,R0
   \   000000A4   0x7A80             LDRB     R0,[R0, #+10]
   \   000000A6   0x2810             CMP      R0,#+16
   \   000000A8   0xD106             BNE.N    ??DataUnpack_CSNC_12
   \   000000AA   0x68A0             LDR      R0,[R4, #+8]
   \   000000AC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   0x19B9             ADDS     R1,R7,R6
   \   000000B0   0x1808             ADDS     R0,R1,R0
   \   000000B2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000B4   0x282C             CMP      R0,#+44
   \   000000B6   0xD003             BEQ.N    ??DataUnpack_CSNC_13
    146          			 {
    147          
    148          
    149          			 	i = (unsigned short)(i + 10 + DataLen);         //地址不对或帧尾错误，跳过此帧
   \                     ??DataUnpack_CSNC_12: (+1)
   \   000000B8   0xF117 0x000A      ADDS     R0,R7,#+10
   \   000000BC   0x1986             ADDS     R6,R0,R6
    150          			 	continue;
   \   000000BE   0xE7D2             B.N      ??DataUnpack_CSNC_10
    151          			 }
    152                      
    153          
    154          
    155          			DataLen = sprotocolpara->rxtxbuf[i+6];
   \                     ??DataUnpack_CSNC_13: (+1)
   \   000000C0   0x68A0             LDR      R0,[R4, #+8]
   \   000000C2   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C4   0x1830             ADDS     R0,R6,R0
   \   000000C6   0x7987             LDRB     R7,[R0, #+6]
    156          
    157          			SumCheck8 = GetCheckSumNR((unsigned char *)&sprotocolpara->rxtxbuf[i+2],5);		   				//索引区校验
   \   000000C8   0x2105             MOVS     R1,#+5
   \   000000CA   0x68A0             LDR      R0,[R4, #+8]
   \   000000CC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CE   0x1830             ADDS     R0,R6,R0
   \   000000D0   0x1C80             ADDS     R0,R0,#+2
   \   000000D2   0x.... 0x....      BL       GetCheckSumNR
   \   000000D6   0x4680             MOV      R8,R0
    158          
    159          			RecCRC16 = ((unsigned short)sprotocolpara->rxtxbuf[i+8+DataLen]) *256 + sprotocolpara->rxtxbuf[i+9+DataLen];	//校验
   \   000000D8   0x68A0             LDR      R0,[R4, #+8]
   \   000000DA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000DC   0x19B9             ADDS     R1,R7,R6
   \   000000DE   0x1808             ADDS     R0,R1,R0
   \   000000E0   0x7A00             LDRB     R0,[R0, #+8]
   \   000000E2   0xF44F 0x7180      MOV      R1,#+256
   \   000000E6   0x68A2             LDR      R2,[R4, #+8]
   \   000000E8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000EA   0x19BB             ADDS     R3,R7,R6
   \   000000EC   0x189A             ADDS     R2,R3,R2
   \   000000EE   0x7A52             LDRB     R2,[R2, #+9]
   \   000000F0   0xFB01 0x2900      MLA      R9,R1,R0,R2
    160          
    161          			switch(sprotocolpara->rxtxbuf[i+5]>>4)              //校验和算法判断
   \   000000F4   0x68A0             LDR      R0,[R4, #+8]
   \   000000F6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000F8   0x1830             ADDS     R0,R6,R0
   \   000000FA   0x7940             LDRB     R0,[R0, #+5]
   \   000000FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FE   0x0900             LSRS     R0,R0,#+4
   \   00000100   0x2801             CMP      R0,#+1
   \   00000102   0xD004             BEQ.N    ??DataUnpack_CSNC_14
   \   00000104   0xD30E             BCC.N    ??DataUnpack_CSNC_15
   \   00000106   0x2803             CMP      R0,#+3
   \   00000108   0xD00C             BEQ.N    ??DataUnpack_CSNC_16
   \   0000010A   0xD20B             BCS.N    ??DataUnpack_CSNC_15
    162          			{
    163          					case	RS485_CHK_SUM:
    164          									//Check16 = GetCheckSum16(&sprotocolpara->rxtxbuf[i+2],6+DataLen);
    165          									////PrintfCOM0(("\r\n 16位校验和！");
    166          									break;
   \                     ??DataUnpack_CSNC_17: (+1)
   \   0000010C   0xE00A             B.N      ??DataUnpack_CSNC_15
    167          					case	RS485_CHK_CRC:
    168          									Check16 = GetCrc16Chk(&sprotocolpara->rxtxbuf[i+2],(unsigned char )(6+DataLen));
   \                     ??DataUnpack_CSNC_14: (+1)
   \   0000010E   0x1DB9             ADDS     R1,R7,#+6
   \   00000110   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000112   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000114   0x68A0             LDR      R0,[R4, #+8]
   \   00000116   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000118   0x1830             ADDS     R0,R6,R0
   \   0000011A   0x1C80             ADDS     R0,R0,#+2
   \   0000011C   0x.... 0x....      BL       GetCrc16Chk
   \   00000120   0x0005             MOVS     R5,R0
    169          									////PrintfCOM0(("\r\n CRC校验！");
    170          									break;
   \   00000122   0xE7FF             B.N      ??DataUnpack_CSNC_15
    171          					case	RS485_CHK_RESUM:
    172          									break;
    173          			}
    174          
    175          			if(
    176          						SumCheck8 == 	sprotocolpara->rxtxbuf[i+7]
    177          					&& 	RecCRC16  ==	Check16
    178          			  )
   \                     ??DataUnpack_CSNC_16: (+1)
   \                     ??DataUnpack_CSNC_15: (+1)
   \   00000124   0x68A0             LDR      R0,[R4, #+8]
   \   00000126   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000128   0x1830             ADDS     R0,R6,R0
   \   0000012A   0x79C0             LDRB     R0,[R0, #+7]
   \   0000012C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000130   0x4580             CMP      R8,R0
   \   00000132   0xD198             BNE.N    ??DataUnpack_CSNC_10
   \   00000134   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000138   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000013A   0x45A9             CMP      R9,R5
   \   0000013C   0xD193             BNE.N    ??DataUnpack_CSNC_10
    179          			{
    180          				sprotocolpara->sourceaddr 	= sprotocolpara->rxtxbuf[i+2];
   \   0000013E   0x68A0             LDR      R0,[R4, #+8]
   \   00000140   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000142   0x1830             ADDS     R0,R6,R0
   \   00000144   0x7880             LDRB     R0,[R0, #+2]
   \   00000146   0x7020             STRB     R0,[R4, #+0]
    181          				sprotocolpara->destaddr 	= sprotocolpara->rxtxbuf[i+3];
   \   00000148   0x68A0             LDR      R0,[R4, #+8]
   \   0000014A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014C   0x1830             ADDS     R0,R6,R0
   \   0000014E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000150   0x7060             STRB     R0,[R4, #+1]
    182          				sprotocolpara->framnum   	= sprotocolpara->rxtxbuf[i+4];
   \   00000152   0x68A0             LDR      R0,[R4, #+8]
   \   00000154   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000156   0x1830             ADDS     R0,R6,R0
   \   00000158   0x7900             LDRB     R0,[R0, #+4]
   \   0000015A   0x70A0             STRB     R0,[R4, #+2]
    183          				sprotocolpara->framcode  	= sprotocolpara->rxtxbuf[i+5]&0x0f;
   \   0000015C   0x68A0             LDR      R0,[R4, #+8]
   \   0000015E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000160   0x1830             ADDS     R0,R6,R0
   \   00000162   0x7940             LDRB     R0,[R0, #+5]
   \   00000164   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000168   0x70E0             STRB     R0,[R4, #+3]
    184          				sprotocolpara->datalen     	= (unsigned char )DataLen;
   \   0000016A   0x7327             STRB     R7,[R4, #+12]
    185                          
    186                          /**************************************************************
    187                          * Description  : 防止溢出
    188                          * Author       : 2018/6/1 星期五, by redmorningcn
    189                          */
    190                          if(DataLen < CSCN_MAX_BUF_LEN ){
   \   0000016C   0x2FFE             CMP      R7,#+254
   \   0000016E   0xF6BF 0xAF7A      BGE.W    ??DataUnpack_CSNC_10
    191                              memcpy(sprotocolpara->databuf,&sprotocolpara->rxtxbuf[i+8],DataLen);				//数据拷贝
   \   00000172   0x68A0             LDR      R0,[R4, #+8]
   \   00000174   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000176   0x1830             ADDS     R0,R6,R0
   \   00000178   0xF110 0x0108      ADDS     R1,R0,#+8
   \   0000017C   0x6864             LDR      R4,[R4, #+4]
   \   0000017E   0x003A             MOVS     R2,R7
   \   00000180   0x0020             MOVS     R0,R4
   \   00000182   0x.... 0x....      BL       __aeabi_memcpy
    192                              return	1;
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0xE000             B.N      ??DataUnpack_CSNC_1
    193                          }
    194          			}
    195          		}
    196          	}
    197          
    198              return	0;
   \                     ??DataUnpack_CSNC_11: (+1)
   \   0000018A   0x2000             MOVS     R0,#+0
   \                     ??DataUnpack_CSNC_1: (+1)
   \   0000018C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    199          }
    200          
    201          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DataPackage_CSNC
        24   -> GetCheckSumNR
        24   -> GetCrc16Chk
        24   -> __aeabi_memcpy
      32   DataUnpack_CSNC
        32   -> GetCheckSumNR
        32   -> GetCrc16Chk
        32   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     280  DataPackage_CSNC
     400  DataUnpack_CSNC

 
 680 bytes in section .text
 
 680 bytes of CODE memory

Errors: none
Warnings: none
