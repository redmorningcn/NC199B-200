###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Jul/2018  11:13:09
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_cfg_app.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_cfg_app.c
#        -D USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\os_cfg_app.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\os_cfg_app.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\Software\uCOS-III\Source\os_cfg_app.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2016; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                       OS CONFIGURATION (APPLICATION SPECIFICS)
     10          *
     11          * File    : OS_CFG_APP.C
     12          * By      : JJL
     13          * Version : V3.06.00
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your
     20          *           application/product.   We provide ALL the source code for your convenience and to help you
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can find our product's user manual, API reference, release notes and
     30          *           more information at https://doc.micrium.com.
     31          *           You can contact us at www.micrium.com.
     32          ************************************************************************************************************************
     33          * Note(s) : DO NOT CHANGE THIS FILE!
     34          ************************************************************************************************************************
     35          */
     36          
     37          #define  MICRIUM_SOURCE
     38          #include <os_cfg_app.h>
     39          #include "os.h"
     40          
     41          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     42          const  CPU_CHAR  *os_cfg_app__c = "$Id: $";
     43          #endif
     44          
     45          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)
     46          #define  OS_CFG_IDLE_TASK_STK_LIMIT      ((OS_CFG_IDLE_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     47          #endif
     48          
     49          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     50          #define  OS_CFG_STAT_TASK_STK_LIMIT      ((OS_CFG_STAT_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     51          #endif
     52          
     53          #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
     54          #define  OS_CFG_TICK_TASK_STK_LIMIT      ((OS_CFG_TICK_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     55          #endif
     56          
     57          #if (OS_CFG_TMR_EN == DEF_ENABLED)
     58          #define  OS_CFG_TMR_TASK_STK_LIMIT       ((OS_CFG_TMR_TASK_STK_SIZE   * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     59          #endif
     60          
     61          /*
     62          ************************************************************************************************************************
     63          *                                                    DATA STORAGE
     64          ************************************************************************************************************************
     65          */
     66          
     67          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)

   \                                 In section .bss, align 4
     68          CPU_STK        OSCfg_IdleTaskStk   [OS_CFG_IDLE_TASK_STK_SIZE];
   \                     OSCfg_IdleTaskStk:
   \   00000000                      DS8 256
     69          #endif
     70          
     71          #if (OS_CFG_ISR_STK_SIZE > 0u)

   \                                 In section .bss, align 4
     72          CPU_STK        OSCfg_ISRStk        [OS_CFG_ISR_STK_SIZE];
   \                     OSCfg_ISRStk:
   \   00000000                      DS8 512
     73          #endif
     74          
     75          #if (OS_MSG_EN == DEF_ENABLED)

   \                                 In section .bss, align 4
     76          OS_MSG         OSCfg_MsgPool       [OS_CFG_MSG_POOL_SIZE];
   \                     OSCfg_MsgPool:
   \   00000000                      DS8 512
     77          #endif
     78          
     79          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
     80          CPU_STK        OSCfg_StatTaskStk   [OS_CFG_STAT_TASK_STK_SIZE];
     81          #endif
     82          

   \                                 In section .bss, align 4
     83          CPU_STK        OSCfg_TickTaskStk   [OS_CFG_TICK_TASK_STK_SIZE];
   \                     OSCfg_TickTaskStk:
   \   00000000                      DS8 400
     84          
     85          #if (OS_CFG_TMR_EN == DEF_ENABLED)
     86          CPU_STK        OSCfg_TmrTaskStk    [OS_CFG_TMR_TASK_STK_SIZE];
     87          #endif
     88          
     89          /*
     90          ************************************************************************************************************************
     91          *                                                      CONSTANTS
     92          ************************************************************************************************************************
     93          */
     94          
     95          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)

   \                                 In section .rodata, align 4
     96          CPU_STK      * const  OSCfg_IdleTaskStkBasePtr   = &OSCfg_IdleTaskStk[0];
   \                     OSCfg_IdleTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_IdleTaskStk

   \                                 In section .rodata, align 4
     97          CPU_STK_SIZE   const  OSCfg_IdleTaskStkLimit     =  OS_CFG_IDLE_TASK_STK_LIMIT;
   \                     OSCfg_IdleTaskStkLimit:
   \   00000000   0x00000006         DC32 6

   \                                 In section .rodata, align 4
     98          CPU_STK_SIZE   const  OSCfg_IdleTaskStkSize      =  OS_CFG_IDLE_TASK_STK_SIZE;
   \                     OSCfg_IdleTaskStkSize:
   \   00000000   0x00000040         DC32 64

   \                                 In section .rodata, align 4
     99          CPU_INT32U     const  OSCfg_IdleTaskStkSizeRAM   =  sizeof(OSCfg_IdleTaskStk);
   \                     OSCfg_IdleTaskStkSizeRAM:
   \   00000000   0x00000100         DC32 256
    100          #else
    101          CPU_STK      * const  OSCfg_IdleTaskStkBasePtr   = DEF_NULL;
    102          CPU_STK_SIZE   const  OSCfg_IdleTaskStkLimit     = 0u;
    103          CPU_STK_SIZE   const  OSCfg_IdleTaskStkSize      = 0u;
    104          CPU_INT32U     const  OSCfg_IdleTaskStkSizeRAM   = 0u;
    105          #endif
    106          
    107          #if (OS_CFG_ISR_STK_SIZE > 0u)

   \                                 In section .rodata, align 4
    108          CPU_STK      * const  OSCfg_ISRStkBasePtr        = &OSCfg_ISRStk[0];
   \                     OSCfg_ISRStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_ISRStk

   \                                 In section .rodata, align 4
    109          CPU_STK_SIZE   const  OSCfg_ISRStkSize           =  OS_CFG_ISR_STK_SIZE;
   \                     OSCfg_ISRStkSize:
   \   00000000   0x00000080         DC32 128

   \                                 In section .rodata, align 4
    110          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        =  sizeof(OSCfg_ISRStk);
   \                     OSCfg_ISRStkSizeRAM:
   \   00000000   0x00000200         DC32 512
    111          #else
    112          CPU_STK      * const  OSCfg_ISRStkBasePtr        =  DEF_NULL;
    113          CPU_STK_SIZE   const  OSCfg_ISRStkSize           =  0u;
    114          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        =  0u;
    115          #endif
    116          
    117          
    118          #if (OS_MSG_EN == DEF_ENABLED)

   \                                 In section .rodata, align 2
    119          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          =  OS_CFG_MSG_POOL_SIZE;
   \                     OSCfg_MsgPoolSize:
   \   00000000   0x0020             DC16 32

   \                                 In section .rodata, align 4
    120          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       =  sizeof(OSCfg_MsgPool);
   \                     OSCfg_MsgPoolSizeRAM:
   \   00000000   0x00000200         DC32 512

   \                                 In section .rodata, align 4
    121          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = &OSCfg_MsgPool[0];
   \                     OSCfg_MsgPoolBasePtr:
   \   00000000   0x........         DC32 OSCfg_MsgPool
    122          #else
    123          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          =  0u;
    124          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       =  0u;
    125          OS_MSG       * const  OSCfg_MsgPoolBasePtr       =  DEF_NULL;
    126          #endif
    127          
    128          
    129          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
    130          OS_PRIO        const  OSCfg_StatTaskPrio         =  OS_CFG_STAT_TASK_PRIO;
    131          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      =  OS_CFG_STAT_TASK_RATE_HZ;
    132          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = &OSCfg_StatTaskStk[0];
    133          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     =  OS_CFG_STAT_TASK_STK_LIMIT;
    134          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      =  OS_CFG_STAT_TASK_STK_SIZE;
    135          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   =  sizeof(OSCfg_StatTaskStk);
    136          #else

   \                                 In section .rodata, align 1
    137          OS_PRIO        const  OSCfg_StatTaskPrio         =  0u;
   \                     OSCfg_StatTaskPrio:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 4
    138          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      =  0u;
   \                     OSCfg_StatTaskRate_Hz:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    139          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   =  DEF_NULL;
   \                     OSCfg_StatTaskStkBasePtr:
   \   00000000   0x00000000         DC32 0H

   \                                 In section .rodata, align 4
    140          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     =  0u;
   \                     OSCfg_StatTaskStkLimit:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    141          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      =  0u;
   \                     OSCfg_StatTaskStkSize:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    142          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   =  0u;
   \                     OSCfg_StatTaskStkSizeRAM:
   \   00000000   0x00000000         DC32 0
    143          #endif
    144          
    145          

   \                                 In section .rodata, align 4
    146          CPU_STK_SIZE   const  OSCfg_StkSizeMin           =  OS_CFG_STK_SIZE_MIN;
   \                     OSCfg_StkSizeMin:
   \   00000000   0x00000040         DC32 64
    147          
    148          

   \                                 In section .rodata, align 4
    149          OS_RATE_HZ     const  OSCfg_TickRate_Hz          =  OS_CFG_TICK_RATE_HZ;
   \                     OSCfg_TickRate_Hz:
   \   00000000   0x000003E8         DC32 1000

   \                                 In section .rodata, align 1
    150          OS_PRIO        const  OSCfg_TickTaskPrio         =  OS_CFG_TICK_TASK_PRIO;
   \                     OSCfg_TickTaskPrio:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 4
    151          CPU_STK      * const  OSCfg_TickTaskStkBasePtr   = &OSCfg_TickTaskStk[0];
   \                     OSCfg_TickTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_TickTaskStk

   \                                 In section .rodata, align 4
    152          CPU_STK_SIZE   const  OSCfg_TickTaskStkLimit     =  OS_CFG_TICK_TASK_STK_LIMIT;
   \                     OSCfg_TickTaskStkLimit:
   \   00000000   0x0000000A         DC32 10

   \                                 In section .rodata, align 4
    153          CPU_STK_SIZE   const  OSCfg_TickTaskStkSize      =  OS_CFG_TICK_TASK_STK_SIZE;
   \                     OSCfg_TickTaskStkSize:
   \   00000000   0x00000064         DC32 100

   \                                 In section .rodata, align 4
    154          CPU_INT32U     const  OSCfg_TickTaskStkSizeRAM   =  sizeof(OSCfg_TickTaskStk);
   \                     OSCfg_TickTaskStkSizeRAM:
   \   00000000   0x00000190         DC32 400
    155          
    156          
    157          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    158          OS_PRIO        const  OSCfg_TmrTaskPrio          =  OS_CFG_TMR_TASK_PRIO;
    159          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       =  OS_CFG_TMR_TASK_RATE_HZ;
    160          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = &OSCfg_TmrTaskStk[0];
    161          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      =  OS_CFG_TMR_TASK_STK_LIMIT;
    162          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       =  OS_CFG_TMR_TASK_STK_SIZE;
    163          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    =  sizeof(OSCfg_TmrTaskStk);
    164          #else

   \                                 In section .rodata, align 1
    165          OS_PRIO        const  OSCfg_TmrTaskPrio          =  0u;
   \                     OSCfg_TmrTaskPrio:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 4
    166          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       =  0u;
   \                     OSCfg_TmrTaskRate_Hz:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    167          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    =  DEF_NULL;
   \                     OSCfg_TmrTaskStkBasePtr:
   \   00000000   0x00000000         DC32 0H

   \                                 In section .rodata, align 4
    168          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      =  0u;
   \                     OSCfg_TmrTaskStkLimit:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    169          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       =  0u;
   \                     OSCfg_TmrTaskStkSize:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
    170          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    =  0u;
   \                     OSCfg_TmrTaskStkSizeRAM:
   \   00000000   0x00000000         DC32 0
    171          #endif
    172          
    173          
    174          /*
    175          ************************************************************************************************************************
    176          *                                         TOTAL SIZE OF APPLICATION CONFIGURATION
    177          ************************************************************************************************************************
    178          */
    179          

   \                                 In section .rodata, align 4
    180          CPU_INT32U     const  OSCfg_DataSizeRAM          = 0u
   \                     OSCfg_DataSizeRAM:
   \   00000000   0x00000690         DC32 1680
    181          
    182          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)
    183                                                           + sizeof(OSCfg_IdleTaskStk)
    184          #endif
    185          
    186          #if (OS_MSG_EN == DEF_ENABLED)
    187                                                           + sizeof(OSCfg_MsgPool)
    188          #endif
    189          
    190          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
    191                                                           + sizeof(OSCfg_StatTaskStk)
    192          #endif
    193          
    194          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    195                                                           + sizeof(OSCfg_TmrTaskStk)
    196          #endif
    197          
    198          #if (OS_CFG_ISR_STK_SIZE > 0u)
    199                                                           + sizeof(OSCfg_ISRStk)
    200          #endif
    201                                                           + sizeof(OSCfg_TickTaskStk);
    202          
    203          
    204          /*
    205          ************************************************************************************************************************
    206          *                                             OS CONFIGURATION INITIALIZATION
    207          *
    208          * Description: This function is used to make sure that debug variables that are unused in the application are not
    209          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    210          *              DELETE the code in this function while still leaving the declaration of the function itself.
    211          *
    212          * Arguments  : none
    213          *
    214          * Returns    : none
    215          *
    216          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    217          *                  variables which are declared in this file.
    218          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    219          *                  DOES NOT optimize out the 'const' variables above.
    220          ************************************************************************************************************************
    221          */
    222          

   \                                 In section .text, align 2, keep-with-next
    223          void  OSCfg_Init (void)
    224          {
    225              (void)OSCfg_DataSizeRAM;
    226          
    227          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)
    228              (void)OSCfg_IdleTaskStkBasePtr;
    229              (void)OSCfg_IdleTaskStkLimit;
    230              (void)OSCfg_IdleTaskStkSize;
    231              (void)OSCfg_IdleTaskStkSizeRAM;
    232          #endif
    233          
    234              (void)OSCfg_ISRStkBasePtr;
    235              (void)OSCfg_ISRStkSize;
    236              (void)OSCfg_ISRStkSizeRAM;
    237          
    238          #if (OS_MSG_EN == DEF_ENABLED)
    239              (void)OSCfg_MsgPoolSize;
    240              (void)OSCfg_MsgPoolSizeRAM;
    241              (void)OSCfg_MsgPoolBasePtr;
    242          #endif
    243          
    244          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
    245              (void)OSCfg_StatTaskPrio;
    246              (void)OSCfg_StatTaskRate_Hz;
    247              (void)OSCfg_StatTaskStkBasePtr;
    248              (void)OSCfg_StatTaskStkLimit;
    249              (void)OSCfg_StatTaskStkSize;
    250              (void)OSCfg_StatTaskStkSizeRAM;
    251          #endif
    252          
    253              (void)OSCfg_StkSizeMin;
    254          
    255              (void)OSCfg_TickRate_Hz;
    256              (void)OSCfg_TickTaskPrio;
    257              (void)OSCfg_TickTaskStkBasePtr;
    258              (void)OSCfg_TickTaskStkLimit;
    259              (void)OSCfg_TickTaskStkSize;
    260              (void)OSCfg_TickTaskStkSizeRAM;
    261          
    262          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    263              (void)OSCfg_TmrTaskPrio;
    264              (void)OSCfg_TmrTaskRate_Hz;
    265              (void)OSCfg_TmrTaskStkBasePtr;
    266              (void)OSCfg_TmrTaskStkLimit;
    267              (void)OSCfg_TmrTaskStkSize;
    268              (void)OSCfg_TmrTaskStkSizeRAM;
    269          #endif
    270          }
   \                     OSCfg_Init: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSCfg_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  OSCfg_DataSizeRAM
     512  OSCfg_ISRStk
       4  OSCfg_ISRStkBasePtr
       4  OSCfg_ISRStkSize
       4  OSCfg_ISRStkSizeRAM
     256  OSCfg_IdleTaskStk
       4  OSCfg_IdleTaskStkBasePtr
       4  OSCfg_IdleTaskStkLimit
       4  OSCfg_IdleTaskStkSize
       4  OSCfg_IdleTaskStkSizeRAM
       2  OSCfg_Init
     512  OSCfg_MsgPool
       4  OSCfg_MsgPoolBasePtr
       2  OSCfg_MsgPoolSize
       4  OSCfg_MsgPoolSizeRAM
       1  OSCfg_StatTaskPrio
       4  OSCfg_StatTaskRate_Hz
       4  OSCfg_StatTaskStkBasePtr
       4  OSCfg_StatTaskStkLimit
       4  OSCfg_StatTaskStkSize
       4  OSCfg_StatTaskStkSizeRAM
       4  OSCfg_StkSizeMin
       4  OSCfg_TickRate_Hz
       1  OSCfg_TickTaskPrio
     400  OSCfg_TickTaskStk
       4  OSCfg_TickTaskStkBasePtr
       4  OSCfg_TickTaskStkLimit
       4  OSCfg_TickTaskStkSize
       4  OSCfg_TickTaskStkSizeRAM
       1  OSCfg_TmrTaskPrio
       4  OSCfg_TmrTaskRate_Hz
       4  OSCfg_TmrTaskStkBasePtr
       4  OSCfg_TmrTaskStkLimit
       4  OSCfg_TmrTaskStkSize
       4  OSCfg_TmrTaskStkSizeRAM

 
 1 680 bytes in section .bss
   109 bytes in section .rodata
     2 bytes in section .text
 
     2 bytes of CODE  memory
   109 bytes of CONST memory
 1 680 bytes of DATA  memory

Errors: none
Warnings: none
