###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Jul/2018  10:36:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC210\NC210-200处理板\source\driver\bsp_FRAM.c
#    Command line =  
#        F:\iar\NC210\NC210-200处理板\source\driver\bsp_FRAM.c -D
#        USE_STDPERIPH_DRIVER -D APP_RELEASE -lCN
#        F:\iar\NC210\NC210-200处理板\project\app_release\List -o
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC210\NC210-200处理板\project\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\config\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\task\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\user\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\OS\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\OSAL\Ports\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\driver\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-LIB\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uCOS-III\Source\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\ST\STM32\inc\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Ports\STM32\STM32F103\IAR\
#        -I
#        F:\iar\NC210\NC210-200处理板\project\..\source\Software\uC-MB\Source\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\List\bsp_FRAM.lst
#    Object file  =  
#        F:\iar\NC210\NC210-200处理板\project\app_release\Obj\bsp_FRAM.o
#
###############################################################################

F:\iar\NC210\NC210-200处理板\source\driver\bsp_FRAM.c
      1          /*******************************************************************************
      2          * Description  : 铁电FRAM驱动
      3          * Author       : 2018/5/15 星期二, by redmorningcn
      4          *******************************************************************************/
      5          
      6          /*******************************************************************************
      7          * INCLUDES
      8          */
      9          #include <includes.h>
     10          #include <bsp_FRAM.h>
     11          #include <bsp_iic.h>
     12          
     13          
     14          //-------------------------------------------------------------------------------------------------------
     15          //函数名称: 		WriteFM24CL16()
     16          //功    能:			对FM24CL16指定地址进行写数据
     17          //入口参数:         ADDR:       操作地址    地址：0 ~ sizeof(FM24CL16)
     18          //                  		*DataBuf:   数据缓冲
     19          //                  Len: 	数据长度
     20          //作    者： 	redmorningcn
     21          //创建日期： 	2017-05-15
     22          //出口参数:    	无
     23          //说明：            
     24          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     25          OPTIMIZE_NONE u8 WriteFM24CL64(u16  Addr, u8 *DataBuf, u32 DataBufLen)            
     26          {
   \                     WriteFM24CL64: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     27              u32  i = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
     28              u8   SlaveAddr;                                      //从机地址
     29              u16  AddrTemp = 0;                                   //地址缓存
   \   0000000C   0xF05F 0x0900      MOVS     R9,#+0
     30              
     31          	FRAM_WaitEvent();
   \   00000010   0x.... 0x....      BL       FRAM_WaitEvent
     32              
     33              AddrTemp = Addr;
   \   00000014   0x46A1             MOV      R9,R4
     34              AddrTemp += FRAM_START_ADDR;                            //计算地址
     35              
     36              if( (u16)AddrTemp + DataBufLen > FRAM_END_ADDR ) {
   \   00000016   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000001A   0xEB16 0x0009      ADDS     R0,R6,R9
   \   0000001E   0xF5B0 0x5F00      CMP      R0,#+8192
   \   00000022   0xD903             BLS.N    ??WriteFM24CL64_0
     37                  FRAM_SendEvent();
   \   00000024   0x.... 0x....      BL       FRAM_SendEvent
     38                  return  FALSE;                                      //地址未超阶
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE027             B.N      ??WriteFM24CL64_1
     39              }
     40              
     41              SlaveAddr = FRAM_DIVICE_ADDR & (~(0x01));               //求FM24CL64设备写地址
   \                     ??WriteFM24CL64_0: (+1)
   \   0000002C   0x20A0             MOVS     R0,#+160
   \   0000002E   0x4680             MOV      R8,R0
     42              
     43              StartI2C_2();                                             //启动IIC总线
   \   00000030   0x.... 0x....      BL       StartI2C_2
     44              
     45              WriteByteWithI2C_2(SlaveAddr);                            //写FM24CL64地址
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       WriteByteWithI2C_2
     46              CheckSlaveAckI2C_2();
   \   0000003C   0x.... 0x....      BL       CheckSlaveAckI2C_2
     47              
     48              WriteByteWithI2C_2(Addr >> 8);                            //写FM24CL64高位地址
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x0A00             LSRS     R0,R0,#+8
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       WriteByteWithI2C_2
     49              CheckSlaveAckI2C_2();
   \   0000004C   0x.... 0x....      BL       CheckSlaveAckI2C_2
     50              
     51              WriteByteWithI2C_2( Addr );                               //写FM24CL64低位地址
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       WriteByteWithI2C_2
     52              CheckSlaveAckI2C_2();     
   \   00000058   0x.... 0x....      BL       CheckSlaveAckI2C_2
     53              
     54              for(i = 0; i < DataBufLen; i++) {                       //发送数据
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x0007             MOVS     R7,R0
   \                     ??WriteFM24CL64_2: (+1)
   \   00000060   0x42B7             CMP      R7,R6
   \   00000062   0xD206             BCS.N    ??WriteFM24CL64_3
     55                  WriteByteWithI2C_2(DataBuf[i]);                       //写数据
   \   00000064   0x5D78             LDRB     R0,[R7, R5]
   \   00000066   0x.... 0x....      BL       WriteByteWithI2C_2
     56                  CheckSlaveAckI2C_2();                                 //读从机应答信号
   \   0000006A   0x.... 0x....      BL       CheckSlaveAckI2C_2
     57              }
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \   00000070   0xE7F6             B.N      ??WriteFM24CL64_2
     58          
     59              StopI2C_2();                                              //停止IIC操作 
   \                     ??WriteFM24CL64_3: (+1)
   \   00000072   0x.... 0x....      BL       StopI2C_2
     60              
     61          	FRAM_SendEvent();
   \   00000076   0x.... 0x....      BL       FRAM_SendEvent
     62              
     63              return  TRUE;                                           //正确
   \   0000007A   0x2001             MOVS     R0,#+1
   \                     ??WriteFM24CL64_1: (+1)
   \   0000007C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
     64          }
     65          
     66          //-------------------------------------------------------------------------------------------------------
     67          //函数名称:         ReadFM24CL16()
     68          //功    能:         读取FM24CL16指定地址进行数据
     69          //入口参数:         ADDR:       操作地址   地址：0 ~ sizeof(FM24CL16)
     70          //                  *DataBuf:   数据缓冲 
     71          //                  Len:        数据长度
     72          //出口参数:         无
     73          //作    者： 	redmorningcn
     74          //创建日期： 	2017-05-15
     75          //说明：            
     76          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     77          OPTIMIZE_NONE u8 ReadFM24CL64(u16  Addr, u8 *DataBuf, u32 DataBufLen)            
     78          {
   \                     ReadFM24CL64: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     79              u32  i = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
     80              u8   SlaveAddr;                                      //从机地址
     81              u16  AddrTemp;                                       //地址缓存
     82              
     83          	FRAM_WaitEvent();
   \   0000000C   0x.... 0x....      BL       FRAM_WaitEvent
     84              
     85              AddrTemp = Addr;
   \   00000010   0x46A1             MOV      R9,R4
     86              
     87              AddrTemp += FRAM_START_ADDR;                            //计算地址
     88              
     89              if( (u16)AddrTemp + DataBufLen > FRAM_END_ADDR ) {
   \   00000012   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000016   0xEB16 0x0009      ADDS     R0,R6,R9
   \   0000001A   0xF5B0 0x5F00      CMP      R0,#+8192
   \   0000001E   0xD903             BLS.N    ??ReadFM24CL64_0
     90                  FRAM_SendEvent();
   \   00000020   0x.... 0x....      BL       FRAM_SendEvent
     91                  return  FALSE;                                      //地址未超阶
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE037             B.N      ??ReadFM24CL64_1
     92              }
     93              
     94              SlaveAddr = FRAM_DIVICE_ADDR & (~(0x01));               //求FM24CL64设备写地址
   \                     ??ReadFM24CL64_0: (+1)
   \   00000028   0x20A0             MOVS     R0,#+160
   \   0000002A   0x4680             MOV      R8,R0
     95              
     96              StartI2C_2();                                             //启动IIC总线
   \   0000002C   0x.... 0x....      BL       StartI2C_2
     97              
     98              WriteByteWithI2C_2(SlaveAddr);                            //写FM24CL64设备写地址
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       WriteByteWithI2C_2
     99              CheckSlaveAckI2C_2();                                     //读从机应答信号
   \   00000038   0x.... 0x....      BL       CheckSlaveAckI2C_2
    100              
    101              WriteByteWithI2C_2(Addr >> 8 );                           //写数据高位地址
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0x0A00             LSRS     R0,R0,#+8
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       WriteByteWithI2C_2
    102              CheckSlaveAckI2C_2();                                     //读从机应答信号
   \   00000048   0x.... 0x....      BL       CheckSlaveAckI2C_2
    103              
    104              WriteByteWithI2C_2( Addr );                               //写数据低位地址
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       WriteByteWithI2C_2
    105              CheckSlaveAckI2C_2();                                     //读从机应答信号
   \   00000054   0x.... 0x....      BL       CheckSlaveAckI2C_2
    106              
    107              SlaveAddr = (FRAM_DIVICE_ADDR)|(0x01);                  //求FM24CL64设备读地址
   \   00000058   0x20A1             MOVS     R0,#+161
   \   0000005A   0x4680             MOV      R8,R0
    108              
    109              StartI2C_2();                                             //启动IIC总线
   \   0000005C   0x.... 0x....      BL       StartI2C_2
    110              
    111              WriteByteWithI2C_2(SlaveAddr);                            //写FM24CL16地址
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       WriteByteWithI2C_2
    112              CheckSlaveAckI2C_2();                                     //读从机应答信号
   \   00000068   0x.... 0x....      BL       CheckSlaveAckI2C_2
    113              
    114              for(i = 0; i < (DataBufLen -1); i++) {                  //发送数据
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x0007             MOVS     R7,R0
   \                     ??ReadFM24CL64_2: (+1)
   \   00000070   0x1E70             SUBS     R0,R6,#+1
   \   00000072   0x4287             CMP      R7,R0
   \   00000074   0xD206             BCS.N    ??ReadFM24CL64_3
    115             
    116                  DataBuf[i] = ReadByteWithI2C_2();                     //写数据
   \   00000076   0x.... 0x....      BL       ReadByteWithI2C_2
   \   0000007A   0x5578             STRB     R0,[R7, R5]
    117                  MasterAckI2C_2();                                     //主机应答从机
   \   0000007C   0x.... 0x....      BL       MasterAckI2C_2
    118              }
   \   00000080   0x1C7F             ADDS     R7,R7,#+1
   \   00000082   0xE7F5             B.N      ??ReadFM24CL64_2
    119              DataBuf[i] = ReadByteWithI2C_2();                         //写数据
   \                     ??ReadFM24CL64_3: (+1)
   \   00000084   0x.... 0x....      BL       ReadByteWithI2C_2
   \   00000088   0x5578             STRB     R0,[R7, R5]
    120              
    121              MasterNoAckI2C_2();                                       //主机应答从机
   \   0000008A   0x.... 0x....      BL       MasterNoAckI2C_2
    122          
    123              StopI2C_2();
   \   0000008E   0x.... 0x....      BL       StopI2C_2
    124              
    125          	FRAM_SendEvent();
   \   00000092   0x.... 0x....      BL       FRAM_SendEvent
    126              
    127              return  TRUE;                                           //正确
   \   00000096   0x2001             MOVS     R0,#+1
   \                     ??ReadFM24CL64_1: (+1)
   \   00000098   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    128          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ReadFM24CL64
        32   -> CheckSlaveAckI2C_2
        32   -> FRAM_SendEvent
        32   -> FRAM_WaitEvent
        32   -> MasterAckI2C_2
        32   -> MasterNoAckI2C_2
        32   -> ReadByteWithI2C_2
        32   -> StartI2C_2
        32   -> StopI2C_2
        32   -> WriteByteWithI2C_2
      32   WriteFM24CL64
        32   -> CheckSlaveAckI2C_2
        32   -> FRAM_SendEvent
        32   -> FRAM_WaitEvent
        32   -> StartI2C_2
        32   -> StopI2C_2
        32   -> WriteByteWithI2C_2


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     156  ReadFM24CL64
     128  WriteFM24CL64

 
 284 bytes in section .text
 
 284 bytes of CODE memory

Errors: none
Warnings: none
